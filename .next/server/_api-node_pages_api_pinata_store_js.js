"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "_api-node_pages_api_pinata_store_js";
exports.ids = ["_api-node_pages_api_pinata_store_js"];
exports.modules = {

/***/ "(api-node)/./pages/api/pinata/store.js":
/*!***********************************!*\
  !*** ./pages/api/pinata/store.js ***!
  \***********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! axios */ \"axios\");\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ethers */ \"ethers\");\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(ethers__WEBPACK_IMPORTED_MODULE_1__);\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([axios__WEBPACK_IMPORTED_MODULE_0__]);\naxios__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n// Pinata configuration\nconst JWT = process.env.PINATA_JWT;\nconst PINATA_API_KEY = process.env.PINATA_API_KEY;\nconst PINATA_API_SECRET = process.env.PINATA_API_SECRET;\n/**\r\n * @route POST /api/pinata/store\r\n * @desc Store transaction data on Pinata IPFS\r\n * @access Private\r\n */ async function handler(req, res) {\n    if (req.method !== 'POST') {\n        return res.status(405).json({\n            success: false,\n            error: 'Method not allowed'\n        });\n    }\n    // Validate API credentials\n    if (!JWT && (!PINATA_API_KEY || !PINATA_API_SECRET)) {\n        console.error('Pinata API credentials not configured in environment variables');\n        return res.status(500).json({\n            success: false,\n            error: 'Pinata API credentials not configured'\n        });\n    }\n    try {\n        const data = req.body;\n        if (!data || !data.walletAddress) {\n            return res.status(400).json({\n                success: false,\n                error: 'Invalid transaction data'\n            });\n        }\n        console.log('Storing transaction data:', JSON.stringify(data, null, 2));\n        // Add timestamp if not provided\n        if (!data.timestamp) {\n            data.timestamp = new Date().toISOString();\n        }\n        // Create a unique identifier for the transaction\n        const txId = ethers__WEBPACK_IMPORTED_MODULE_1__.ethers.utils.id(`${data.walletAddress}-${data.type}-${data.amount}-${data.timestamp}`);\n        data.id = txId;\n        // Prepare data for Pinata\n        const jsonData = JSON.stringify(data, null, 2);\n        // Upload to Pinata\n        let response;\n        if (JWT) {\n            // Use JWT authentication\n            response = await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].post('https://api.pinata.cloud/pinning/pinJSONToIPFS', data, {\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization': `Bearer ${JWT}`\n                }\n            });\n        } else {\n            // Use API key/secret\n            response = await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].post('https://api.pinata.cloud/pinning/pinJSONToIPFS', data, {\n                headers: {\n                    'Content-Type': 'application/json',\n                    'pinata_api_key': PINATA_API_KEY,\n                    'pinata_secret_api_key': PINATA_API_SECRET\n                }\n            });\n        }\n        const ipfsHash = response.data.IpfsHash;\n        console.log('Transaction stored with IPFS hash:', ipfsHash);\n        // Also add to user's transaction history\n        const historyIpfsHash = await updateUserTransactionHistory(data.walletAddress, {\n            ...data,\n            ipfsHash\n        });\n        return res.status(200).json({\n            success: true,\n            ipfsHash,\n            historyIpfsHash,\n            message: 'Transaction saved to Pinata IPFS'\n        });\n    } catch (error) {\n        console.error('Pinata storage error:', error);\n        return res.status(500).json({\n            success: false,\n            error: `Failed to store transaction on Pinata: ${error.message}`,\n            stack:  true ? error.stack : 0\n        });\n    }\n}\n/**\r\n * Helper function to update a user's transaction history on Pinata\r\n */ async function updateUserTransactionHistory(walletAddress, newTransaction) {\n    try {\n        // Normalize the wallet address to lowercase for consistent lookup\n        const normalizedWalletAddress = walletAddress.toLowerCase();\n        // Create a key for the user's transaction history file\n        const userHistoryKey = `neuro_${normalizedWalletAddress}_transactions`;\n        console.log('Updating transaction history for wallet:', normalizedWalletAddress);\n        // For a production app, you would retrieve the existing history\n        // and append the new transaction\n        // For this example, we'll use global variable storage\n        // Try to load existing transactions from global storage (this is temporary, in a real app use a database)\n        if (!global.userTransactions) {\n            global.userTransactions = {};\n        }\n        let transactions = global.userTransactions[normalizedWalletAddress] || [];\n        // Ensure the transaction has the normalized wallet address\n        const transactionWithNormalizedWallet = {\n            ...newTransaction,\n            walletAddress: normalizedWalletAddress\n        };\n        // Add the new transaction at the beginning of the array\n        transactions = [\n            transactionWithNormalizedWallet,\n            ...transactions\n        ];\n        // Store in global for this session (temporary solution)\n        global.userTransactions[normalizedWalletAddress] = transactions;\n        const historyData = {\n            walletAddress: normalizedWalletAddress,\n            lastUpdated: new Date().toISOString(),\n            transactions\n        };\n        // Store history data as JSON\n        const metadata = {\n            name: `${userHistoryKey}.json`,\n            keyvalues: {\n                walletAddress: normalizedWalletAddress,\n                lastUpdated: new Date().toISOString()\n            }\n        };\n        // Upload to Pinata\n        let response;\n        if (process.env.PINATA_JWT) {\n            // Use JWT authentication\n            response = await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].post('https://api.pinata.cloud/pinning/pinJSONToIPFS', historyData, {\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization': `Bearer ${process.env.PINATA_JWT}`\n                },\n                params: {\n                    pinataMetadata: JSON.stringify(metadata)\n                }\n            });\n        } else {\n            // Use API key/secret\n            response = await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].post('https://api.pinata.cloud/pinning/pinJSONToIPFS', historyData, {\n                headers: {\n                    'Content-Type': 'application/json',\n                    'pinata_api_key': process.env.PINATA_API_KEY,\n                    'pinata_secret_api_key': process.env.PINATA_API_SECRET\n                },\n                params: {\n                    pinataMetadata: JSON.stringify(metadata)\n                }\n            });\n        }\n        const ipfsHash = response.data.IpfsHash;\n        console.log(`Updated transaction history stored with IPFS hash: ${ipfsHash}`);\n        // In a production app, you would store this hash in a database\n        // For this demo, we'll store it in a global variable (this is lost on server restart)\n        if (!global.userHistoryCids) {\n            global.userHistoryCids = {};\n        }\n        global.userHistoryCids[normalizedWalletAddress] = ipfsHash;\n        return ipfsHash;\n    } catch (error) {\n        console.error('Error updating transaction history:', error);\n        throw error;\n    }\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api-node)/./pages/api/pinata/store.js\n");

/***/ })

};
;