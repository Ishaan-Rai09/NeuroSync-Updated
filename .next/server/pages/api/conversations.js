"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/conversations";
exports.ids = ["pages/api/conversations"];
exports.modules = {

/***/ "(api-node)/./lib/services/pinata-conversation-service.js":
/*!*****************************************************!*\
  !*** ./lib/services/pinata-conversation-service.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   pinataConversationService: () => (/* binding */ pinataConversationService)\n/* harmony export */ });\n/* harmony import */ var _pinata_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./pinata-service */ \"(api-node)/./lib/services/pinata-service.js\");\n/* harmony import */ var _pinata_service__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_pinata_service__WEBPACK_IMPORTED_MODULE_0__);\n\n/**\r\n * Simple UUID generation function that doesn't require dependencies\r\n * @returns {string} - A unique ID\r\n */ function generateUniqueId() {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n        const r = Math.random() * 16 | 0;\n        const v = c === 'x' ? r : r & 0x3 | 0x8;\n        return v.toString(16);\n    });\n}\n/**\r\n * Pinata-only Conversation Service\r\n * Handles storing and retrieving conversations only from Pinata IPFS, completely bypassing MongoDB\r\n */ class PinataConversationService {\n    /**\r\n   * Create a new conversation\r\n   * @param {string} userId - User ID\r\n   * @param {string} title - Conversation title\r\n   * @param {Array} messages - Initial messages\r\n   * @returns {Promise<object>} - Created conversation\r\n   */ async createConversation(userId, title, messages = []) {\n        try {\n            // Create conversation object with custom UUID instead of MongoDB ID\n            const conversation = {\n                _id: generateUniqueId(),\n                userId,\n                title: title || 'New Conversation',\n                createdAt: new Date(),\n                updatedAt: new Date(),\n                messages: Array.isArray(messages) ? messages : [],\n                type: 'conversation'\n            };\n            // Store directly to Pinata\n            const pinataResponse = await _pinata_service__WEBPACK_IMPORTED_MODULE_0__.pinataService.storeData(`conversation_${userId}`, conversation, {\n                conversationId: conversation._id\n            });\n            conversation.ipfsHash = pinataResponse.IpfsHash;\n            console.log(`Conversation created in Pinata with hash: ${pinataResponse.IpfsHash}`);\n            return conversation;\n        } catch (error) {\n            console.error('Error in createConversation:', error);\n            throw error;\n        }\n    }\n    /**\r\n   * Add a message to an existing conversation\r\n   * @param {string} conversationId - Conversation ID\r\n   * @param {string} userId - User ID\r\n   * @param {object} message - Message to add\r\n   * @returns {Promise<object>} - Updated conversation\r\n   */ async addMessage(conversationId, userId, message) {\n        try {\n            if (!conversationId || !userId || !message) {\n                throw new Error('Missing required parameters');\n            }\n            // Get all user's pins\n            const pins = await _pinata_service__WEBPACK_IMPORTED_MODULE_0__.pinataService.getHistory(userId);\n            const conversationPin = pins.find((pin)=>{\n                const metadata = pin.metadata?.keyvalues;\n                return metadata?.type === 'conversation' && metadata?.conversationId === conversationId;\n            });\n            if (!conversationPin) {\n                throw new Error(`Conversation ${conversationId} not found for user ${userId}`);\n            }\n            // Get the conversation data\n            const data = await _pinata_service__WEBPACK_IMPORTED_MODULE_0__.pinataService.getData(conversationPin.ipfs_pin_hash);\n            if (!data) {\n                throw new Error(`Failed to retrieve conversation data from Pinata`);\n            }\n            // Add the message to the existing conversation\n            const updatedMessages = [\n                ...data.messages || [],\n                message\n            ];\n            data.messages = updatedMessages;\n            data.updatedAt = new Date();\n            // Store the updated data\n            const pinataResponse = await _pinata_service__WEBPACK_IMPORTED_MODULE_0__.pinataService.storeData(`conversation_${userId}`, {\n                ...data,\n                type: 'conversation',\n                userId\n            }, {\n                conversationId\n            });\n            // Remove the old pin\n            await _pinata_service__WEBPACK_IMPORTED_MODULE_0__.pinataService.removeData(conversationPin.ipfs_pin_hash);\n            console.log(`Added message to conversation ${conversationId} in Pinata`);\n            data.ipfsHash = pinataResponse.IpfsHash;\n            return data;\n        } catch (error) {\n            console.error('Error in addMessage:', error);\n            throw error;\n        }\n    }\n    /**\r\n   * Get a conversation by ID\r\n   * @param {string} conversationId - Conversation ID\r\n   * @param {string} userId - User ID\r\n   * @returns {Promise<object>} - Retrieved conversation\r\n   */ async getConversation(conversationId, userId) {\n        try {\n            if (!conversationId || !userId) {\n                throw new Error('Missing required parameters');\n            }\n            // Get user's pins from Pinata\n            const pins = await _pinata_service__WEBPACK_IMPORTED_MODULE_0__.pinataService.getHistory(userId);\n            const conversationPin = pins.find((pin)=>{\n                const metadata = pin.metadata?.keyvalues;\n                return metadata?.type === 'conversation' && metadata?.conversationId === conversationId;\n            });\n            if (!conversationPin) {\n                throw new Error(`Conversation ${conversationId} not found for user ${userId}`);\n            }\n            // Get the conversation data\n            const data = await _pinata_service__WEBPACK_IMPORTED_MODULE_0__.pinataService.getData(conversationPin.ipfs_pin_hash);\n            if (!data) {\n                throw new Error(`Failed to retrieve conversation data from Pinata`);\n            }\n            console.log(`Retrieved conversation ${conversationId} from Pinata`);\n            data.ipfsHash = conversationPin.ipfs_pin_hash;\n            return data;\n        } catch (error) {\n            console.error('Error in getConversation:', error);\n            throw error;\n        }\n    }\n    /**\r\n   * Get all conversations for a user\r\n   * @param {string} userId - User ID\r\n   * @returns {Promise<Array>} - Array of conversations\r\n   */ async getUserConversations(userId) {\n        try {\n            if (!userId) {\n                throw new Error('Missing required parameter: userId');\n            }\n            // Get all pins for the user\n            const pins = await _pinata_service__WEBPACK_IMPORTED_MODULE_0__.pinataService.getHistory(userId);\n            // Filter for conversation pins\n            const conversationPins = pins.filter((pin)=>{\n                const metadata = pin.metadata?.keyvalues;\n                return metadata?.type === 'conversation';\n            });\n            // Get the data for each conversation\n            const conversations = [];\n            for (const pin of conversationPins){\n                try {\n                    const data = await _pinata_service__WEBPACK_IMPORTED_MODULE_0__.pinataService.getData(pin.ipfs_pin_hash);\n                    if (data) {\n                        data.ipfsHash = pin.ipfs_pin_hash;\n                        conversations.push(data);\n                    }\n                } catch (error) {\n                    console.error(`Failed to get data for pin ${pin.ipfs_pin_hash}:`, error);\n                }\n            }\n            console.log(`Retrieved ${conversations.length} conversations from Pinata for user ${userId}`);\n            return conversations;\n        } catch (error) {\n            console.error('Error in getUserConversations:', error);\n            return [];\n        }\n    }\n    /**\r\n   * Delete a conversation\r\n   * @param {string} conversationId - Conversation ID\r\n   * @param {string} userId - User ID\r\n   * @returns {Promise<boolean>} - Whether the deletion was successful\r\n   */ async deleteConversation(conversationId, userId) {\n        try {\n            if (!conversationId || !userId) {\n                throw new Error('Missing required parameters');\n            }\n            // Get all pins for the user\n            const pins = await _pinata_service__WEBPACK_IMPORTED_MODULE_0__.pinataService.getHistory(userId);\n            const conversationPin = pins.find((pin)=>{\n                const metadata = pin.metadata?.keyvalues;\n                return metadata?.type === 'conversation' && metadata?.conversationId === conversationId;\n            });\n            if (!conversationPin) {\n                console.warn(`Conversation ${conversationId} not found for user ${userId}`);\n                return false;\n            }\n            // Remove the pin\n            const result = await _pinata_service__WEBPACK_IMPORTED_MODULE_0__.pinataService.removeData(conversationPin.ipfs_pin_hash);\n            console.log(`Deleted conversation ${conversationId} from Pinata`);\n            return result.success;\n        } catch (error) {\n            console.error('Error in deleteConversation:', error);\n            return false;\n        }\n    }\n    /**\r\n   * Update conversation title\r\n   * @param {string} conversationId - Conversation ID\r\n   * @param {string} userId - User ID\r\n   * @param {string} newTitle - New title\r\n   * @returns {Promise<object>} - Updated conversation\r\n   */ async updateConversationTitle(conversationId, userId, newTitle) {\n        try {\n            if (!conversationId || !userId || !newTitle) {\n                throw new Error('Missing required parameters');\n            }\n            // Get all pins for the user\n            const pins = await _pinata_service__WEBPACK_IMPORTED_MODULE_0__.pinataService.getHistory(userId);\n            const conversationPin = pins.find((pin)=>{\n                const metadata = pin.metadata?.keyvalues;\n                return metadata?.type === 'conversation' && metadata?.conversationId === conversationId;\n            });\n            if (!conversationPin) {\n                throw new Error(`Conversation ${conversationId} not found for user ${userId}`);\n            }\n            // Get the conversation data\n            const data = await _pinata_service__WEBPACK_IMPORTED_MODULE_0__.pinataService.getData(conversationPin.ipfs_pin_hash);\n            if (!data) {\n                throw new Error(`Failed to retrieve conversation data from Pinata`);\n            }\n            // Update the title\n            data.title = newTitle;\n            data.updatedAt = new Date();\n            // Store the updated data\n            const pinataResponse = await _pinata_service__WEBPACK_IMPORTED_MODULE_0__.pinataService.storeData(`conversation_${userId}`, {\n                ...data,\n                type: 'conversation',\n                userId\n            }, {\n                conversationId\n            });\n            // Remove the old pin\n            await _pinata_service__WEBPACK_IMPORTED_MODULE_0__.pinataService.removeData(conversationPin.ipfs_pin_hash);\n            console.log(`Updated title for conversation ${conversationId} in Pinata`);\n            data.ipfsHash = pinataResponse.IpfsHash;\n            return data;\n        } catch (error) {\n            console.error('Error in updateConversationTitle:', error);\n            throw error;\n        }\n    }\n    /**\r\n   * Delete all conversations for a user\r\n   * @param {string} userId - User ID\r\n   * @returns {Promise<boolean>} - Whether the deletion was successful\r\n   */ async deleteAllUserConversations(userId) {\n        try {\n            if (!userId) {\n                throw new Error('Missing required parameter: userId');\n            }\n            // Get all pins for the user\n            const pins = await _pinata_service__WEBPACK_IMPORTED_MODULE_0__.pinataService.getHistory(userId);\n            // Filter for conversation pins\n            const conversationPins = pins.filter((pin)=>{\n                const metadata = pin.metadata?.keyvalues;\n                return metadata?.type === 'conversation';\n            });\n            // Delete each conversation\n            let success = true;\n            for (const pin of conversationPins){\n                try {\n                    const result = await _pinata_service__WEBPACK_IMPORTED_MODULE_0__.pinataService.removeData(pin.ipfs_pin_hash);\n                    if (!result.success) {\n                        success = false;\n                    }\n                } catch (error) {\n                    console.error(`Failed to delete pin ${pin.ipfs_pin_hash}:`, error);\n                    success = false;\n                }\n            }\n            console.log(`Deleted ${conversationPins.length} conversations from Pinata for user ${userId}`);\n            return success;\n        } catch (error) {\n            console.error('Error in deleteAllUserConversations:', error);\n            return false;\n        }\n    }\n}\nconst pinataConversationService = new PinataConversationService();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api-node)/./lib/services/pinata-conversation-service.js\n");

/***/ }),

/***/ "(api-node)/./lib/services/pinata-service.js":
/*!****************************************!*\
  !*** ./lib/services/pinata-service.js ***!
  \****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst axios = __webpack_require__(/*! axios */ \"axios?6fac\");\n/**\r\n * Pinata IPFS Service\r\n * Handles storing and retrieving data from Pinata IPFS\r\n */ class PinataService {\n    constructor(){\n        this.apiKey = process.env.PINATA_API_KEY;\n        this.apiSecret = process.env.PINATA_API_SECRET;\n        this.jwt = process.env.PINATA_JWT;\n        this.apiUrl = 'https://api.pinata.cloud';\n        this.gateway = 'https://gateway.pinata.cloud/ipfs/';\n    }\n    /**\r\n   * Check if the Pinata credentials are configured\r\n   */ isConfigured() {\n        return !!(this.jwt || this.apiKey && this.apiSecret);\n    }\n    /**\r\n   * Get the headers for Pinata API requests\r\n   */ getHeaders() {\n        if (this.jwt) {\n            return {\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${this.jwt}`\n            };\n        } else if (this.apiKey && this.apiSecret) {\n            return {\n                'Content-Type': 'application/json',\n                'pinata_api_key': this.apiKey,\n                'pinata_secret_api_key': this.apiSecret\n            };\n        } else {\n            throw new Error('Pinata credentials not configured');\n        }\n    }\n    /**\r\n   * Store data on Pinata IPFS\r\n   * @param {string} keyName - Unique key for the data\r\n   * @param {object} data - Data to store\r\n   * @param {object} metadata - Optional metadata for the pin\r\n   * @returns {Promise<object>} - Response from Pinata\r\n   */ async storeData(keyName, data, metadata = {}) {\n        try {\n            if (!this.isConfigured()) {\n                throw new Error('Pinata credentials not configured');\n            }\n            // Generate a unique identifier for the transaction\n            const uniqueId = `${keyName}_${Date.now()}`;\n            // Prepare the data for Pinata\n            const pinataBody = {\n                pinataContent: data,\n                pinataMetadata: {\n                    name: uniqueId,\n                    keyvalues: {\n                        userId: data.userId || 'anonymous',\n                        type: data.type || 'conversation',\n                        timestamp: Date.now(),\n                        ...metadata\n                    }\n                }\n            };\n            // Upload to Pinata\n            const response = await axios.post(`${this.apiUrl}/pinning/pinJSONToIPFS`, pinataBody, {\n                headers: this.getHeaders()\n            });\n            return response.data;\n        } catch (error) {\n            console.error('Failed to store data on Pinata:', error?.response?.data || error?.message || error);\n            throw error;\n        }\n    }\n    /**\r\n   * Get data from Pinata IPFS\r\n   * @param {string} ipfsHash - IPFS hash to retrieve\r\n   * @returns {Promise<object>} - Retrieved data\r\n   */ async getData(ipfsHash) {\n        try {\n            if (!ipfsHash) {\n                throw new Error('IPFS hash is required');\n            }\n            // Fetch data from Pinata Gateway\n            const response = await axios.get(`${this.gateway}${ipfsHash}`);\n            return response.data;\n        } catch (error) {\n            console.error(`Failed to get data from Pinata (${ipfsHash}):`, error?.message || error);\n            return null;\n        }\n    }\n    /**\r\n   * Get history of pins for a user\r\n   * @param {string} userId - User ID to get history for\r\n   * @returns {Promise<Array>} - Array of pins\r\n   */ async getHistory(userId) {\n        try {\n            if (!this.isConfigured()) {\n                throw new Error('Pinata credentials not configured');\n            }\n            if (!userId) {\n                return [];\n            }\n            // Query Pinata for pins with the user's ID\n            const response = await axios.get(`${this.apiUrl}/data/pinList?metadata[keyvalues][userId]={\"value\":\"${userId}\",\"op\":\"eq\"}&status=pinned`, {\n                headers: this.getHeaders()\n            });\n            return response.data.rows || [];\n        } catch (error) {\n            console.error(`Failed to get history from Pinata for user ${userId}:`, error?.response?.data || error?.message || error);\n            return [];\n        }\n    }\n    /**\r\n   * Remove data from Pinata IPFS\r\n   * @param {string} ipfsHash - IPFS hash to remove\r\n   * @returns {Promise<object>} - Response from Pinata\r\n   */ async removeData(ipfsHash) {\n        try {\n            if (!this.isConfigured()) {\n                throw new Error('Pinata credentials not configured');\n            }\n            if (!ipfsHash) {\n                throw new Error('IPFS hash is required');\n            }\n            // Unpin from Pinata\n            const response = await axios.delete(`${this.apiUrl}/pinning/unpin/${ipfsHash}`, {\n                headers: this.getHeaders()\n            });\n            return {\n                success: true,\n                data: response.data\n            };\n        } catch (error) {\n            console.error(`Failed to remove data from Pinata (${ipfsHash}):`, error?.response?.data || error?.message || error);\n            // If the error is 404, it means the pin doesn't exist, so we consider it removed\n            if (error?.response?.status === 404) {\n                return {\n                    success: true,\n                    message: 'Pin not found'\n                };\n            }\n            throw error;\n        }\n    }\n    /**\r\n   * Test the Pinata connection\r\n   * @returns {Promise<boolean>} - Whether the connection was successful\r\n   */ async testConnection() {\n        try {\n            if (!this.isConfigured()) {\n                return false;\n            }\n            // Test the connection by getting the pin count\n            await axios.get(`${this.apiUrl}/data/userPinnedDataTotal`, {\n                headers: this.getHeaders()\n            });\n            return true;\n        } catch (error) {\n            console.error('Pinata connection test failed:', error?.response?.data || error?.message || error);\n            return false;\n        }\n    }\n    /**\r\n   * Get all pins from Pinata regardless of user ID\r\n   * @returns {Promise<Array>} - Array of pins\r\n   */ async getAllPins() {\n        try {\n            if (!this.isConfigured()) {\n                throw new Error('Pinata credentials not configured');\n            }\n            // Query Pinata for all pins\n            const response = await axios.get(`${this.apiUrl}/data/pinList?status=pinned`, {\n                headers: this.getHeaders()\n            });\n            return response.data.rows || [];\n        } catch (error) {\n            console.error(`Failed to get all pins from Pinata:`, error?.response?.data || error?.message || error);\n            return [];\n        }\n    }\n}\nconst pinataService = new PinataService();\nmodule.exports = {\n    pinataService\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api-node)/./lib/services/pinata-service.js\n");

/***/ }),

/***/ "(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fconversations&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cconversations%5Cindex.js&middlewareConfigBase64=e30%3D!":
/*!****************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fconversations&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cconversations%5Cindex.js&middlewareConfigBase64=e30%3D! ***!
  \****************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   routeModule: () => (/* binding */ routeModule)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/route-modules/pages-api/module.compiled */ \"(api-node)/./node_modules/next/dist/server/route-modules/pages-api/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(api-node)/./node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"(api-node)/./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var _pages_api_conversations_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./pages\\api\\conversations\\index.js */ \"(api-node)/./pages/api/conversations/index.js\");\n\n\n\n// Import the userland code.\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_conversations_index_js__WEBPACK_IMPORTED_MODULE_3__, 'default'));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_conversations_index_js__WEBPACK_IMPORTED_MODULE_3__, 'config');\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: \"/api/conversations\",\n        pathname: \"/api/conversations\",\n        // The following aren't used in production.\n        bundlePath: '',\n        filename: ''\n    },\n    userland: _pages_api_conversations_index_js__WEBPACK_IMPORTED_MODULE_3__\n});\n\n//# sourceMappingURL=pages-api.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaS1ub2RlKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYnVpbGQvd2VicGFjay9sb2FkZXJzL25leHQtcm91dGUtbG9hZGVyL2luZGV4LmpzP2tpbmQ9UEFHRVNfQVBJJnBhZ2U9JTJGYXBpJTJGY29udmVyc2F0aW9ucyZwcmVmZXJyZWRSZWdpb249JmFic29sdXRlUGFnZVBhdGg9LiUyRnBhZ2VzJTVDYXBpJTVDY29udmVyc2F0aW9ucyU1Q2luZGV4LmpzJm1pZGRsZXdhcmVDb25maWdCYXNlNjQ9ZTMwJTNEISIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUErRjtBQUN2QztBQUNFO0FBQzFEO0FBQ2tFO0FBQ2xFO0FBQ0EsaUVBQWUsd0VBQUssQ0FBQyw4REFBUSxZQUFZLEVBQUM7QUFDMUM7QUFDTyxlQUFlLHdFQUFLLENBQUMsOERBQVE7QUFDcEM7QUFDTyx3QkFBd0IseUdBQW1CO0FBQ2xEO0FBQ0EsY0FBYyxrRUFBUztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLFlBQVk7QUFDWixDQUFDOztBQUVEIiwic291cmNlcyI6WyIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGFnZXNBUElSb3V0ZU1vZHVsZSB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL3JvdXRlLW1vZHVsZXMvcGFnZXMtYXBpL21vZHVsZS5jb21waWxlZFwiO1xuaW1wb3J0IHsgUm91dGVLaW5kIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvcm91dGUta2luZFwiO1xuaW1wb3J0IHsgaG9pc3QgfSBmcm9tIFwibmV4dC9kaXN0L2J1aWxkL3RlbXBsYXRlcy9oZWxwZXJzXCI7XG4vLyBJbXBvcnQgdGhlIHVzZXJsYW5kIGNvZGUuXG5pbXBvcnQgKiBhcyB1c2VybGFuZCBmcm9tIFwiLi9wYWdlc1xcXFxhcGlcXFxcY29udmVyc2F0aW9uc1xcXFxpbmRleC5qc1wiO1xuLy8gUmUtZXhwb3J0IHRoZSBoYW5kbGVyIChzaG91bGQgYmUgdGhlIGRlZmF1bHQgZXhwb3J0KS5cbmV4cG9ydCBkZWZhdWx0IGhvaXN0KHVzZXJsYW5kLCAnZGVmYXVsdCcpO1xuLy8gUmUtZXhwb3J0IGNvbmZpZy5cbmV4cG9ydCBjb25zdCBjb25maWcgPSBob2lzdCh1c2VybGFuZCwgJ2NvbmZpZycpO1xuLy8gQ3JlYXRlIGFuZCBleHBvcnQgdGhlIHJvdXRlIG1vZHVsZSB0aGF0IHdpbGwgYmUgY29uc3VtZWQuXG5leHBvcnQgY29uc3Qgcm91dGVNb2R1bGUgPSBuZXcgUGFnZXNBUElSb3V0ZU1vZHVsZSh7XG4gICAgZGVmaW5pdGlvbjoge1xuICAgICAgICBraW5kOiBSb3V0ZUtpbmQuUEFHRVNfQVBJLFxuICAgICAgICBwYWdlOiBcIi9hcGkvY29udmVyc2F0aW9uc1wiLFxuICAgICAgICBwYXRobmFtZTogXCIvYXBpL2NvbnZlcnNhdGlvbnNcIixcbiAgICAgICAgLy8gVGhlIGZvbGxvd2luZyBhcmVuJ3QgdXNlZCBpbiBwcm9kdWN0aW9uLlxuICAgICAgICBidW5kbGVQYXRoOiAnJyxcbiAgICAgICAgZmlsZW5hbWU6ICcnXG4gICAgfSxcbiAgICB1c2VybGFuZFxufSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBhZ2VzLWFwaS5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fconversations&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cconversations%5Cindex.js&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "(api-node)/./pages/api/conversations/index.js":
/*!******************************************!*\
  !*** ./pages/api/conversations/index.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var _lib_services_pinata_conversation_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/services/pinata-conversation-service */ \"(api-node)/./lib/services/pinata-conversation-service.js\");\n/**\r\n * API handler for conversations collection endpoints\r\n * Supports GET (list) and POST (create) methods\r\n */ \nasync function handler(req, res) {\n    try {\n        // Extract userId directly from query or body instead of session\n        const userId = req.query.userId || req.body?.userId;\n        if (!userId) {\n            console.error('No user ID found in request');\n            return res.status(401).json({\n                error: 'User ID is required'\n            });\n        }\n        if (req.method === 'GET') {\n            try {\n                const conversations = await _lib_services_pinata_conversation_service__WEBPACK_IMPORTED_MODULE_0__.pinataConversationService.getUserConversations(userId);\n                return res.status(200).json(conversations || []);\n            } catch (error) {\n                console.error('Error retrieving conversations:', error);\n                return res.status(500).json({\n                    error: 'Failed to retrieve conversations'\n                });\n            }\n        } else if (req.method === 'POST') {\n            try {\n                const { title = 'New Conversation', messages = [] } = req.body;\n                const newConversation = await _lib_services_pinata_conversation_service__WEBPACK_IMPORTED_MODULE_0__.pinataConversationService.createConversation(userId, title, messages);\n                return res.status(201).json(newConversation);\n            } catch (error) {\n                console.error('Error creating conversation:', error);\n                return res.status(500).json({\n                    error: 'Failed to create conversation'\n                });\n            }\n        } else if (req.method === 'DELETE') {\n            try {\n                const success = await _lib_services_pinata_conversation_service__WEBPACK_IMPORTED_MODULE_0__.pinataConversationService.deleteAllUserConversations(userId);\n                return res.status(200).json({\n                    message: success ? 'Successfully deleted all conversations' : 'Some conversations could not be deleted',\n                    success\n                });\n            } catch (error) {\n                console.error('Error deleting all conversations:', error);\n                return res.status(500).json({\n                    error: 'Failed to delete conversations'\n                });\n            }\n        } else {\n            return res.status(405).json({\n                error: 'Method not allowed'\n            });\n        }\n    } catch (error) {\n        console.error('Unexpected error in conversations API:', error);\n        return res.status(500).json({\n            error: 'Internal server error'\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaS1ub2RlKS8uL3BhZ2VzL2FwaS9jb252ZXJzYXRpb25zL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7OztDQUdDLEdBQzZGO0FBRS9FLGVBQWVDLFFBQVFDLEdBQUcsRUFBRUMsR0FBRztJQUM1QyxJQUFJO1FBQ0YsZ0VBQWdFO1FBQ2hFLE1BQU1DLFNBQVNGLElBQUlHLEtBQUssQ0FBQ0QsTUFBTSxJQUFJRixJQUFJSSxJQUFJLEVBQUVGO1FBRTdDLElBQUksQ0FBQ0EsUUFBUTtZQUNYRyxRQUFRQyxLQUFLLENBQUM7WUFDZCxPQUFPTCxJQUFJTSxNQUFNLENBQUMsS0FBS0MsSUFBSSxDQUFDO2dCQUFFRixPQUFPO1lBQXNCO1FBQzdEO1FBRUEsSUFBSU4sSUFBSVMsTUFBTSxLQUFLLE9BQU87WUFDeEIsSUFBSTtnQkFDRixNQUFNQyxnQkFBZ0IsTUFBTVosZ0dBQXlCQSxDQUFDYSxvQkFBb0IsQ0FBQ1Q7Z0JBQzNFLE9BQU9ELElBQUlNLE1BQU0sQ0FBQyxLQUFLQyxJQUFJLENBQUNFLGlCQUFpQixFQUFFO1lBQ2pELEVBQUUsT0FBT0osT0FBTztnQkFDZEQsUUFBUUMsS0FBSyxDQUFDLG1DQUFtQ0E7Z0JBQ2pELE9BQU9MLElBQUlNLE1BQU0sQ0FBQyxLQUFLQyxJQUFJLENBQUM7b0JBQUVGLE9BQU87Z0JBQW1DO1lBQzFFO1FBQ0YsT0FBTyxJQUFJTixJQUFJUyxNQUFNLEtBQUssUUFBUTtZQUNoQyxJQUFJO2dCQUNGLE1BQU0sRUFBRUcsUUFBUSxrQkFBa0IsRUFBRUMsV0FBVyxFQUFFLEVBQUUsR0FBR2IsSUFBSUksSUFBSTtnQkFFOUQsTUFBTVUsa0JBQWtCLE1BQU1oQixnR0FBeUJBLENBQUNpQixrQkFBa0IsQ0FBQ2IsUUFBUVUsT0FBT0M7Z0JBQzFGLE9BQU9aLElBQUlNLE1BQU0sQ0FBQyxLQUFLQyxJQUFJLENBQUNNO1lBQzlCLEVBQUUsT0FBT1IsT0FBTztnQkFDZEQsUUFBUUMsS0FBSyxDQUFDLGdDQUFnQ0E7Z0JBQzlDLE9BQU9MLElBQUlNLE1BQU0sQ0FBQyxLQUFLQyxJQUFJLENBQUM7b0JBQUVGLE9BQU87Z0JBQWdDO1lBQ3ZFO1FBQ0YsT0FBTyxJQUFJTixJQUFJUyxNQUFNLEtBQUssVUFBVTtZQUNsQyxJQUFJO2dCQUNGLE1BQU1PLFVBQVUsTUFBTWxCLGdHQUF5QkEsQ0FBQ21CLDBCQUEwQixDQUFDZjtnQkFDM0UsT0FBT0QsSUFBSU0sTUFBTSxDQUFDLEtBQUtDLElBQUksQ0FBQztvQkFDMUJVLFNBQVNGLFVBQVUsMkNBQTJDO29CQUM5REE7Z0JBQ0Y7WUFDRixFQUFFLE9BQU9WLE9BQU87Z0JBQ2RELFFBQVFDLEtBQUssQ0FBQyxxQ0FBcUNBO2dCQUNuRCxPQUFPTCxJQUFJTSxNQUFNLENBQUMsS0FBS0MsSUFBSSxDQUFDO29CQUFFRixPQUFPO2dCQUFpQztZQUN4RTtRQUNGLE9BQU87WUFDTCxPQUFPTCxJQUFJTSxNQUFNLENBQUMsS0FBS0MsSUFBSSxDQUFDO2dCQUFFRixPQUFPO1lBQXFCO1FBQzVEO0lBQ0YsRUFBRSxPQUFPQSxPQUFPO1FBQ2RELFFBQVFDLEtBQUssQ0FBQywwQ0FBMENBO1FBQ3hELE9BQU9MLElBQUlNLE1BQU0sQ0FBQyxLQUFLQyxJQUFJLENBQUM7WUFBRUYsT0FBTztRQUF3QjtJQUMvRDtBQUNGIiwic291cmNlcyI6WyJEOlxcUHJvamVjdHNcXERla2h0ZSBoYWlcXG5ldXJvU3luY1xcTmV1cm9TeW5jLUFJLUZyb250ZW5kXFxwYWdlc1xcYXBpXFxjb252ZXJzYXRpb25zXFxpbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogQVBJIGhhbmRsZXIgZm9yIGNvbnZlcnNhdGlvbnMgY29sbGVjdGlvbiBlbmRwb2ludHNcclxuICogU3VwcG9ydHMgR0VUIChsaXN0KSBhbmQgUE9TVCAoY3JlYXRlKSBtZXRob2RzXHJcbiAqL1xyXG5pbXBvcnQgeyBwaW5hdGFDb252ZXJzYXRpb25TZXJ2aWNlIH0gZnJvbSAnLi4vLi4vLi4vbGliL3NlcnZpY2VzL3BpbmF0YS1jb252ZXJzYXRpb24tc2VydmljZSc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBhc3luYyBmdW5jdGlvbiBoYW5kbGVyKHJlcSwgcmVzKSB7XHJcbiAgdHJ5IHtcclxuICAgIC8vIEV4dHJhY3QgdXNlcklkIGRpcmVjdGx5IGZyb20gcXVlcnkgb3IgYm9keSBpbnN0ZWFkIG9mIHNlc3Npb25cclxuICAgIGNvbnN0IHVzZXJJZCA9IHJlcS5xdWVyeS51c2VySWQgfHwgcmVxLmJvZHk/LnVzZXJJZDtcclxuXHJcbiAgICBpZiAoIXVzZXJJZCkge1xyXG4gICAgICBjb25zb2xlLmVycm9yKCdObyB1c2VyIElEIGZvdW5kIGluIHJlcXVlc3QnKTtcclxuICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAxKS5qc29uKHsgZXJyb3I6ICdVc2VyIElEIGlzIHJlcXVpcmVkJyB9KTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAocmVxLm1ldGhvZCA9PT0gJ0dFVCcpIHtcclxuICAgICAgdHJ5IHtcclxuICAgICAgICBjb25zdCBjb252ZXJzYXRpb25zID0gYXdhaXQgcGluYXRhQ29udmVyc2F0aW9uU2VydmljZS5nZXRVc2VyQ29udmVyc2F0aW9ucyh1c2VySWQpO1xyXG4gICAgICAgIHJldHVybiByZXMuc3RhdHVzKDIwMCkuanNvbihjb252ZXJzYXRpb25zIHx8IFtdKTtcclxuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKCdFcnJvciByZXRyaWV2aW5nIGNvbnZlcnNhdGlvbnM6JywgZXJyb3IpO1xyXG4gICAgICAgIHJldHVybiByZXMuc3RhdHVzKDUwMCkuanNvbih7IGVycm9yOiAnRmFpbGVkIHRvIHJldHJpZXZlIGNvbnZlcnNhdGlvbnMnIH0pO1xyXG4gICAgICB9XHJcbiAgICB9IGVsc2UgaWYgKHJlcS5tZXRob2QgPT09ICdQT1NUJykge1xyXG4gICAgICB0cnkge1xyXG4gICAgICAgIGNvbnN0IHsgdGl0bGUgPSAnTmV3IENvbnZlcnNhdGlvbicsIG1lc3NhZ2VzID0gW10gfSA9IHJlcS5ib2R5O1xyXG4gICAgICAgIFxyXG4gICAgICAgIGNvbnN0IG5ld0NvbnZlcnNhdGlvbiA9IGF3YWl0IHBpbmF0YUNvbnZlcnNhdGlvblNlcnZpY2UuY3JlYXRlQ29udmVyc2F0aW9uKHVzZXJJZCwgdGl0bGUsIG1lc3NhZ2VzKTtcclxuICAgICAgICByZXR1cm4gcmVzLnN0YXR1cygyMDEpLmpzb24obmV3Q29udmVyc2F0aW9uKTtcclxuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBjcmVhdGluZyBjb252ZXJzYXRpb246JywgZXJyb3IpO1xyXG4gICAgICAgIHJldHVybiByZXMuc3RhdHVzKDUwMCkuanNvbih7IGVycm9yOiAnRmFpbGVkIHRvIGNyZWF0ZSBjb252ZXJzYXRpb24nIH0pO1xyXG4gICAgICB9XHJcbiAgICB9IGVsc2UgaWYgKHJlcS5tZXRob2QgPT09ICdERUxFVEUnKSB7XHJcbiAgICAgIHRyeSB7XHJcbiAgICAgICAgY29uc3Qgc3VjY2VzcyA9IGF3YWl0IHBpbmF0YUNvbnZlcnNhdGlvblNlcnZpY2UuZGVsZXRlQWxsVXNlckNvbnZlcnNhdGlvbnModXNlcklkKTtcclxuICAgICAgICByZXR1cm4gcmVzLnN0YXR1cygyMDApLmpzb24oeyBcclxuICAgICAgICAgIG1lc3NhZ2U6IHN1Y2Nlc3MgPyAnU3VjY2Vzc2Z1bGx5IGRlbGV0ZWQgYWxsIGNvbnZlcnNhdGlvbnMnIDogJ1NvbWUgY29udmVyc2F0aW9ucyBjb3VsZCBub3QgYmUgZGVsZXRlZCcsXHJcbiAgICAgICAgICBzdWNjZXNzIFxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGRlbGV0aW5nIGFsbCBjb252ZXJzYXRpb25zOicsIGVycm9yKTtcclxuICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg1MDApLmpzb24oeyBlcnJvcjogJ0ZhaWxlZCB0byBkZWxldGUgY29udmVyc2F0aW9ucycgfSk7XHJcbiAgICAgIH1cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwNSkuanNvbih7IGVycm9yOiAnTWV0aG9kIG5vdCBhbGxvd2VkJyB9KTtcclxuICAgIH1cclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgY29uc29sZS5lcnJvcignVW5leHBlY3RlZCBlcnJvciBpbiBjb252ZXJzYXRpb25zIEFQSTonLCBlcnJvcik7XHJcbiAgICByZXR1cm4gcmVzLnN0YXR1cyg1MDApLmpzb24oeyBlcnJvcjogJ0ludGVybmFsIHNlcnZlciBlcnJvcicgfSk7XHJcbiAgfVxyXG59ICJdLCJuYW1lcyI6WyJwaW5hdGFDb252ZXJzYXRpb25TZXJ2aWNlIiwiaGFuZGxlciIsInJlcSIsInJlcyIsInVzZXJJZCIsInF1ZXJ5IiwiYm9keSIsImNvbnNvbGUiLCJlcnJvciIsInN0YXR1cyIsImpzb24iLCJtZXRob2QiLCJjb252ZXJzYXRpb25zIiwiZ2V0VXNlckNvbnZlcnNhdGlvbnMiLCJ0aXRsZSIsIm1lc3NhZ2VzIiwibmV3Q29udmVyc2F0aW9uIiwiY3JlYXRlQ29udmVyc2F0aW9uIiwic3VjY2VzcyIsImRlbGV0ZUFsbFVzZXJDb252ZXJzYXRpb25zIiwibWVzc2FnZSJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api-node)/./pages/api/conversations/index.js\n");

/***/ }),

/***/ "axios?6fac":
/*!************************!*\
  !*** external "axios" ***!
  \************************/
/***/ ((module) => {

module.exports = require("axios");

/***/ }),

/***/ "next/dist/compiled/next-server/pages-api.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages-api.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages-api.runtime.dev.js");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fconversations&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cconversations%5Cindex.js&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();