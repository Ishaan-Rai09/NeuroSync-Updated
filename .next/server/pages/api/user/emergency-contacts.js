"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/user/emergency-contacts";
exports.ids = ["pages/api/user/emergency-contacts"];
exports.modules = {

/***/ "(api-node)/./lib/services/emergency-contacts-service.js":
/*!****************************************************!*\
  !*** ./lib/services/emergency-contacts-service.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\r\n * Service for managing emergency contacts using Pinata IPFS\r\n * All emergency contact data is stored on IPFS via Pinata instead of MongoDB\r\n */ \nconst { pinataService } = __webpack_require__(/*! ./pinata-service */ \"(api-node)/./lib/services/pinata-service.js\");\n/**\r\n * Emergency Contacts Service\r\n * Handles storing and retrieving emergency contacts from Pinata IPFS\r\n */ class EmergencyContactsService {\n    /**\r\n   * Get emergency contacts for a user\r\n   * @param {string} userId - User ID\r\n   * @returns {Promise<Array>} - Array of emergency contacts\r\n   */ async getEmergencyContacts(userId) {\n        try {\n            if (!userId) {\n                throw new Error('User ID is required');\n            }\n            // Get user pins from Pinata\n            const pins = await pinataService.getHistory(userId);\n            // Find emergency contacts pin\n            const contactsPin = pins.find((pin)=>{\n                const metadata = pin.metadata?.keyvalues;\n                return metadata?.type === 'emergency_contacts' && metadata?.userId === userId;\n            });\n            if (!contactsPin) {\n                // If no contacts exist, return empty array\n                return [];\n            }\n            // Get contacts data from Pinata\n            const contacts = await pinataService.getData(contactsPin.ipfs_pin_hash);\n            if (!contacts) {\n                throw new Error('Failed to retrieve emergency contacts from Pinata');\n            }\n            return contacts.contacts || [];\n        } catch (error) {\n            console.error('Error fetching emergency contacts from Pinata:', error);\n            // Return empty array as fallback\n            return [];\n        }\n    }\n    /**\r\n   * Update emergency contacts for a user\r\n   * @param {string} userId - User ID\r\n   * @param {Array} contacts - Array of emergency contact objects\r\n   * @returns {Promise<Object>} - Result of the operation\r\n   */ async updateEmergencyContacts(userId, contacts) {\n        try {\n            if (!userId) {\n                throw new Error('User ID is required');\n            }\n            if (!contacts || !Array.isArray(contacts)) {\n                throw new Error('Contacts must be an array');\n            }\n            // Sanitize and validate contacts\n            const sanitizedContacts = contacts.map((contact)=>({\n                    id: contact.id || Date.now().toString(),\n                    name: contact.name?.trim(),\n                    relationship: contact.relationship?.trim() || '',\n                    phone: contact.phone?.trim(),\n                    isWhatsApp: contact.isWhatsApp !== false // Default to true if not specified\n                })).filter((contact)=>contact.name && contact.phone);\n            // Get user pins from Pinata\n            const pins = await pinataService.getHistory(userId);\n            // Find emergency contacts pin\n            const contactsPin = pins.find((pin)=>{\n                const metadata = pin.metadata?.keyvalues;\n                return metadata?.type === 'emergency_contacts' && metadata?.userId === userId;\n            });\n            // Prepare data for storage\n            const contactsData = {\n                userId,\n                contacts: sanitizedContacts,\n                updatedAt: new Date(),\n                type: 'emergency_contacts'\n            };\n            // Store contacts to Pinata\n            const response = await pinataService.storeData(`emergency_contacts_${userId}`, contactsData, {\n                userId,\n                type: 'emergency_contacts'\n            });\n            // If we had a previous pin, remove it\n            if (contactsPin) {\n                await pinataService.removeData(contactsPin.ipfs_pin_hash);\n            }\n            return {\n                success: true,\n                contacts: sanitizedContacts,\n                ipfsHash: response.IpfsHash\n            };\n        } catch (error) {\n            console.error('Error updating emergency contacts on Pinata:', error);\n            throw error;\n        }\n    }\n}\nconst emergencyContactsService = new EmergencyContactsService();\nmodule.exports = {\n    emergencyContactsService\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api-node)/./lib/services/emergency-contacts-service.js\n");

/***/ }),

/***/ "(api-node)/./lib/services/pinata-service.js":
/*!****************************************!*\
  !*** ./lib/services/pinata-service.js ***!
  \****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst axios = __webpack_require__(/*! axios */ \"axios?6fac\");\n/**\r\n * Pinata IPFS Service\r\n * Handles storing and retrieving data from Pinata IPFS\r\n */ class PinataService {\n    constructor(){\n        this.apiKey = process.env.PINATA_API_KEY;\n        this.apiSecret = process.env.PINATA_API_SECRET;\n        this.jwt = process.env.PINATA_JWT;\n        this.apiUrl = 'https://api.pinata.cloud';\n        this.gateway = 'https://gateway.pinata.cloud/ipfs/';\n    }\n    /**\r\n   * Check if the Pinata credentials are configured\r\n   */ isConfigured() {\n        return !!(this.jwt || this.apiKey && this.apiSecret);\n    }\n    /**\r\n   * Get the headers for Pinata API requests\r\n   */ getHeaders() {\n        if (this.jwt) {\n            return {\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${this.jwt}`\n            };\n        } else if (this.apiKey && this.apiSecret) {\n            return {\n                'Content-Type': 'application/json',\n                'pinata_api_key': this.apiKey,\n                'pinata_secret_api_key': this.apiSecret\n            };\n        } else {\n            throw new Error('Pinata credentials not configured');\n        }\n    }\n    /**\r\n   * Store data on Pinata IPFS\r\n   * @param {string} keyName - Unique key for the data\r\n   * @param {object} data - Data to store\r\n   * @param {object} metadata - Optional metadata for the pin\r\n   * @returns {Promise<object>} - Response from Pinata\r\n   */ async storeData(keyName, data, metadata = {}) {\n        try {\n            if (!this.isConfigured()) {\n                throw new Error('Pinata credentials not configured');\n            }\n            // Generate a unique identifier for the transaction\n            const uniqueId = `${keyName}_${Date.now()}`;\n            // Prepare the data for Pinata\n            const pinataBody = {\n                pinataContent: data,\n                pinataMetadata: {\n                    name: uniqueId,\n                    keyvalues: {\n                        userId: data.userId || 'anonymous',\n                        type: data.type || 'conversation',\n                        timestamp: Date.now(),\n                        ...metadata\n                    }\n                }\n            };\n            // Upload to Pinata\n            const response = await axios.post(`${this.apiUrl}/pinning/pinJSONToIPFS`, pinataBody, {\n                headers: this.getHeaders()\n            });\n            return response.data;\n        } catch (error) {\n            console.error('Failed to store data on Pinata:', error?.response?.data || error?.message || error);\n            throw error;\n        }\n    }\n    /**\r\n   * Get data from Pinata IPFS\r\n   * @param {string} ipfsHash - IPFS hash to retrieve\r\n   * @returns {Promise<object>} - Retrieved data\r\n   */ async getData(ipfsHash) {\n        try {\n            if (!ipfsHash) {\n                throw new Error('IPFS hash is required');\n            }\n            // Fetch data from Pinata Gateway\n            const response = await axios.get(`${this.gateway}${ipfsHash}`);\n            return response.data;\n        } catch (error) {\n            console.error(`Failed to get data from Pinata (${ipfsHash}):`, error?.message || error);\n            return null;\n        }\n    }\n    /**\r\n   * Get history of pins for a user\r\n   * @param {string} userId - User ID to get history for\r\n   * @returns {Promise<Array>} - Array of pins\r\n   */ async getHistory(userId) {\n        try {\n            if (!this.isConfigured()) {\n                throw new Error('Pinata credentials not configured');\n            }\n            if (!userId) {\n                return [];\n            }\n            // Query Pinata for pins with the user's ID\n            const response = await axios.get(`${this.apiUrl}/data/pinList?metadata[keyvalues][userId]={\"value\":\"${userId}\",\"op\":\"eq\"}&status=pinned`, {\n                headers: this.getHeaders()\n            });\n            return response.data.rows || [];\n        } catch (error) {\n            console.error(`Failed to get history from Pinata for user ${userId}:`, error?.response?.data || error?.message || error);\n            return [];\n        }\n    }\n    /**\r\n   * Remove data from Pinata IPFS\r\n   * @param {string} ipfsHash - IPFS hash to remove\r\n   * @returns {Promise<object>} - Response from Pinata\r\n   */ async removeData(ipfsHash) {\n        try {\n            if (!this.isConfigured()) {\n                throw new Error('Pinata credentials not configured');\n            }\n            if (!ipfsHash) {\n                throw new Error('IPFS hash is required');\n            }\n            // Unpin from Pinata\n            const response = await axios.delete(`${this.apiUrl}/pinning/unpin/${ipfsHash}`, {\n                headers: this.getHeaders()\n            });\n            return {\n                success: true,\n                data: response.data\n            };\n        } catch (error) {\n            console.error(`Failed to remove data from Pinata (${ipfsHash}):`, error?.response?.data || error?.message || error);\n            // Handle common Pinata error cases: \n            // 1. 404 - Pin doesn't exist\n            // 2. 400 with \"CURRENT_USER_HAS_NOT_PINNED_CID\" - User doesn't have permission to unpin\n            if (error?.response?.status === 404 || error?.response?.status === 400 && error?.response?.data?.error?.reason === 'CURRENT_USER_HAS_NOT_PINNED_CID') {\n                console.log(`Pin ${ipfsHash} not found or not owned by current user. Considering it removed.`);\n                return {\n                    success: true,\n                    message: 'Pin not found or not owned by current user'\n                };\n            }\n            throw error;\n        }\n    }\n    /**\r\n   * Test the Pinata connection\r\n   * @returns {Promise<boolean>} - Whether the connection was successful\r\n   */ async testConnection() {\n        try {\n            if (!this.isConfigured()) {\n                return false;\n            }\n            // Test the connection by getting the pin count\n            await axios.get(`${this.apiUrl}/data/userPinnedDataTotal`, {\n                headers: this.getHeaders()\n            });\n            return true;\n        } catch (error) {\n            console.error('Pinata connection test failed:', error?.response?.data || error?.message || error);\n            return false;\n        }\n    }\n    /**\r\n   * Get all pins from Pinata regardless of user ID\r\n   * @returns {Promise<Array>} - Array of pins\r\n   */ async getAllPins() {\n        try {\n            if (!this.isConfigured()) {\n                throw new Error('Pinata credentials not configured');\n            }\n            // Query Pinata for all pins\n            const response = await axios.get(`${this.apiUrl}/data/pinList?status=pinned`, {\n                headers: this.getHeaders()\n            });\n            return response.data.rows || [];\n        } catch (error) {\n            console.error(`Failed to get all pins from Pinata:`, error?.response?.data || error?.message || error);\n            return [];\n        }\n    }\n}\nconst pinataService = new PinataService();\nmodule.exports = {\n    pinataService\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api-node)/./lib/services/pinata-service.js\n");

/***/ }),

/***/ "(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fuser%2Femergency-contacts&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cuser%5Cemergency-contacts.js&middlewareConfigBase64=e30%3D!":
/*!********************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fuser%2Femergency-contacts&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cuser%5Cemergency-contacts.js&middlewareConfigBase64=e30%3D! ***!
  \********************************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   routeModule: () => (/* binding */ routeModule)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/route-modules/pages-api/module.compiled */ \"(api-node)/./node_modules/next/dist/server/route-modules/pages-api/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(api-node)/./node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"(api-node)/./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var _pages_api_user_emergency_contacts_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./pages\\api\\user\\emergency-contacts.js */ \"(api-node)/./pages/api/user/emergency-contacts.js\");\n\n\n\n// Import the userland code.\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_user_emergency_contacts_js__WEBPACK_IMPORTED_MODULE_3__, 'default'));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_user_emergency_contacts_js__WEBPACK_IMPORTED_MODULE_3__, 'config');\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: \"/api/user/emergency-contacts\",\n        pathname: \"/api/user/emergency-contacts\",\n        // The following aren't used in production.\n        bundlePath: '',\n        filename: ''\n    },\n    userland: _pages_api_user_emergency_contacts_js__WEBPACK_IMPORTED_MODULE_3__\n});\n\n//# sourceMappingURL=pages-api.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaS1ub2RlKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYnVpbGQvd2VicGFjay9sb2FkZXJzL25leHQtcm91dGUtbG9hZGVyL2luZGV4LmpzP2tpbmQ9UEFHRVNfQVBJJnBhZ2U9JTJGYXBpJTJGdXNlciUyRmVtZXJnZW5jeS1jb250YWN0cyZwcmVmZXJyZWRSZWdpb249JmFic29sdXRlUGFnZVBhdGg9LiUyRnBhZ2VzJTVDYXBpJTVDdXNlciU1Q2VtZXJnZW5jeS1jb250YWN0cy5qcyZtaWRkbGV3YXJlQ29uZmlnQmFzZTY0PWUzMCUzRCEiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBK0Y7QUFDdkM7QUFDRTtBQUMxRDtBQUNzRTtBQUN0RTtBQUNBLGlFQUFlLHdFQUFLLENBQUMsa0VBQVEsWUFBWSxFQUFDO0FBQzFDO0FBQ08sZUFBZSx3RUFBSyxDQUFDLGtFQUFRO0FBQ3BDO0FBQ08sd0JBQXdCLHlHQUFtQjtBQUNsRDtBQUNBLGNBQWMsa0VBQVM7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxZQUFZO0FBQ1osQ0FBQzs7QUFFRCIsInNvdXJjZXMiOlsiIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBhZ2VzQVBJUm91dGVNb2R1bGUgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9yb3V0ZS1tb2R1bGVzL3BhZ2VzLWFwaS9tb2R1bGUuY29tcGlsZWRcIjtcbmltcG9ydCB7IFJvdXRlS2luZCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL3JvdXRlLWtpbmRcIjtcbmltcG9ydCB7IGhvaXN0IH0gZnJvbSBcIm5leHQvZGlzdC9idWlsZC90ZW1wbGF0ZXMvaGVscGVyc1wiO1xuLy8gSW1wb3J0IHRoZSB1c2VybGFuZCBjb2RlLlxuaW1wb3J0ICogYXMgdXNlcmxhbmQgZnJvbSBcIi4vcGFnZXNcXFxcYXBpXFxcXHVzZXJcXFxcZW1lcmdlbmN5LWNvbnRhY3RzLmpzXCI7XG4vLyBSZS1leHBvcnQgdGhlIGhhbmRsZXIgKHNob3VsZCBiZSB0aGUgZGVmYXVsdCBleHBvcnQpLlxuZXhwb3J0IGRlZmF1bHQgaG9pc3QodXNlcmxhbmQsICdkZWZhdWx0Jyk7XG4vLyBSZS1leHBvcnQgY29uZmlnLlxuZXhwb3J0IGNvbnN0IGNvbmZpZyA9IGhvaXN0KHVzZXJsYW5kLCAnY29uZmlnJyk7XG4vLyBDcmVhdGUgYW5kIGV4cG9ydCB0aGUgcm91dGUgbW9kdWxlIHRoYXQgd2lsbCBiZSBjb25zdW1lZC5cbmV4cG9ydCBjb25zdCByb3V0ZU1vZHVsZSA9IG5ldyBQYWdlc0FQSVJvdXRlTW9kdWxlKHtcbiAgICBkZWZpbml0aW9uOiB7XG4gICAgICAgIGtpbmQ6IFJvdXRlS2luZC5QQUdFU19BUEksXG4gICAgICAgIHBhZ2U6IFwiL2FwaS91c2VyL2VtZXJnZW5jeS1jb250YWN0c1wiLFxuICAgICAgICBwYXRobmFtZTogXCIvYXBpL3VzZXIvZW1lcmdlbmN5LWNvbnRhY3RzXCIsXG4gICAgICAgIC8vIFRoZSBmb2xsb3dpbmcgYXJlbid0IHVzZWQgaW4gcHJvZHVjdGlvbi5cbiAgICAgICAgYnVuZGxlUGF0aDogJycsXG4gICAgICAgIGZpbGVuYW1lOiAnJ1xuICAgIH0sXG4gICAgdXNlcmxhbmRcbn0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1wYWdlcy1hcGkuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fuser%2Femergency-contacts&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cuser%5Cemergency-contacts.js&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "(api-node)/./pages/api/user/emergency-contacts.js":
/*!**********************************************!*\
  !*** ./pages/api/user/emergency-contacts.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var _lib_services_emergency_contacts_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/services/emergency-contacts-service */ \"(api-node)/./lib/services/emergency-contacts-service.js\");\n/* harmony import */ var _lib_services_emergency_contacts_service__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_lib_services_emergency_contacts_service__WEBPACK_IMPORTED_MODULE_0__);\n/**\r\n * API endpoint for managing emergency contacts\r\n * \r\n * GET: Fetch the user's emergency contacts\r\n * POST: Save/update the user's emergency contacts\r\n */ \n/**\r\n * @description API handler for emergency contacts\r\n * @route GET /api/user/emergency-contacts - Retrieve user's emergency contacts\r\n * @route POST /api/user/emergency-contacts - Update user's emergency contacts\r\n */ async function handler(req, res) {\n    // Get the user ID from the request\n    // The client sends user ID either in query params (GET) or request body (POST)\n    const userId = req.query.userId || req.body?.userId;\n    if (!userId) {\n        return res.status(401).json({\n            success: false,\n            error: 'User ID is required'\n        });\n    }\n    try {\n        if (req.method === 'GET') {\n            // Retrieve emergency contacts using Pinata service\n            const contacts = await _lib_services_emergency_contacts_service__WEBPACK_IMPORTED_MODULE_0__.emergencyContactsService.getEmergencyContacts(userId);\n            return res.status(200).json({\n                success: true,\n                contacts\n            });\n        } else if (req.method === 'POST') {\n            // Validate request body\n            if (!req.body.contacts || !Array.isArray(req.body.contacts)) {\n                return res.status(400).json({\n                    success: false,\n                    error: 'Invalid request body'\n                });\n            }\n            // Update emergency contacts using Pinata service\n            const result = await _lib_services_emergency_contacts_service__WEBPACK_IMPORTED_MODULE_0__.emergencyContactsService.updateEmergencyContacts(userId, req.body.contacts);\n            return res.status(200).json({\n                success: true,\n                message: 'Emergency contacts updated successfully',\n                contacts: result.contacts\n            });\n        }\n        // Method not allowed\n        return res.status(405).json({\n            success: false,\n            error: 'Method not allowed'\n        });\n    } catch (error) {\n        console.error('Error handling emergency contacts:', error);\n        return res.status(500).json({\n            success: false,\n            error: 'Server error'\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaS1ub2RlKS8uL3BhZ2VzL2FwaS91c2VyL2VtZXJnZW5jeS1jb250YWN0cy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTs7Ozs7Q0FLQyxHQUUyRjtBQUU1Rjs7OztDQUlDLEdBQ2MsZUFBZUMsUUFBUUMsR0FBRyxFQUFFQyxHQUFHO0lBQzVDLG1DQUFtQztJQUNuQywrRUFBK0U7SUFDL0UsTUFBTUMsU0FBU0YsSUFBSUcsS0FBSyxDQUFDRCxNQUFNLElBQUlGLElBQUlJLElBQUksRUFBRUY7SUFFN0MsSUFBSSxDQUFDQSxRQUFRO1FBQ1gsT0FBT0QsSUFBSUksTUFBTSxDQUFDLEtBQUtDLElBQUksQ0FBQztZQUMxQkMsU0FBUztZQUNUQyxPQUFPO1FBQ1Q7SUFDRjtJQUVBLElBQUk7UUFDRixJQUFJUixJQUFJUyxNQUFNLEtBQUssT0FBTztZQUN4QixtREFBbUQ7WUFDbkQsTUFBTUMsV0FBVyxNQUFNWiw4RkFBd0JBLENBQUNhLG9CQUFvQixDQUFDVDtZQUVyRSxPQUFPRCxJQUFJSSxNQUFNLENBQUMsS0FBS0MsSUFBSSxDQUFDO2dCQUMxQkMsU0FBUztnQkFDVEc7WUFDRjtRQUNGLE9BRUssSUFBSVYsSUFBSVMsTUFBTSxLQUFLLFFBQVE7WUFDOUIsd0JBQXdCO1lBQ3hCLElBQUksQ0FBQ1QsSUFBSUksSUFBSSxDQUFDTSxRQUFRLElBQUksQ0FBQ0UsTUFBTUMsT0FBTyxDQUFDYixJQUFJSSxJQUFJLENBQUNNLFFBQVEsR0FBRztnQkFDM0QsT0FBT1QsSUFBSUksTUFBTSxDQUFDLEtBQUtDLElBQUksQ0FBQztvQkFDMUJDLFNBQVM7b0JBQ1RDLE9BQU87Z0JBQ1Q7WUFDRjtZQUVBLGlEQUFpRDtZQUNqRCxNQUFNTSxTQUFTLE1BQU1oQiw4RkFBd0JBLENBQUNpQix1QkFBdUIsQ0FDbkViLFFBQ0FGLElBQUlJLElBQUksQ0FBQ00sUUFBUTtZQUduQixPQUFPVCxJQUFJSSxNQUFNLENBQUMsS0FBS0MsSUFBSSxDQUFDO2dCQUMxQkMsU0FBUztnQkFDVFMsU0FBUztnQkFDVE4sVUFBVUksT0FBT0osUUFBUTtZQUMzQjtRQUNGO1FBRUEscUJBQXFCO1FBQ3JCLE9BQU9ULElBQUlJLE1BQU0sQ0FBQyxLQUFLQyxJQUFJLENBQUM7WUFDMUJDLFNBQVM7WUFDVEMsT0FBTztRQUNUO0lBQ0YsRUFBRSxPQUFPQSxPQUFPO1FBQ2RTLFFBQVFULEtBQUssQ0FBQyxzQ0FBc0NBO1FBQ3BELE9BQU9QLElBQUlJLE1BQU0sQ0FBQyxLQUFLQyxJQUFJLENBQUM7WUFDMUJDLFNBQVM7WUFDVEMsT0FBTztRQUNUO0lBQ0Y7QUFDRiIsInNvdXJjZXMiOlsiRDpcXFByb2plY3RzXFxEZWtodGUgaGFpXFxuZXVyb1N5bmNcXE5ldXJvU3luYy1BSS1Gcm9udGVuZFxccGFnZXNcXGFwaVxcdXNlclxcZW1lcmdlbmN5LWNvbnRhY3RzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBBUEkgZW5kcG9pbnQgZm9yIG1hbmFnaW5nIGVtZXJnZW5jeSBjb250YWN0c1xyXG4gKiBcclxuICogR0VUOiBGZXRjaCB0aGUgdXNlcidzIGVtZXJnZW5jeSBjb250YWN0c1xyXG4gKiBQT1NUOiBTYXZlL3VwZGF0ZSB0aGUgdXNlcidzIGVtZXJnZW5jeSBjb250YWN0c1xyXG4gKi9cclxuXHJcbmltcG9ydCB7IGVtZXJnZW5jeUNvbnRhY3RzU2VydmljZSB9IGZyb20gJy4uLy4uLy4uL2xpYi9zZXJ2aWNlcy9lbWVyZ2VuY3ktY29udGFjdHMtc2VydmljZSc7XHJcblxyXG4vKipcclxuICogQGRlc2NyaXB0aW9uIEFQSSBoYW5kbGVyIGZvciBlbWVyZ2VuY3kgY29udGFjdHNcclxuICogQHJvdXRlIEdFVCAvYXBpL3VzZXIvZW1lcmdlbmN5LWNvbnRhY3RzIC0gUmV0cmlldmUgdXNlcidzIGVtZXJnZW5jeSBjb250YWN0c1xyXG4gKiBAcm91dGUgUE9TVCAvYXBpL3VzZXIvZW1lcmdlbmN5LWNvbnRhY3RzIC0gVXBkYXRlIHVzZXIncyBlbWVyZ2VuY3kgY29udGFjdHNcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGFzeW5jIGZ1bmN0aW9uIGhhbmRsZXIocmVxLCByZXMpIHtcclxuICAvLyBHZXQgdGhlIHVzZXIgSUQgZnJvbSB0aGUgcmVxdWVzdFxyXG4gIC8vIFRoZSBjbGllbnQgc2VuZHMgdXNlciBJRCBlaXRoZXIgaW4gcXVlcnkgcGFyYW1zIChHRVQpIG9yIHJlcXVlc3QgYm9keSAoUE9TVClcclxuICBjb25zdCB1c2VySWQgPSByZXEucXVlcnkudXNlcklkIHx8IHJlcS5ib2R5Py51c2VySWQ7XHJcbiAgXHJcbiAgaWYgKCF1c2VySWQpIHtcclxuICAgIHJldHVybiByZXMuc3RhdHVzKDQwMSkuanNvbih7XHJcbiAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxyXG4gICAgICBlcnJvcjogJ1VzZXIgSUQgaXMgcmVxdWlyZWQnXHJcbiAgICB9KTtcclxuICB9XHJcbiAgXHJcbiAgdHJ5IHtcclxuICAgIGlmIChyZXEubWV0aG9kID09PSAnR0VUJykge1xyXG4gICAgICAvLyBSZXRyaWV2ZSBlbWVyZ2VuY3kgY29udGFjdHMgdXNpbmcgUGluYXRhIHNlcnZpY2VcclxuICAgICAgY29uc3QgY29udGFjdHMgPSBhd2FpdCBlbWVyZ2VuY3lDb250YWN0c1NlcnZpY2UuZ2V0RW1lcmdlbmN5Q29udGFjdHModXNlcklkKTtcclxuICAgICAgXHJcbiAgICAgIHJldHVybiByZXMuc3RhdHVzKDIwMCkuanNvbih7XHJcbiAgICAgICAgc3VjY2VzczogdHJ1ZSxcclxuICAgICAgICBjb250YWN0c1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgZWxzZSBpZiAocmVxLm1ldGhvZCA9PT0gJ1BPU1QnKSB7XHJcbiAgICAgIC8vIFZhbGlkYXRlIHJlcXVlc3QgYm9keVxyXG4gICAgICBpZiAoIXJlcS5ib2R5LmNvbnRhY3RzIHx8ICFBcnJheS5pc0FycmF5KHJlcS5ib2R5LmNvbnRhY3RzKSkge1xyXG4gICAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwMCkuanNvbih7XHJcbiAgICAgICAgICBzdWNjZXNzOiBmYWxzZSxcclxuICAgICAgICAgIGVycm9yOiAnSW52YWxpZCByZXF1ZXN0IGJvZHknXHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgIC8vIFVwZGF0ZSBlbWVyZ2VuY3kgY29udGFjdHMgdXNpbmcgUGluYXRhIHNlcnZpY2VcclxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgZW1lcmdlbmN5Q29udGFjdHNTZXJ2aWNlLnVwZGF0ZUVtZXJnZW5jeUNvbnRhY3RzKFxyXG4gICAgICAgIHVzZXJJZCxcclxuICAgICAgICByZXEuYm9keS5jb250YWN0c1xyXG4gICAgICApO1xyXG4gICAgICBcclxuICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoMjAwKS5qc29uKHtcclxuICAgICAgICBzdWNjZXNzOiB0cnVlLFxyXG4gICAgICAgIG1lc3NhZ2U6ICdFbWVyZ2VuY3kgY29udGFjdHMgdXBkYXRlZCBzdWNjZXNzZnVsbHknLFxyXG4gICAgICAgIGNvbnRhY3RzOiByZXN1bHQuY29udGFjdHNcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIC8vIE1ldGhvZCBub3QgYWxsb3dlZFxyXG4gICAgcmV0dXJuIHJlcy5zdGF0dXMoNDA1KS5qc29uKHtcclxuICAgICAgc3VjY2VzczogZmFsc2UsXHJcbiAgICAgIGVycm9yOiAnTWV0aG9kIG5vdCBhbGxvd2VkJ1xyXG4gICAgfSk7XHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGhhbmRsaW5nIGVtZXJnZW5jeSBjb250YWN0czonLCBlcnJvcik7XHJcbiAgICByZXR1cm4gcmVzLnN0YXR1cyg1MDApLmpzb24oe1xyXG4gICAgICBzdWNjZXNzOiBmYWxzZSxcclxuICAgICAgZXJyb3I6ICdTZXJ2ZXIgZXJyb3InXHJcbiAgICB9KTtcclxuICB9XHJcbn0gIl0sIm5hbWVzIjpbImVtZXJnZW5jeUNvbnRhY3RzU2VydmljZSIsImhhbmRsZXIiLCJyZXEiLCJyZXMiLCJ1c2VySWQiLCJxdWVyeSIsImJvZHkiLCJzdGF0dXMiLCJqc29uIiwic3VjY2VzcyIsImVycm9yIiwibWV0aG9kIiwiY29udGFjdHMiLCJnZXRFbWVyZ2VuY3lDb250YWN0cyIsIkFycmF5IiwiaXNBcnJheSIsInJlc3VsdCIsInVwZGF0ZUVtZXJnZW5jeUNvbnRhY3RzIiwibWVzc2FnZSIsImNvbnNvbGUiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api-node)/./pages/api/user/emergency-contacts.js\n");

/***/ }),

/***/ "axios?6fac":
/*!************************!*\
  !*** external "axios" ***!
  \************************/
/***/ ((module) => {

module.exports = require("axios");

/***/ }),

/***/ "next/dist/compiled/next-server/pages-api.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages-api.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages-api.runtime.dev.js");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fuser%2Femergency-contacts&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cuser%5Cemergency-contacts.js&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();