"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/ai/local-chat";
exports.ids = ["pages/api/ai/local-chat"];
exports.modules = {

/***/ "(api-node)/./lib/llama-service.js":
/*!******************************!*\
  !*** ./lib/llama-service.js ***!
  \******************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   llamaService: () => (/* binding */ llamaService)\n/* harmony export */ });\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! axios */ \"axios?daaa\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([axios__WEBPACK_IMPORTED_MODULE_0__]);\naxios__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n// Environment variables\nconst LLAMA_API_URL = \"http://127.0.0.1:11434\" || 0;\nconst LLAMA_MODEL = \"llama3.2:latest\" || 0;\n// Default response templates for different emotional states\nconst DEFAULT_RESPONSES = {\n    happy: \"I'm glad you're feeling positive! What's been going well for you?\",\n    sad: \"I'm sorry to hear you're feeling down. Would you like to talk about what's troubling you?\",\n    anxious: \"It sounds like you might be experiencing some anxiety. Deep breathing can sometimes help in moments like this. Would you like to try a simple breathing exercise?\",\n    angry: \"I can sense you're feeling frustrated. It's completely valid to feel this way. Would it help to talk through what's causing these feelings?\",\n    distressed: \"I'm concerned about what you're sharing. If you're having thoughts of harming yourself, please reach out to the Suicide & Crisis Lifeline: call/text 988 or chat at 988lifeline.org. Would it be helpful to talk through some immediate coping strategies?\",\n    confused: \"I understand this might be confusing. Let's break things down together. What specific aspect would you like me to clarify?\",\n    neutral: \"I'm here to support you. How can I help you today?\"\n};\n// Predefined recommendations for different emotional states\nconst QUICK_RECOMMENDATIONS = {\n    happy: [\n        {\n            type: 'activity',\n            title: 'Gratitude Journal',\n            description: \"Maintain your positive mood by writing down three things you're grateful for today.\",\n            actionUrl: '/resources/activities/gratitude',\n            actionText: 'Start Journaling'\n        },\n        {\n            type: 'resource',\n            title: 'Positive Psychology',\n            description: 'Learn techniques to maintain and enhance positive emotions.',\n            actionUrl: '/resources/articles/positive-psychology',\n            actionText: 'Read More'\n        }\n    ],\n    sad: [\n        {\n            type: 'exercise',\n            title: 'Mindful Breathing',\n            description: 'Try this 5-minute breathing exercise to help center yourself.',\n            actionUrl: '/resources/exercises/breathing',\n            actionText: 'Start Exercise'\n        },\n        {\n            type: 'resource',\n            title: 'Understanding Low Mood',\n            description: 'Learn about the causes and management of sadness.',\n            actionUrl: '/resources/articles/mood',\n            actionText: 'Read Article'\n        },\n        {\n            type: 'activity',\n            title: 'Mood Booster',\n            description: 'Simple activities that can help lift your mood.',\n            actionUrl: '/resources/activities/mood-boost',\n            actionText: 'Try Now'\n        }\n    ],\n    anxious: [\n        {\n            type: 'exercise',\n            title: '5-4-3-2-1 Grounding Technique',\n            description: 'A simple exercise to help manage anxiety in the moment.',\n            actionUrl: '/resources/exercises/grounding',\n            actionText: 'Try Now'\n        },\n        {\n            type: 'resource',\n            title: 'Understanding Anxiety',\n            description: 'Learn about the causes and effective coping strategies for anxiety.',\n            actionUrl: '/resources/articles/anxiety',\n            actionText: 'Read Article'\n        }\n    ],\n    angry: [\n        {\n            type: 'exercise',\n            title: 'Progressive Muscle Relaxation',\n            description: 'Reduce tension through progressive muscle relaxation.',\n            actionUrl: '/resources/exercises/pmr',\n            actionText: 'Start Exercise'\n        },\n        {\n            type: 'activity',\n            title: 'Physical Activity Break',\n            description: 'A short physical activity can help release tension.',\n            actionUrl: '/resources/activities/movement',\n            actionText: 'Get Moving'\n        }\n    ],\n    distressed: [\n        {\n            type: 'hotline',\n            title: 'Crisis Support',\n            description: \"If you're in crisis, contact the Suicide & Crisis Lifeline: call/text 988 or chat at 988lifeline.org.\",\n            actionUrl: 'tel:988',\n            actionText: 'Call 988'\n        },\n        {\n            type: 'exercise',\n            title: 'Urge Surfing',\n            description: 'A technique to manage overwhelming urges or thoughts.',\n            actionUrl: '/resources/exercises/urge-surfing',\n            actionText: 'Learn More'\n        }\n    ],\n    neutral: [\n        {\n            type: 'checkin',\n            title: 'Daily Mood Check-in',\n            description: 'Track your emotional patterns over time.',\n            actionUrl: '/checkin',\n            actionText: 'Check In'\n        },\n        {\n            type: 'resource',\n            title: 'Mental Wellness Basics',\n            description: 'Explore fundamental concepts of mental wellbeing.',\n            actionUrl: '/resources/articles/wellness-basics',\n            actionText: 'Read Article'\n        }\n    ]\n};\n// Simple emotion detection with keyword matching\nconst detectEmotion = (text)=>{\n    const lowerText = text.toLowerCase();\n    // Crisis detection takes priority\n    if (lowerText.includes('suicide') || lowerText.includes('kill myself') || lowerText.includes('end my life') || lowerText.includes('don\\'t want to live') || lowerText.includes('want to die')) {\n        return {\n            sentiment: 'negative',\n            emotions: {\n                primary: 'distressed',\n                confidence: 0.9\n            }\n        };\n    }\n    // Detect positive emotions - check these patterns first\n    if (lowerText.includes('feeling good') || lowerText.includes('feel good') || lowerText.includes('feeling great') || lowerText.includes('happy') || lowerText.includes('joy') || lowerText.includes('excited') || lowerText.includes('wonderful') || lowerText.includes('fantastic') || lowerText.includes('awesome') || lowerText.includes('excellent') || lowerText.includes('glad') || lowerText.includes('positive') || lowerText.includes('feeling better')) {\n        return {\n            sentiment: 'positive',\n            emotions: {\n                primary: 'happy',\n                confidence: 0.9\n            }\n        };\n    }\n    // Detect negative emotions\n    if (lowerText.includes('sad') || lowerText.includes('depress') || lowerText.includes('down') || lowerText.includes('unhappy') || lowerText.includes('miserable') || lowerText.includes('hurt') || lowerText.includes('pain')) {\n        return {\n            sentiment: 'negative',\n            emotions: {\n                primary: 'sad',\n                confidence: 0.85\n            }\n        };\n    }\n    if (lowerText.includes('anxious') || lowerText.includes('worry') || lowerText.includes('stress') || lowerText.includes('nervous') || lowerText.includes('afraid') || lowerText.includes('fear') || lowerText.includes('panic')) {\n        return {\n            sentiment: 'negative',\n            emotions: {\n                primary: 'anxious',\n                confidence: 0.85\n            }\n        };\n    }\n    if (lowerText.includes('angry') || lowerText.includes('mad') || lowerText.includes('frustrated') || lowerText.includes('annoyed') || lowerText.includes('irritated') || lowerText.includes('upset')) {\n        return {\n            sentiment: 'negative',\n            emotions: {\n                primary: 'angry',\n                confidence: 0.85\n            }\n        };\n    }\n    if (lowerText.includes('confused') || lowerText.includes('don\\'t understand') || lowerText.includes('puzzled') || lowerText.includes('unsure') || lowerText.includes('uncertain')) {\n        return {\n            sentiment: 'neutral',\n            emotions: {\n                primary: 'confused',\n                confidence: 0.8\n            }\n        };\n    }\n    // Check for greeting patterns\n    if (lowerText.match(/^(hi|hello|hey|greetings|howdy)/) || lowerText.includes('how are you') || lowerText.includes('how\\'s it going')) {\n        return {\n            sentiment: 'neutral',\n            emotions: {\n                primary: 'greeting',\n                confidence: 0.85\n            }\n        };\n    }\n    // Default to neutral\n    return {\n        sentiment: 'neutral',\n        emotions: {\n            primary: 'neutral',\n            confidence: 0.6\n        }\n    };\n};\n/**\n * Service for interacting with local LLaMA API\n */ const llamaService = {\n    /**\n   * Check if the Ollama server is available\n   * @returns {Promise<Object>} - Server status\n   */ async checkServerStatus () {\n        try {\n            const response = await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].get(`${LLAMA_API_URL}/api/tags`, {\n                timeout: 2000 // Fast timeout for checking\n            });\n            return {\n                isAvailable: response.status === 200,\n                status: response.status,\n                models: response.data?.models || []\n            };\n        } catch (error) {\n            console.error('Ollama server check failed:', error.message);\n            return {\n                isAvailable: false,\n                error: error.message\n            };\n        }\n    },\n    /**\n   * Process a message through the LLaMA model\n   * @param {string} userName - User's name\n   * @param {string} message - User's message\n   * @param {Array} chatHistory - Chat history\n   * @param {Function} onStream - Callback function for streaming response\n   * @param {string} detectedEmotion - Pre-detected emotion for context\n   * @returns {Promise<string>} - Model response\n   */ async processMessage (userName, message, chatHistory, onStream = null, detectedEmotion = null) {\n        try {\n            const formattedHistory = this.formatChatHistory(chatHistory);\n            // Use the provided emotion or get one if not provided\n            const emotion = detectedEmotion ? {\n                emotions: {\n                    primary: detectedEmotion\n                }\n            } : await this.quickAnalyzeSentiment(message);\n            const normalizedMessage = message.trim();\n            // Log request details for debugging\n            console.log(`Sending request to LLaMA model: ${LLAMA_MODEL}`);\n            console.log(`API URL: ${LLAMA_API_URL}/api/chat`);\n            const chatMessages = [\n                {\n                    role: \"system\",\n                    content: `You are NeuroSync AI, an empathetic mental health assistant. \nBe caring but stay realistic. You've detected the user is feeling: ${emotion.emotions.primary || 'neutral'}.\nIf the user seems in a crisis, prioritize their safety and suggest immediate professional help.\nProvide concise, practical advice. Avoid generic platitudes. Be authentic, warm, and honest.`\n                }\n            ];\n            // Add chat history as context (if any)\n            if (formattedHistory && formattedHistory.length > 0) {\n                formattedHistory.forEach((entry)=>{\n                    chatMessages.push({\n                        role: entry.role,\n                        content: entry.content\n                    });\n                });\n            }\n            // Add the current user message\n            chatMessages.push({\n                role: \"user\",\n                content: normalizedMessage\n            });\n            try {\n                let fullResponse = '';\n                if (onStream) {\n                    // Streaming mode\n                    const response = await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].post(`${LLAMA_API_URL}/api/chat`, {\n                        model: LLAMA_MODEL,\n                        messages: chatMessages,\n                        stream: true,\n                        options: {\n                            temperature: 0.7\n                        }\n                    }, {\n                        timeout: 30000,\n                        responseType: 'stream'\n                    });\n                    const stream = response.data;\n                    return new Promise((resolve, reject)=>{\n                        stream.on('data', (chunk)=>{\n                            try {\n                                const lines = chunk.toString().split('\\n').filter((line)=>line.trim() !== '');\n                                for (const line of lines){\n                                    if (line.includes('data: [DONE]')) continue;\n                                    if (line.startsWith('data: ')) {\n                                        const jsonData = JSON.parse(line.substring(6));\n                                        if (jsonData.message && jsonData.message.content) {\n                                            const content = jsonData.message.content;\n                                            fullResponse += content;\n                                            onStream(content);\n                                        }\n                                    }\n                                }\n                            } catch (e) {\n                                console.error('Error processing stream chunk:', e);\n                            }\n                        });\n                        stream.on('end', ()=>{\n                            resolve(fullResponse);\n                        });\n                        stream.on('error', (error)=>{\n                            reject(error);\n                        });\n                    });\n                } else {\n                    // Non-streaming mode - simplified to ensure proper JSON formatting\n                    console.log('Sending non-streaming request to Ollama API');\n                    const requestData = {\n                        model: LLAMA_MODEL,\n                        messages: chatMessages,\n                        stream: false,\n                        options: {\n                            temperature: 0.7\n                        }\n                    };\n                    console.log('Request payload:', JSON.stringify(requestData).substring(0, 150) + '...');\n                    const response = await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].post(`${LLAMA_API_URL}/api/chat`, requestData, {\n                        timeout: 30000 // Increased timeout to 30 seconds\n                    });\n                    console.log('Response received, status:', response.status);\n                    if (response.data && response.data.message && response.data.message.content) {\n                        return response.data.message.content;\n                    }\n                    // Fallback for other response formats\n                    if (response.data && response.data.response) {\n                        return response.data.response;\n                    }\n                    throw new Error('Unexpected response format from LLaMA API');\n                }\n            } catch (error) {\n                console.error('Error calling LLaMA API:', error);\n                if (error.response) {\n                    console.error('Response status:', error.response.status);\n                    console.error('Response data:', error.response.data);\n                }\n                // Provide a fallback response based on the detected emotion\n                return this.getFallbackResponse(emotion.emotions.primary || 'neutral');\n            }\n        } catch (error) {\n            console.error('Error in processMessage:', error);\n            return \"I'm having trouble processing your message right now. Can we try again?\";\n        }\n    },\n    /**\n   * Quick sentiment analysis using pattern matching\n   * @param {string} text - Text to analyze\n   * @returns {Object} - Sentiment analysis result\n   */ async quickAnalyzeSentiment (text) {\n        try {\n            // Check for simple cases using pattern matching first for speed\n            const quickResult = detectEmotion(text);\n            if (quickResult.emotions.confidence > 0.8) {\n                console.log('Using fast pattern matching for sentiment:', quickResult);\n                return quickResult;\n            }\n            // Try to use LLaMA for analysis with a simplified prompt\n            try {\n                const response = await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].post(`${LLAMA_API_URL}/api/chat`, {\n                    model: LLAMA_MODEL,\n                    messages: [\n                        {\n                            role: \"system\",\n                            content: \"You are a sentiment analyzer with high accuracy. Analyze the emotional content of the message and classify it correctly. Pay special attention to positive indicators like 'feeling good', 'happy', etc. Respond in JSON format only with the structure {\\\"sentiment\\\": \\\"positive|negative|neutral\\\", \\\"emotions\\\": {\\\"primary\\\": \\\"emotion_name\\\", \\\"confidence\\\": 0.0-1.0}}\"\n                        },\n                        {\n                            role: \"user\",\n                            content: `Analyze the emotional content of this message: \"${text}\"`\n                        }\n                    ],\n                    stream: false,\n                    options: {\n                        temperature: 0.1 // Lower temperature for more predictable results\n                    }\n                }, {\n                    timeout: 5000 // Reduced timeout for faster response\n                });\n                // Check for the response in the standard Ollama chat format\n                let responseContent = '';\n                if (response.data && response.data.message && response.data.message.content) {\n                    responseContent = response.data.message.content;\n                } else if (response.data && response.data.response) {\n                    // Fallback for older Ollama format\n                    responseContent = response.data.response;\n                } else {\n                    throw new Error('Unexpected response format from LLaMA API');\n                }\n                try {\n                    // Try to parse the response as JSON\n                    const parsedResponse = JSON.parse(responseContent);\n                    if (parsedResponse.sentiment && parsedResponse.emotions) {\n                        return {\n                            sentiment: parsedResponse.sentiment,\n                            emotions: parsedResponse.emotions\n                        };\n                    }\n                } catch (jsonError) {\n                    console.warn('Failed to parse Ollama sentiment response as JSON:', jsonError);\n                }\n                // If we get here, something went wrong with parsing\n                throw new Error('Invalid format returned from LLaMA sentiment analysis');\n            } catch (llamaError) {\n                console.warn('LLaMA sentiment analysis failed, using pattern matching:', llamaError.message);\n                return detectEmotion(text);\n            }\n        } catch (error) {\n            console.error('Error in sentiment analysis:', error);\n            // Return a neutral result as fallback\n            return {\n                sentiment: 'neutral',\n                emotions: {\n                    primary: 'neutral',\n                    confidence: 0.5\n                }\n            };\n        }\n    },\n    /**\n   * Get quick recommendations based on emotional state\n   * @param {string} emotionalState - User's emotional state\n   * @returns {Array} - List of recommendations\n   */ getQuickRecommendations (emotionalState) {\n        // Convert to lowercase and normalize\n        const emotion = emotionalState.toLowerCase();\n        // Return recommendations for the emotional state or default to neutral\n        return QUICK_RECOMMENDATIONS[emotion] || QUICK_RECOMMENDATIONS.neutral;\n    },\n    /**\n   * Format chat history for LLaMA API\n   * @param {Array} chatHistory - Chat history\n   * @returns {Array} - Formatted chat history\n   */ formatChatHistory (chatHistory) {\n        // Check if chatHistory is null or undefined\n        if (!chatHistory || !Array.isArray(chatHistory)) {\n            return [];\n        }\n        return chatHistory.map((msg)=>({\n                role: msg.role === 'system' ? 'system' : msg.role === 'user' ? 'user' : 'assistant',\n                content: msg.content\n            }));\n    },\n    /**\n   * Get fallback response based on detected emotion\n   * @param {string} emotion - Detected emotion\n   * @returns {string} - Fallback response\n   */ getFallbackResponse (emotion) {\n        const fallbackResponse = DEFAULT_RESPONSES[emotion] || DEFAULT_RESPONSES.neutral;\n        return `${fallbackResponse} [Note: I'm currently operating in fallback mode as I couldn't connect to the LLaMA 3.2 model. Please check if Ollama is running.]`;\n    }\n};\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api-node)/./lib/llama-service.js\n");

/***/ }),

/***/ "(api-node)/./lib/local-ai-middleware.js":
/*!************************************!*\
  !*** ./lib/local-ai-middleware.js ***!
  \************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   localAiMiddleware: () => (/* binding */ localAiMiddleware)\n/* harmony export */ });\n/* harmony import */ var _llama_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./llama-service */ \"(api-node)/./lib/llama-service.js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_llama_service__WEBPACK_IMPORTED_MODULE_0__]);\n_llama_service__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n/**\r\n * AI Middleware using local LLaMA 3.2 model\r\n * Simplified to focus only on Ollama API interaction and Pinata storage\r\n */ const localAiMiddleware = {\n    /**\r\n   * Process input and generate responses using local LLaMA model\r\n   * @param {string} message - User message\r\n   * @param {Array} history - Chat history\r\n   * @param {Object} userProfile - User profile data\r\n   * @returns {Promise<Object>} - Processed result with AI response\r\n   */ async processInput (message, history = [], userProfile = {}) {\n        console.log('Processing input with local LLaMA middleware:', {\n            message,\n            historyLength: history.length\n        });\n        // First check if Ollama server is available\n        try {\n            const serverStatus = await _llama_service__WEBPACK_IMPORTED_MODULE_0__.llamaService.checkServerStatus();\n            if (!serverStatus.isAvailable) {\n                throw new Error('Ollama server is not responding');\n            }\n            console.log('Ollama server is responding correctly');\n        } catch (error) {\n            console.error('Ollama server check failed:', error.message);\n            return this.getFallbackResponse(message);\n        }\n        // Process sentiment and chat in parallel to save time\n        try {\n            console.log('Starting parallel processing for sentiment analysis and chat response');\n            // Check for crisis content\n            const isCrisis = this.detectCrisisContent(message);\n            // Start sentiment analysis\n            const sentimentPromise = _llama_service__WEBPACK_IMPORTED_MODULE_0__.llamaService.quickAnalyzeSentiment(message);\n            // Start chat response generation with a timeout\n            const chatPromise = Promise.race([\n                _llama_service__WEBPACK_IMPORTED_MODULE_0__.llamaService.processMessage(userProfile.name || 'User', message, history, null, null // We'll wait for sentiment analysis result\n                ),\n                new Promise((_, reject)=>setTimeout(()=>reject(new Error('Chat response timeout')), 20000))\n            ]);\n            // Wait for both sentiment analysis and chat response\n            const [sentimentResult, chatResponse] = await Promise.all([\n                sentimentPromise.catch((error)=>{\n                    console.error('Sentiment analysis failed:', error);\n                    return {\n                        sentiment: 'neutral',\n                        emotions: {\n                            primary: 'neutral',\n                            confidence: 0.5\n                        }\n                    };\n                }),\n                chatPromise.catch((error)=>{\n                    console.error('Chat response failed:', error);\n                    return `I understand you said \"${message}\". I'd like to respond, but I'm having trouble connecting to my knowledge base right now. How about we try a simpler question?`;\n                })\n            ]);\n            console.log('Sentiment analysis result:', sentimentResult);\n            console.log('Chat response received from LLaMA');\n            // Get recommendations based on emotional state\n            const emotionalState = isCrisis ? 'distressed' : sentimentResult.emotions.primary;\n            const recommendations = _llama_service__WEBPACK_IMPORTED_MODULE_0__.llamaService.getQuickRecommendations(emotionalState);\n            console.log('Recommendations retrieved, count:', recommendations.length);\n            // Return the combined result\n            return {\n                message: chatResponse,\n                sentiment: isCrisis ? 'negative' : sentimentResult.sentiment,\n                emotions: isCrisis ? {\n                    primary: 'distressed',\n                    confidence: 0.9\n                } : sentimentResult.emotions,\n                recommendations\n            };\n        } catch (error) {\n            console.error('Error in local AI middleware:', error);\n            return this.getFallbackResponse(message);\n        }\n    },\n    /**\r\n   * Detect crisis content in a message\r\n   * @param {string} message - User message\r\n   * @returns {boolean} - True if crisis content detected\r\n   */ detectCrisisContent (message) {\n        if (!message) return false;\n        const crisisKeywords = [\n            'suicide',\n            'suicidal',\n            'kill myself',\n            'end my life',\n            'want to die',\n            'don\\'t want to live',\n            'life is not worth',\n            'better off dead',\n            'no reason to live',\n            'can\\'t take it anymore',\n            'ending it all',\n            'hurt myself',\n            'harm myself',\n            'self harm'\n        ];\n        const lowerText = message.toLowerCase();\n        return crisisKeywords.some((keyword)=>lowerText.includes(keyword));\n    },\n    /**\r\n   * Get a fallback response when AI processing fails\r\n   * @param {string} message - User message\r\n   * @returns {Object} - Fallback response\r\n   */ getFallbackResponse (message) {\n        return {\n            message: `I understand you said \"${message}\". I'm having trouble connecting to my AI brain right now. Can you try again in a moment? If this continues, you might want to check if Ollama is running properly.`,\n            sentiment: 'neutral',\n            emotions: {\n                primary: 'neutral',\n                confidence: 0.5\n            },\n            recommendations: [\n                {\n                    type: 'exercise',\n                    title: 'Take a Moment',\n                    description: 'Take a deep breath and a moment for yourself.',\n                    actionUrl: '/resources/mindfulness',\n                    actionText: 'Learn More'\n                }\n            ]\n        };\n    }\n};\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api-node)/./lib/local-ai-middleware.js\n");

/***/ }),

/***/ "(api-node)/./lib/services/pinata-conversation-service.js":
/*!*****************************************************!*\
  !*** ./lib/services/pinata-conversation-service.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   pinataConversationService: () => (/* binding */ pinataConversationService)\n/* harmony export */ });\n/* harmony import */ var _pinata_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./pinata-service */ \"(api-node)/./lib/services/pinata-service.js\");\n/* harmony import */ var _pinata_service__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_pinata_service__WEBPACK_IMPORTED_MODULE_0__);\n\n/**\r\n * Simple UUID generation function that doesn't require dependencies\r\n * @returns {string} - A unique ID\r\n */ function generateUniqueId() {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n        const r = Math.random() * 16 | 0;\n        const v = c === 'x' ? r : r & 0x3 | 0x8;\n        return v.toString(16);\n    });\n}\n/**\r\n * Pinata-only Conversation Service\r\n * Handles storing and retrieving conversations only from Pinata IPFS, completely bypassing MongoDB\r\n */ class PinataConversationService {\n    /**\r\n   * Create a new conversation\r\n   * @param {string} userId - User ID\r\n   * @param {string} title - Conversation title\r\n   * @param {Array} messages - Initial messages\r\n   * @returns {Promise<object>} - Created conversation\r\n   */ async createConversation(userId, title, messages = []) {\n        try {\n            // Create conversation object with custom UUID instead of MongoDB ID\n            const conversation = {\n                _id: generateUniqueId(),\n                userId,\n                title: title || 'New Conversation',\n                createdAt: new Date(),\n                updatedAt: new Date(),\n                messages: Array.isArray(messages) ? messages : [],\n                type: 'conversation'\n            };\n            // Store directly to Pinata\n            const pinataResponse = await _pinata_service__WEBPACK_IMPORTED_MODULE_0__.pinataService.storeData(`conversation_${userId}`, conversation, {\n                conversationId: conversation._id\n            });\n            conversation.ipfsHash = pinataResponse.IpfsHash;\n            console.log(`Conversation created in Pinata with hash: ${pinataResponse.IpfsHash}`);\n            return conversation;\n        } catch (error) {\n            console.error('Error in createConversation:', error);\n            throw error;\n        }\n    }\n    /**\r\n   * Add a message to an existing conversation\r\n   * @param {string} conversationId - Conversation ID\r\n   * @param {string} userId - User ID\r\n   * @param {object} message - Message to add\r\n   * @returns {Promise<object>} - Updated conversation\r\n   */ async addMessage(conversationId, userId, message) {\n        try {\n            if (!conversationId || !userId || !message) {\n                throw new Error('Missing required parameters');\n            }\n            // Get all user's pins\n            const pins = await _pinata_service__WEBPACK_IMPORTED_MODULE_0__.pinataService.getHistory(userId);\n            const conversationPin = pins.find((pin)=>{\n                const metadata = pin.metadata?.keyvalues;\n                return metadata?.type === 'conversation' && metadata?.conversationId === conversationId;\n            });\n            if (!conversationPin) {\n                throw new Error(`Conversation ${conversationId} not found for user ${userId}`);\n            }\n            // Get the conversation data\n            const data = await _pinata_service__WEBPACK_IMPORTED_MODULE_0__.pinataService.getData(conversationPin.ipfs_pin_hash);\n            if (!data) {\n                throw new Error(`Failed to retrieve conversation data from Pinata`);\n            }\n            // Add the message to the existing conversation\n            const updatedMessages = [\n                ...data.messages || [],\n                message\n            ];\n            data.messages = updatedMessages;\n            data.updatedAt = new Date();\n            // Store the updated data\n            const pinataResponse = await _pinata_service__WEBPACK_IMPORTED_MODULE_0__.pinataService.storeData(`conversation_${userId}`, {\n                ...data,\n                type: 'conversation',\n                userId\n            }, {\n                conversationId\n            });\n            // Remove the old pin\n            await _pinata_service__WEBPACK_IMPORTED_MODULE_0__.pinataService.removeData(conversationPin.ipfs_pin_hash);\n            console.log(`Added message to conversation ${conversationId} in Pinata`);\n            data.ipfsHash = pinataResponse.IpfsHash;\n            return data;\n        } catch (error) {\n            console.error('Error in addMessage:', error);\n            throw error;\n        }\n    }\n    /**\r\n   * Get a conversation by ID\r\n   * @param {string} conversationId - Conversation ID\r\n   * @param {string} userId - User ID\r\n   * @returns {Promise<object>} - Retrieved conversation\r\n   */ async getConversation(conversationId, userId) {\n        try {\n            if (!conversationId || !userId) {\n                throw new Error('Missing required parameters');\n            }\n            // Get user's pins from Pinata\n            const pins = await _pinata_service__WEBPACK_IMPORTED_MODULE_0__.pinataService.getHistory(userId);\n            const conversationPin = pins.find((pin)=>{\n                const metadata = pin.metadata?.keyvalues;\n                return metadata?.type === 'conversation' && metadata?.conversationId === conversationId;\n            });\n            if (!conversationPin) {\n                throw new Error(`Conversation ${conversationId} not found for user ${userId}`);\n            }\n            // Get the conversation data\n            const data = await _pinata_service__WEBPACK_IMPORTED_MODULE_0__.pinataService.getData(conversationPin.ipfs_pin_hash);\n            if (!data) {\n                throw new Error(`Failed to retrieve conversation data from Pinata`);\n            }\n            console.log(`Retrieved conversation ${conversationId} from Pinata`);\n            data.ipfsHash = conversationPin.ipfs_pin_hash;\n            return data;\n        } catch (error) {\n            console.error('Error in getConversation:', error);\n            throw error;\n        }\n    }\n    /**\r\n   * Get all conversations for a user\r\n   * @param {string} userId - User ID\r\n   * @returns {Promise<Array>} - Array of conversations\r\n   */ async getUserConversations(userId) {\n        try {\n            if (!userId) {\n                throw new Error('Missing required parameter: userId');\n            }\n            // Get all pins for the user\n            const pins = await _pinata_service__WEBPACK_IMPORTED_MODULE_0__.pinataService.getHistory(userId);\n            // Filter for conversation pins\n            const conversationPins = pins.filter((pin)=>{\n                const metadata = pin.metadata?.keyvalues;\n                return metadata?.type === 'conversation';\n            });\n            // Get the data for each conversation\n            const conversations = [];\n            for (const pin of conversationPins){\n                try {\n                    const data = await _pinata_service__WEBPACK_IMPORTED_MODULE_0__.pinataService.getData(pin.ipfs_pin_hash);\n                    if (data) {\n                        data.ipfsHash = pin.ipfs_pin_hash;\n                        conversations.push(data);\n                    }\n                } catch (error) {\n                    console.error(`Failed to get data for pin ${pin.ipfs_pin_hash}:`, error);\n                }\n            }\n            console.log(`Retrieved ${conversations.length} conversations from Pinata for user ${userId}`);\n            return conversations;\n        } catch (error) {\n            console.error('Error in getUserConversations:', error);\n            return [];\n        }\n    }\n    /**\r\n   * Delete a conversation\r\n   * @param {string} conversationId - Conversation ID\r\n   * @param {string} userId - User ID\r\n   * @returns {Promise<boolean>} - Whether the deletion was successful\r\n   */ async deleteConversation(conversationId, userId) {\n        try {\n            if (!conversationId || !userId) {\n                throw new Error('Missing required parameters');\n            }\n            // Get all pins for the user\n            const pins = await _pinata_service__WEBPACK_IMPORTED_MODULE_0__.pinataService.getHistory(userId);\n            const conversationPin = pins.find((pin)=>{\n                const metadata = pin.metadata?.keyvalues;\n                return metadata?.type === 'conversation' && metadata?.conversationId === conversationId;\n            });\n            if (!conversationPin) {\n                console.warn(`Conversation ${conversationId} not found for user ${userId}`);\n                return false;\n            }\n            // Remove the pin\n            const result = await _pinata_service__WEBPACK_IMPORTED_MODULE_0__.pinataService.removeData(conversationPin.ipfs_pin_hash);\n            console.log(`Deleted conversation ${conversationId} from Pinata`);\n            return result.success;\n        } catch (error) {\n            console.error('Error in deleteConversation:', error);\n            return false;\n        }\n    }\n    /**\r\n   * Update conversation title\r\n   * @param {string} conversationId - Conversation ID\r\n   * @param {string} userId - User ID\r\n   * @param {string} newTitle - New title\r\n   * @returns {Promise<object>} - Updated conversation\r\n   */ async updateConversationTitle(conversationId, userId, newTitle) {\n        try {\n            if (!conversationId || !userId || !newTitle) {\n                throw new Error('Missing required parameters');\n            }\n            // Get all pins for the user\n            const pins = await _pinata_service__WEBPACK_IMPORTED_MODULE_0__.pinataService.getHistory(userId);\n            const conversationPin = pins.find((pin)=>{\n                const metadata = pin.metadata?.keyvalues;\n                return metadata?.type === 'conversation' && metadata?.conversationId === conversationId;\n            });\n            if (!conversationPin) {\n                throw new Error(`Conversation ${conversationId} not found for user ${userId}`);\n            }\n            // Get the conversation data\n            const data = await _pinata_service__WEBPACK_IMPORTED_MODULE_0__.pinataService.getData(conversationPin.ipfs_pin_hash);\n            if (!data) {\n                throw new Error(`Failed to retrieve conversation data from Pinata`);\n            }\n            // Update the title\n            data.title = newTitle;\n            data.updatedAt = new Date();\n            // Store the updated data\n            const pinataResponse = await _pinata_service__WEBPACK_IMPORTED_MODULE_0__.pinataService.storeData(`conversation_${userId}`, {\n                ...data,\n                type: 'conversation',\n                userId\n            }, {\n                conversationId\n            });\n            // Remove the old pin\n            await _pinata_service__WEBPACK_IMPORTED_MODULE_0__.pinataService.removeData(conversationPin.ipfs_pin_hash);\n            console.log(`Updated title for conversation ${conversationId} in Pinata`);\n            data.ipfsHash = pinataResponse.IpfsHash;\n            return data;\n        } catch (error) {\n            console.error('Error in updateConversationTitle:', error);\n            throw error;\n        }\n    }\n    /**\r\n   * Delete all conversations for a user\r\n   * @param {string} userId - User ID\r\n   * @returns {Promise<boolean>} - Whether the deletion was successful\r\n   */ async deleteAllUserConversations(userId) {\n        try {\n            if (!userId) {\n                throw new Error('Missing required parameter: userId');\n            }\n            // Get all pins for the user\n            const pins = await _pinata_service__WEBPACK_IMPORTED_MODULE_0__.pinataService.getHistory(userId);\n            // Filter for conversation pins\n            const conversationPins = pins.filter((pin)=>{\n                const metadata = pin.metadata?.keyvalues;\n                return metadata?.type === 'conversation';\n            });\n            // Delete each conversation\n            let success = true;\n            for (const pin of conversationPins){\n                try {\n                    const result = await _pinata_service__WEBPACK_IMPORTED_MODULE_0__.pinataService.removeData(pin.ipfs_pin_hash);\n                    if (!result.success) {\n                        success = false;\n                    }\n                } catch (error) {\n                    console.error(`Failed to delete pin ${pin.ipfs_pin_hash}:`, error);\n                    success = false;\n                }\n            }\n            console.log(`Deleted ${conversationPins.length} conversations from Pinata for user ${userId}`);\n            return success;\n        } catch (error) {\n            console.error('Error in deleteAllUserConversations:', error);\n            return false;\n        }\n    }\n}\nconst pinataConversationService = new PinataConversationService();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api-node)/./lib/services/pinata-conversation-service.js\n");

/***/ }),

/***/ "(api-node)/./lib/services/pinata-service.js":
/*!****************************************!*\
  !*** ./lib/services/pinata-service.js ***!
  \****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst axios = __webpack_require__(/*! axios */ \"axios?6fac\");\n/**\r\n * Pinata IPFS Service\r\n * Handles storing and retrieving data from Pinata IPFS\r\n */ class PinataService {\n    constructor(){\n        this.apiKey = process.env.PINATA_API_KEY;\n        this.apiSecret = process.env.PINATA_API_SECRET;\n        this.jwt = process.env.PINATA_JWT;\n        this.apiUrl = 'https://api.pinata.cloud';\n        this.gateway = 'https://gateway.pinata.cloud/ipfs/';\n    }\n    /**\r\n   * Check if the Pinata credentials are configured\r\n   */ isConfigured() {\n        return !!(this.jwt || this.apiKey && this.apiSecret);\n    }\n    /**\r\n   * Get the headers for Pinata API requests\r\n   */ getHeaders() {\n        if (this.jwt) {\n            return {\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${this.jwt}`\n            };\n        } else if (this.apiKey && this.apiSecret) {\n            return {\n                'Content-Type': 'application/json',\n                'pinata_api_key': this.apiKey,\n                'pinata_secret_api_key': this.apiSecret\n            };\n        } else {\n            throw new Error('Pinata credentials not configured');\n        }\n    }\n    /**\r\n   * Store data on Pinata IPFS\r\n   * @param {string} keyName - Unique key for the data\r\n   * @param {object} data - Data to store\r\n   * @param {object} metadata - Optional metadata for the pin\r\n   * @returns {Promise<object>} - Response from Pinata\r\n   */ async storeData(keyName, data, metadata = {}) {\n        try {\n            if (!this.isConfigured()) {\n                throw new Error('Pinata credentials not configured');\n            }\n            // Generate a unique identifier for the transaction\n            const uniqueId = `${keyName}_${Date.now()}`;\n            // Prepare the data for Pinata\n            const pinataBody = {\n                pinataContent: data,\n                pinataMetadata: {\n                    name: uniqueId,\n                    keyvalues: {\n                        userId: data.userId || 'anonymous',\n                        type: data.type || 'conversation',\n                        timestamp: Date.now(),\n                        ...metadata\n                    }\n                }\n            };\n            // Upload to Pinata\n            const response = await axios.post(`${this.apiUrl}/pinning/pinJSONToIPFS`, pinataBody, {\n                headers: this.getHeaders()\n            });\n            return response.data;\n        } catch (error) {\n            console.error('Failed to store data on Pinata:', error?.response?.data || error?.message || error);\n            throw error;\n        }\n    }\n    /**\r\n   * Get data from Pinata IPFS\r\n   * @param {string} ipfsHash - IPFS hash to retrieve\r\n   * @returns {Promise<object>} - Retrieved data\r\n   */ async getData(ipfsHash) {\n        try {\n            if (!ipfsHash) {\n                throw new Error('IPFS hash is required');\n            }\n            // Fetch data from Pinata Gateway\n            const response = await axios.get(`${this.gateway}${ipfsHash}`);\n            return response.data;\n        } catch (error) {\n            console.error(`Failed to get data from Pinata (${ipfsHash}):`, error?.message || error);\n            return null;\n        }\n    }\n    /**\r\n   * Get history of pins for a user\r\n   * @param {string} userId - User ID to get history for\r\n   * @returns {Promise<Array>} - Array of pins\r\n   */ async getHistory(userId) {\n        try {\n            if (!this.isConfigured()) {\n                throw new Error('Pinata credentials not configured');\n            }\n            if (!userId) {\n                return [];\n            }\n            // Query Pinata for pins with the user's ID\n            const response = await axios.get(`${this.apiUrl}/data/pinList?metadata[keyvalues][userId]={\"value\":\"${userId}\",\"op\":\"eq\"}&status=pinned`, {\n                headers: this.getHeaders()\n            });\n            return response.data.rows || [];\n        } catch (error) {\n            console.error(`Failed to get history from Pinata for user ${userId}:`, error?.response?.data || error?.message || error);\n            return [];\n        }\n    }\n    /**\r\n   * Remove data from Pinata IPFS\r\n   * @param {string} ipfsHash - IPFS hash to remove\r\n   * @returns {Promise<object>} - Response from Pinata\r\n   */ async removeData(ipfsHash) {\n        try {\n            if (!this.isConfigured()) {\n                throw new Error('Pinata credentials not configured');\n            }\n            if (!ipfsHash) {\n                throw new Error('IPFS hash is required');\n            }\n            // Unpin from Pinata\n            const response = await axios.delete(`${this.apiUrl}/pinning/unpin/${ipfsHash}`, {\n                headers: this.getHeaders()\n            });\n            return {\n                success: true,\n                data: response.data\n            };\n        } catch (error) {\n            console.error(`Failed to remove data from Pinata (${ipfsHash}):`, error?.response?.data || error?.message || error);\n            // Handle common Pinata error cases: \n            // 1. 404 - Pin doesn't exist\n            // 2. 400 with \"CURRENT_USER_HAS_NOT_PINNED_CID\" - User doesn't have permission to unpin\n            if (error?.response?.status === 404 || error?.response?.status === 400 && error?.response?.data?.error?.reason === 'CURRENT_USER_HAS_NOT_PINNED_CID') {\n                console.log(`Pin ${ipfsHash} not found or not owned by current user. Considering it removed.`);\n                return {\n                    success: true,\n                    message: 'Pin not found or not owned by current user'\n                };\n            }\n            throw error;\n        }\n    }\n    /**\r\n   * Test the Pinata connection\r\n   * @returns {Promise<boolean>} - Whether the connection was successful\r\n   */ async testConnection() {\n        try {\n            if (!this.isConfigured()) {\n                return false;\n            }\n            // Test the connection by getting the pin count\n            await axios.get(`${this.apiUrl}/data/userPinnedDataTotal`, {\n                headers: this.getHeaders()\n            });\n            return true;\n        } catch (error) {\n            console.error('Pinata connection test failed:', error?.response?.data || error?.message || error);\n            return false;\n        }\n    }\n    /**\r\n   * Get all pins from Pinata regardless of user ID\r\n   * @returns {Promise<Array>} - Array of pins\r\n   */ async getAllPins() {\n        try {\n            if (!this.isConfigured()) {\n                throw new Error('Pinata credentials not configured');\n            }\n            // Query Pinata for all pins\n            const response = await axios.get(`${this.apiUrl}/data/pinList?status=pinned`, {\n                headers: this.getHeaders()\n            });\n            return response.data.rows || [];\n        } catch (error) {\n            console.error(`Failed to get all pins from Pinata:`, error?.response?.data || error?.message || error);\n            return [];\n        }\n    }\n}\nconst pinataService = new PinataService();\nmodule.exports = {\n    pinataService\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaS1ub2RlKS8uL2xpYi9zZXJ2aWNlcy9waW5hdGEtc2VydmljZS5qcyIsIm1hcHBpbmdzIjoiO0FBQUEsTUFBTUEsUUFBUUMsbUJBQU9BLENBQUMseUJBQU87QUFFN0I7OztDQUdDLEdBQ0QsTUFBTUM7SUFDSkMsYUFBYztRQUNaLElBQUksQ0FBQ0MsTUFBTSxHQUFHQyxRQUFRQyxHQUFHLENBQUNDLGNBQWM7UUFDeEMsSUFBSSxDQUFDQyxTQUFTLEdBQUdILFFBQVFDLEdBQUcsQ0FBQ0csaUJBQWlCO1FBQzlDLElBQUksQ0FBQ0MsR0FBRyxHQUFHTCxRQUFRQyxHQUFHLENBQUNLLFVBQVU7UUFDakMsSUFBSSxDQUFDQyxNQUFNLEdBQUc7UUFDZCxJQUFJLENBQUNDLE9BQU8sR0FBRztJQUNqQjtJQUVBOztHQUVDLEdBQ0RDLGVBQWU7UUFDYixPQUFPLENBQUMsQ0FBRSxLQUFJLENBQUNKLEdBQUcsSUFBSyxJQUFJLENBQUNOLE1BQU0sSUFBSSxJQUFJLENBQUNJLFNBQVM7SUFDdEQ7SUFFQTs7R0FFQyxHQUNETyxhQUFhO1FBQ1gsSUFBSSxJQUFJLENBQUNMLEdBQUcsRUFBRTtZQUNaLE9BQU87Z0JBQ0wsZ0JBQWdCO2dCQUNoQixpQkFBaUIsQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDQSxHQUFHLEVBQUU7WUFDdkM7UUFDRixPQUFPLElBQUksSUFBSSxDQUFDTixNQUFNLElBQUksSUFBSSxDQUFDSSxTQUFTLEVBQUU7WUFDeEMsT0FBTztnQkFDTCxnQkFBZ0I7Z0JBQ2hCLGtCQUFrQixJQUFJLENBQUNKLE1BQU07Z0JBQzdCLHlCQUF5QixJQUFJLENBQUNJLFNBQVM7WUFDekM7UUFDRixPQUFPO1lBQ0wsTUFBTSxJQUFJUSxNQUFNO1FBQ2xCO0lBQ0Y7SUFFQTs7Ozs7O0dBTUMsR0FDRCxNQUFNQyxVQUFVQyxPQUFPLEVBQUVDLElBQUksRUFBRUMsV0FBVyxDQUFDLENBQUMsRUFBRTtRQUM1QyxJQUFJO1lBQ0YsSUFBSSxDQUFDLElBQUksQ0FBQ04sWUFBWSxJQUFJO2dCQUN4QixNQUFNLElBQUlFLE1BQU07WUFDbEI7WUFFQSxtREFBbUQ7WUFDbkQsTUFBTUssV0FBVyxHQUFHSCxRQUFRLENBQUMsRUFBRUksS0FBS0MsR0FBRyxJQUFJO1lBRTNDLDhCQUE4QjtZQUM5QixNQUFNQyxhQUFhO2dCQUNqQkMsZUFBZU47Z0JBQ2ZPLGdCQUFnQjtvQkFDZEMsTUFBTU47b0JBQ05PLFdBQVc7d0JBQ1RDLFFBQVFWLEtBQUtVLE1BQU0sSUFBSTt3QkFDdkJDLE1BQU1YLEtBQUtXLElBQUksSUFBSTt3QkFDbkJDLFdBQVdULEtBQUtDLEdBQUc7d0JBQ25CLEdBQUdILFFBQVE7b0JBQ2I7Z0JBQ0Y7WUFDRjtZQUVBLG1CQUFtQjtZQUNuQixNQUFNWSxXQUFXLE1BQU1oQyxNQUFNaUMsSUFBSSxDQUMvQixHQUFHLElBQUksQ0FBQ3JCLE1BQU0sQ0FBQyxzQkFBc0IsQ0FBQyxFQUN0Q1ksWUFDQTtnQkFBRVUsU0FBUyxJQUFJLENBQUNuQixVQUFVO1lBQUc7WUFHL0IsT0FBT2lCLFNBQVNiLElBQUk7UUFDdEIsRUFBRSxPQUFPZ0IsT0FBTztZQUNkQyxRQUFRRCxLQUFLLENBQUMsbUNBQW1DQSxPQUFPSCxVQUFVYixRQUFRZ0IsT0FBT0UsV0FBV0Y7WUFDNUYsTUFBTUE7UUFDUjtJQUNGO0lBRUE7Ozs7R0FJQyxHQUNELE1BQU1HLFFBQVFDLFFBQVEsRUFBRTtRQUN0QixJQUFJO1lBQ0YsSUFBSSxDQUFDQSxVQUFVO2dCQUNiLE1BQU0sSUFBSXZCLE1BQU07WUFDbEI7WUFFQSxpQ0FBaUM7WUFDakMsTUFBTWdCLFdBQVcsTUFBTWhDLE1BQU13QyxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUMzQixPQUFPLEdBQUcwQixVQUFVO1lBQzdELE9BQU9QLFNBQVNiLElBQUk7UUFDdEIsRUFBRSxPQUFPZ0IsT0FBTztZQUNkQyxRQUFRRCxLQUFLLENBQUMsQ0FBQyxnQ0FBZ0MsRUFBRUksU0FBUyxFQUFFLENBQUMsRUFBRUosT0FBT0UsV0FBV0Y7WUFDakYsT0FBTztRQUNUO0lBQ0Y7SUFFQTs7OztHQUlDLEdBQ0QsTUFBTU0sV0FBV1osTUFBTSxFQUFFO1FBQ3ZCLElBQUk7WUFDRixJQUFJLENBQUMsSUFBSSxDQUFDZixZQUFZLElBQUk7Z0JBQ3hCLE1BQU0sSUFBSUUsTUFBTTtZQUNsQjtZQUVBLElBQUksQ0FBQ2EsUUFBUTtnQkFDWCxPQUFPLEVBQUU7WUFDWDtZQUVBLDJDQUEyQztZQUMzQyxNQUFNRyxXQUFXLE1BQU1oQyxNQUFNd0MsR0FBRyxDQUM5QixHQUFHLElBQUksQ0FBQzVCLE1BQU0sQ0FBQyxvREFBb0QsRUFBRWlCLE9BQU8sMEJBQTBCLENBQUMsRUFDdkc7Z0JBQUVLLFNBQVMsSUFBSSxDQUFDbkIsVUFBVTtZQUFHO1lBRy9CLE9BQU9pQixTQUFTYixJQUFJLENBQUN1QixJQUFJLElBQUksRUFBRTtRQUNqQyxFQUFFLE9BQU9QLE9BQU87WUFDZEMsUUFBUUQsS0FBSyxDQUFDLENBQUMsMkNBQTJDLEVBQUVOLE9BQU8sQ0FBQyxDQUFDLEVBQUVNLE9BQU9ILFVBQVViLFFBQVFnQixPQUFPRSxXQUFXRjtZQUNsSCxPQUFPLEVBQUU7UUFDWDtJQUNGO0lBRUE7Ozs7R0FJQyxHQUNELE1BQU1RLFdBQVdKLFFBQVEsRUFBRTtRQUN6QixJQUFJO1lBQ0YsSUFBSSxDQUFDLElBQUksQ0FBQ3pCLFlBQVksSUFBSTtnQkFDeEIsTUFBTSxJQUFJRSxNQUFNO1lBQ2xCO1lBRUEsSUFBSSxDQUFDdUIsVUFBVTtnQkFDYixNQUFNLElBQUl2QixNQUFNO1lBQ2xCO1lBRUEsb0JBQW9CO1lBQ3BCLE1BQU1nQixXQUFXLE1BQU1oQyxNQUFNNEMsTUFBTSxDQUNqQyxHQUFHLElBQUksQ0FBQ2hDLE1BQU0sQ0FBQyxlQUFlLEVBQUUyQixVQUFVLEVBQzFDO2dCQUFFTCxTQUFTLElBQUksQ0FBQ25CLFVBQVU7WUFBRztZQUcvQixPQUFPO2dCQUFFOEIsU0FBUztnQkFBTTFCLE1BQU1hLFNBQVNiLElBQUk7WUFBQztRQUM5QyxFQUFFLE9BQU9nQixPQUFPO1lBQ2RDLFFBQVFELEtBQUssQ0FBQyxDQUFDLG1DQUFtQyxFQUFFSSxTQUFTLEVBQUUsQ0FBQyxFQUFFSixPQUFPSCxVQUFVYixRQUFRZ0IsT0FBT0UsV0FBV0Y7WUFFN0cscUNBQXFDO1lBQ3JDLDZCQUE2QjtZQUM3Qix3RkFBd0Y7WUFDeEYsSUFBSUEsT0FBT0gsVUFBVWMsV0FBVyxPQUMzQlgsT0FBT0gsVUFBVWMsV0FBVyxPQUM1QlgsT0FBT0gsVUFBVWIsTUFBTWdCLE9BQU9ZLFdBQVcsbUNBQW9DO2dCQUNoRlgsUUFBUVksR0FBRyxDQUFDLENBQUMsSUFBSSxFQUFFVCxTQUFTLGdFQUFnRSxDQUFDO2dCQUM3RixPQUFPO29CQUFFTSxTQUFTO29CQUFNUixTQUFTO2dCQUE2QztZQUNoRjtZQUVBLE1BQU1GO1FBQ1I7SUFDRjtJQUVBOzs7R0FHQyxHQUNELE1BQU1jLGlCQUFpQjtRQUNyQixJQUFJO1lBQ0YsSUFBSSxDQUFDLElBQUksQ0FBQ25DLFlBQVksSUFBSTtnQkFDeEIsT0FBTztZQUNUO1lBRUEsK0NBQStDO1lBQy9DLE1BQU1kLE1BQU13QyxHQUFHLENBQ2IsR0FBRyxJQUFJLENBQUM1QixNQUFNLENBQUMseUJBQXlCLENBQUMsRUFDekM7Z0JBQUVzQixTQUFTLElBQUksQ0FBQ25CLFVBQVU7WUFBRztZQUcvQixPQUFPO1FBQ1QsRUFBRSxPQUFPb0IsT0FBTztZQUNkQyxRQUFRRCxLQUFLLENBQUMsa0NBQWtDQSxPQUFPSCxVQUFVYixRQUFRZ0IsT0FBT0UsV0FBV0Y7WUFDM0YsT0FBTztRQUNUO0lBQ0Y7SUFFQTs7O0dBR0MsR0FDRCxNQUFNZSxhQUFhO1FBQ2pCLElBQUk7WUFDRixJQUFJLENBQUMsSUFBSSxDQUFDcEMsWUFBWSxJQUFJO2dCQUN4QixNQUFNLElBQUlFLE1BQU07WUFDbEI7WUFFQSw0QkFBNEI7WUFDNUIsTUFBTWdCLFdBQVcsTUFBTWhDLE1BQU13QyxHQUFHLENBQzlCLEdBQUcsSUFBSSxDQUFDNUIsTUFBTSxDQUFDLDJCQUEyQixDQUFDLEVBQzNDO2dCQUFFc0IsU0FBUyxJQUFJLENBQUNuQixVQUFVO1lBQUc7WUFHL0IsT0FBT2lCLFNBQVNiLElBQUksQ0FBQ3VCLElBQUksSUFBSSxFQUFFO1FBQ2pDLEVBQUUsT0FBT1AsT0FBTztZQUNkQyxRQUFRRCxLQUFLLENBQUMsQ0FBQyxtQ0FBbUMsQ0FBQyxFQUFFQSxPQUFPSCxVQUFVYixRQUFRZ0IsT0FBT0UsV0FBV0Y7WUFDaEcsT0FBTyxFQUFFO1FBQ1g7SUFDRjtBQUNGO0FBRUEsTUFBTWdCLGdCQUFnQixJQUFJakQ7QUFFMUJrRCxPQUFPQyxPQUFPLEdBQUc7SUFBRUY7QUFBYyIsInNvdXJjZXMiOlsiRDpcXFByb2plY3RzXFxEZWtodGUgaGFpXFxuZXVyb1N5bmNcXE5ldXJvU3luYy1BSS1Gcm9udGVuZFxcbGliXFxzZXJ2aWNlc1xccGluYXRhLXNlcnZpY2UuanMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgYXhpb3MgPSByZXF1aXJlKCdheGlvcycpO1xyXG5cclxuLyoqXHJcbiAqIFBpbmF0YSBJUEZTIFNlcnZpY2VcclxuICogSGFuZGxlcyBzdG9yaW5nIGFuZCByZXRyaWV2aW5nIGRhdGEgZnJvbSBQaW5hdGEgSVBGU1xyXG4gKi9cclxuY2xhc3MgUGluYXRhU2VydmljZSB7XHJcbiAgY29uc3RydWN0b3IoKSB7XHJcbiAgICB0aGlzLmFwaUtleSA9IHByb2Nlc3MuZW52LlBJTkFUQV9BUElfS0VZO1xyXG4gICAgdGhpcy5hcGlTZWNyZXQgPSBwcm9jZXNzLmVudi5QSU5BVEFfQVBJX1NFQ1JFVDtcclxuICAgIHRoaXMuand0ID0gcHJvY2Vzcy5lbnYuUElOQVRBX0pXVDtcclxuICAgIHRoaXMuYXBpVXJsID0gJ2h0dHBzOi8vYXBpLnBpbmF0YS5jbG91ZCc7XHJcbiAgICB0aGlzLmdhdGV3YXkgPSAnaHR0cHM6Ly9nYXRld2F5LnBpbmF0YS5jbG91ZC9pcGZzLyc7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDaGVjayBpZiB0aGUgUGluYXRhIGNyZWRlbnRpYWxzIGFyZSBjb25maWd1cmVkXHJcbiAgICovXHJcbiAgaXNDb25maWd1cmVkKCkge1xyXG4gICAgcmV0dXJuICEhKHRoaXMuand0IHx8ICh0aGlzLmFwaUtleSAmJiB0aGlzLmFwaVNlY3JldCkpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogR2V0IHRoZSBoZWFkZXJzIGZvciBQaW5hdGEgQVBJIHJlcXVlc3RzXHJcbiAgICovXHJcbiAgZ2V0SGVhZGVycygpIHtcclxuICAgIGlmICh0aGlzLmp3dCkge1xyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXHJcbiAgICAgICAgJ0F1dGhvcml6YXRpb24nOiBgQmVhcmVyICR7dGhpcy5qd3R9YFxyXG4gICAgICB9O1xyXG4gICAgfSBlbHNlIGlmICh0aGlzLmFwaUtleSAmJiB0aGlzLmFwaVNlY3JldCkge1xyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXHJcbiAgICAgICAgJ3BpbmF0YV9hcGlfa2V5JzogdGhpcy5hcGlLZXksXHJcbiAgICAgICAgJ3BpbmF0YV9zZWNyZXRfYXBpX2tleSc6IHRoaXMuYXBpU2VjcmV0XHJcbiAgICAgIH07XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1BpbmF0YSBjcmVkZW50aWFscyBub3QgY29uZmlndXJlZCcpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogU3RvcmUgZGF0YSBvbiBQaW5hdGEgSVBGU1xyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBrZXlOYW1lIC0gVW5pcXVlIGtleSBmb3IgdGhlIGRhdGFcclxuICAgKiBAcGFyYW0ge29iamVjdH0gZGF0YSAtIERhdGEgdG8gc3RvcmVcclxuICAgKiBAcGFyYW0ge29iamVjdH0gbWV0YWRhdGEgLSBPcHRpb25hbCBtZXRhZGF0YSBmb3IgdGhlIHBpblxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPG9iamVjdD59IC0gUmVzcG9uc2UgZnJvbSBQaW5hdGFcclxuICAgKi9cclxuICBhc3luYyBzdG9yZURhdGEoa2V5TmFtZSwgZGF0YSwgbWV0YWRhdGEgPSB7fSkge1xyXG4gICAgdHJ5IHtcclxuICAgICAgaWYgKCF0aGlzLmlzQ29uZmlndXJlZCgpKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdQaW5hdGEgY3JlZGVudGlhbHMgbm90IGNvbmZpZ3VyZWQnKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gR2VuZXJhdGUgYSB1bmlxdWUgaWRlbnRpZmllciBmb3IgdGhlIHRyYW5zYWN0aW9uXHJcbiAgICAgIGNvbnN0IHVuaXF1ZUlkID0gYCR7a2V5TmFtZX1fJHtEYXRlLm5vdygpfWA7XHJcbiAgICAgIFxyXG4gICAgICAvLyBQcmVwYXJlIHRoZSBkYXRhIGZvciBQaW5hdGFcclxuICAgICAgY29uc3QgcGluYXRhQm9keSA9IHtcclxuICAgICAgICBwaW5hdGFDb250ZW50OiBkYXRhLFxyXG4gICAgICAgIHBpbmF0YU1ldGFkYXRhOiB7XHJcbiAgICAgICAgICBuYW1lOiB1bmlxdWVJZCxcclxuICAgICAgICAgIGtleXZhbHVlczoge1xyXG4gICAgICAgICAgICB1c2VySWQ6IGRhdGEudXNlcklkIHx8ICdhbm9ueW1vdXMnLFxyXG4gICAgICAgICAgICB0eXBlOiBkYXRhLnR5cGUgfHwgJ2NvbnZlcnNhdGlvbicsXHJcbiAgICAgICAgICAgIHRpbWVzdGFtcDogRGF0ZS5ub3coKSxcclxuICAgICAgICAgICAgLi4ubWV0YWRhdGFcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH07XHJcblxyXG4gICAgICAvLyBVcGxvYWQgdG8gUGluYXRhXHJcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgYXhpb3MucG9zdChcclxuICAgICAgICBgJHt0aGlzLmFwaVVybH0vcGlubmluZy9waW5KU09OVG9JUEZTYCxcclxuICAgICAgICBwaW5hdGFCb2R5LFxyXG4gICAgICAgIHsgaGVhZGVyczogdGhpcy5nZXRIZWFkZXJzKCkgfVxyXG4gICAgICApO1xyXG5cclxuICAgICAgcmV0dXJuIHJlc3BvbnNlLmRhdGE7XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICBjb25zb2xlLmVycm9yKCdGYWlsZWQgdG8gc3RvcmUgZGF0YSBvbiBQaW5hdGE6JywgZXJyb3I/LnJlc3BvbnNlPy5kYXRhIHx8IGVycm9yPy5tZXNzYWdlIHx8IGVycm9yKTtcclxuICAgICAgdGhyb3cgZXJyb3I7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBHZXQgZGF0YSBmcm9tIFBpbmF0YSBJUEZTXHJcbiAgICogQHBhcmFtIHtzdHJpbmd9IGlwZnNIYXNoIC0gSVBGUyBoYXNoIHRvIHJldHJpZXZlXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8b2JqZWN0Pn0gLSBSZXRyaWV2ZWQgZGF0YVxyXG4gICAqL1xyXG4gIGFzeW5jIGdldERhdGEoaXBmc0hhc2gpIHtcclxuICAgIHRyeSB7XHJcbiAgICAgIGlmICghaXBmc0hhc2gpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0lQRlMgaGFzaCBpcyByZXF1aXJlZCcpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBGZXRjaCBkYXRhIGZyb20gUGluYXRhIEdhdGV3YXlcclxuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBheGlvcy5nZXQoYCR7dGhpcy5nYXRld2F5fSR7aXBmc0hhc2h9YCk7XHJcbiAgICAgIHJldHVybiByZXNwb25zZS5kYXRhO1xyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgY29uc29sZS5lcnJvcihgRmFpbGVkIHRvIGdldCBkYXRhIGZyb20gUGluYXRhICgke2lwZnNIYXNofSk6YCwgZXJyb3I/Lm1lc3NhZ2UgfHwgZXJyb3IpO1xyXG4gICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEdldCBoaXN0b3J5IG9mIHBpbnMgZm9yIGEgdXNlclxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB1c2VySWQgLSBVc2VyIElEIHRvIGdldCBoaXN0b3J5IGZvclxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPEFycmF5Pn0gLSBBcnJheSBvZiBwaW5zXHJcbiAgICovXHJcbiAgYXN5bmMgZ2V0SGlzdG9yeSh1c2VySWQpIHtcclxuICAgIHRyeSB7XHJcbiAgICAgIGlmICghdGhpcy5pc0NvbmZpZ3VyZWQoKSkge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignUGluYXRhIGNyZWRlbnRpYWxzIG5vdCBjb25maWd1cmVkJyk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmICghdXNlcklkKSB7XHJcbiAgICAgICAgcmV0dXJuIFtdO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBRdWVyeSBQaW5hdGEgZm9yIHBpbnMgd2l0aCB0aGUgdXNlcidzIElEXHJcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgYXhpb3MuZ2V0KFxyXG4gICAgICAgIGAke3RoaXMuYXBpVXJsfS9kYXRhL3Bpbkxpc3Q/bWV0YWRhdGFba2V5dmFsdWVzXVt1c2VySWRdPXtcInZhbHVlXCI6XCIke3VzZXJJZH1cIixcIm9wXCI6XCJlcVwifSZzdGF0dXM9cGlubmVkYCxcclxuICAgICAgICB7IGhlYWRlcnM6IHRoaXMuZ2V0SGVhZGVycygpIH1cclxuICAgICAgKTtcclxuXHJcbiAgICAgIHJldHVybiByZXNwb25zZS5kYXRhLnJvd3MgfHwgW107XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICBjb25zb2xlLmVycm9yKGBGYWlsZWQgdG8gZ2V0IGhpc3RvcnkgZnJvbSBQaW5hdGEgZm9yIHVzZXIgJHt1c2VySWR9OmAsIGVycm9yPy5yZXNwb25zZT8uZGF0YSB8fCBlcnJvcj8ubWVzc2FnZSB8fCBlcnJvcik7XHJcbiAgICAgIHJldHVybiBbXTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFJlbW92ZSBkYXRhIGZyb20gUGluYXRhIElQRlNcclxuICAgKiBAcGFyYW0ge3N0cmluZ30gaXBmc0hhc2ggLSBJUEZTIGhhc2ggdG8gcmVtb3ZlXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8b2JqZWN0Pn0gLSBSZXNwb25zZSBmcm9tIFBpbmF0YVxyXG4gICAqL1xyXG4gIGFzeW5jIHJlbW92ZURhdGEoaXBmc0hhc2gpIHtcclxuICAgIHRyeSB7XHJcbiAgICAgIGlmICghdGhpcy5pc0NvbmZpZ3VyZWQoKSkge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignUGluYXRhIGNyZWRlbnRpYWxzIG5vdCBjb25maWd1cmVkJyk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmICghaXBmc0hhc2gpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0lQRlMgaGFzaCBpcyByZXF1aXJlZCcpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBVbnBpbiBmcm9tIFBpbmF0YVxyXG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGF4aW9zLmRlbGV0ZShcclxuICAgICAgICBgJHt0aGlzLmFwaVVybH0vcGlubmluZy91bnBpbi8ke2lwZnNIYXNofWAsXHJcbiAgICAgICAgeyBoZWFkZXJzOiB0aGlzLmdldEhlYWRlcnMoKSB9XHJcbiAgICAgICk7XHJcblxyXG4gICAgICByZXR1cm4geyBzdWNjZXNzOiB0cnVlLCBkYXRhOiByZXNwb25zZS5kYXRhIH07XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICBjb25zb2xlLmVycm9yKGBGYWlsZWQgdG8gcmVtb3ZlIGRhdGEgZnJvbSBQaW5hdGEgKCR7aXBmc0hhc2h9KTpgLCBlcnJvcj8ucmVzcG9uc2U/LmRhdGEgfHwgZXJyb3I/Lm1lc3NhZ2UgfHwgZXJyb3IpO1xyXG4gICAgICBcclxuICAgICAgLy8gSGFuZGxlIGNvbW1vbiBQaW5hdGEgZXJyb3IgY2FzZXM6IFxyXG4gICAgICAvLyAxLiA0MDQgLSBQaW4gZG9lc24ndCBleGlzdFxyXG4gICAgICAvLyAyLiA0MDAgd2l0aCBcIkNVUlJFTlRfVVNFUl9IQVNfTk9UX1BJTk5FRF9DSURcIiAtIFVzZXIgZG9lc24ndCBoYXZlIHBlcm1pc3Npb24gdG8gdW5waW5cclxuICAgICAgaWYgKGVycm9yPy5yZXNwb25zZT8uc3RhdHVzID09PSA0MDQgfHwgXHJcbiAgICAgICAgICAoZXJyb3I/LnJlc3BvbnNlPy5zdGF0dXMgPT09IDQwMCAmJiBcclxuICAgICAgICAgICBlcnJvcj8ucmVzcG9uc2U/LmRhdGE/LmVycm9yPy5yZWFzb24gPT09ICdDVVJSRU5UX1VTRVJfSEFTX05PVF9QSU5ORURfQ0lEJykpIHtcclxuICAgICAgICBjb25zb2xlLmxvZyhgUGluICR7aXBmc0hhc2h9IG5vdCBmb3VuZCBvciBub3Qgb3duZWQgYnkgY3VycmVudCB1c2VyLiBDb25zaWRlcmluZyBpdCByZW1vdmVkLmApO1xyXG4gICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IHRydWUsIG1lc3NhZ2U6ICdQaW4gbm90IGZvdW5kIG9yIG5vdCBvd25lZCBieSBjdXJyZW50IHVzZXInIH07XHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgIHRocm93IGVycm9yO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogVGVzdCB0aGUgUGluYXRhIGNvbm5lY3Rpb25cclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxib29sZWFuPn0gLSBXaGV0aGVyIHRoZSBjb25uZWN0aW9uIHdhcyBzdWNjZXNzZnVsXHJcbiAgICovXHJcbiAgYXN5bmMgdGVzdENvbm5lY3Rpb24oKSB7XHJcbiAgICB0cnkge1xyXG4gICAgICBpZiAoIXRoaXMuaXNDb25maWd1cmVkKCkpIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIFRlc3QgdGhlIGNvbm5lY3Rpb24gYnkgZ2V0dGluZyB0aGUgcGluIGNvdW50XHJcbiAgICAgIGF3YWl0IGF4aW9zLmdldChcclxuICAgICAgICBgJHt0aGlzLmFwaVVybH0vZGF0YS91c2VyUGlubmVkRGF0YVRvdGFsYCxcclxuICAgICAgICB7IGhlYWRlcnM6IHRoaXMuZ2V0SGVhZGVycygpIH1cclxuICAgICAgKTtcclxuXHJcbiAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgY29uc29sZS5lcnJvcignUGluYXRhIGNvbm5lY3Rpb24gdGVzdCBmYWlsZWQ6JywgZXJyb3I/LnJlc3BvbnNlPy5kYXRhIHx8IGVycm9yPy5tZXNzYWdlIHx8IGVycm9yKTtcclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogR2V0IGFsbCBwaW5zIGZyb20gUGluYXRhIHJlZ2FyZGxlc3Mgb2YgdXNlciBJRFxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPEFycmF5Pn0gLSBBcnJheSBvZiBwaW5zXHJcbiAgICovXHJcbiAgYXN5bmMgZ2V0QWxsUGlucygpIHtcclxuICAgIHRyeSB7XHJcbiAgICAgIGlmICghdGhpcy5pc0NvbmZpZ3VyZWQoKSkge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignUGluYXRhIGNyZWRlbnRpYWxzIG5vdCBjb25maWd1cmVkJyk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIFF1ZXJ5IFBpbmF0YSBmb3IgYWxsIHBpbnNcclxuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBheGlvcy5nZXQoXHJcbiAgICAgICAgYCR7dGhpcy5hcGlVcmx9L2RhdGEvcGluTGlzdD9zdGF0dXM9cGlubmVkYCxcclxuICAgICAgICB7IGhlYWRlcnM6IHRoaXMuZ2V0SGVhZGVycygpIH1cclxuICAgICAgKTtcclxuXHJcbiAgICAgIHJldHVybiByZXNwb25zZS5kYXRhLnJvd3MgfHwgW107XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICBjb25zb2xlLmVycm9yKGBGYWlsZWQgdG8gZ2V0IGFsbCBwaW5zIGZyb20gUGluYXRhOmAsIGVycm9yPy5yZXNwb25zZT8uZGF0YSB8fCBlcnJvcj8ubWVzc2FnZSB8fCBlcnJvcik7XHJcbiAgICAgIHJldHVybiBbXTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbmNvbnN0IHBpbmF0YVNlcnZpY2UgPSBuZXcgUGluYXRhU2VydmljZSgpO1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSB7IHBpbmF0YVNlcnZpY2UgfTsgIl0sIm5hbWVzIjpbImF4aW9zIiwicmVxdWlyZSIsIlBpbmF0YVNlcnZpY2UiLCJjb25zdHJ1Y3RvciIsImFwaUtleSIsInByb2Nlc3MiLCJlbnYiLCJQSU5BVEFfQVBJX0tFWSIsImFwaVNlY3JldCIsIlBJTkFUQV9BUElfU0VDUkVUIiwiand0IiwiUElOQVRBX0pXVCIsImFwaVVybCIsImdhdGV3YXkiLCJpc0NvbmZpZ3VyZWQiLCJnZXRIZWFkZXJzIiwiRXJyb3IiLCJzdG9yZURhdGEiLCJrZXlOYW1lIiwiZGF0YSIsIm1ldGFkYXRhIiwidW5pcXVlSWQiLCJEYXRlIiwibm93IiwicGluYXRhQm9keSIsInBpbmF0YUNvbnRlbnQiLCJwaW5hdGFNZXRhZGF0YSIsIm5hbWUiLCJrZXl2YWx1ZXMiLCJ1c2VySWQiLCJ0eXBlIiwidGltZXN0YW1wIiwicmVzcG9uc2UiLCJwb3N0IiwiaGVhZGVycyIsImVycm9yIiwiY29uc29sZSIsIm1lc3NhZ2UiLCJnZXREYXRhIiwiaXBmc0hhc2giLCJnZXQiLCJnZXRIaXN0b3J5Iiwicm93cyIsInJlbW92ZURhdGEiLCJkZWxldGUiLCJzdWNjZXNzIiwic3RhdHVzIiwicmVhc29uIiwibG9nIiwidGVzdENvbm5lY3Rpb24iLCJnZXRBbGxQaW5zIiwicGluYXRhU2VydmljZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api-node)/./lib/services/pinata-service.js\n");

/***/ }),

/***/ "(api-node)/./lib/user-profile-service.js":
/*!*************************************!*\
  !*** ./lib/user-profile-service.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   userProfileService: () => (/* binding */ userProfileService)\n/* harmony export */ });\n/* harmony import */ var _services_pinata_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./services/pinata-service */ \"(api-node)/./lib/services/pinata-service.js\");\n/* harmony import */ var _services_pinata_service__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_services_pinata_service__WEBPACK_IMPORTED_MODULE_0__);\n/**\r\n * Service for managing user profiles using Pinata IPFS\r\n * All user data is stored on IPFS via Pinata instead of MongoDB\r\n */ \n// Helper function to generate unique IDs\nfunction generateUserId() {\n    return Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);\n}\nconst userProfileService = {\n    /**\r\n   * Get user profile by ID\r\n   * @param {string} userId - User ID\r\n   * @returns {Promise<Object>} - User profile\r\n   */ async getUserProfile (userId) {\n        try {\n            if (!userId) {\n                throw new Error('User ID is required');\n            }\n            // Get user pins from Pinata\n            const pins = await _services_pinata_service__WEBPACK_IMPORTED_MODULE_0__.pinataService.getHistory(userId);\n            // Find user profile pin\n            const userProfilePin = pins.find((pin)=>{\n                const metadata = pin.metadata?.keyvalues;\n                return metadata?.type === 'user_profile' && metadata?.userId === userId;\n            });\n            if (!userProfilePin) {\n                // If no profile exists, create a default one\n                const defaultProfile = {\n                    _id: userId,\n                    userId: userId,\n                    name: 'User',\n                    email: 'user@example.com',\n                    recommendations: [],\n                    createdAt: new Date(),\n                    updatedAt: new Date(),\n                    type: 'user_profile'\n                };\n                // Store default profile\n                const response = await _services_pinata_service__WEBPACK_IMPORTED_MODULE_0__.pinataService.storeData(`user_${userId}`, defaultProfile, {\n                    userId,\n                    type: 'user_profile'\n                });\n                // Return the default profile\n                defaultProfile.ipfsHash = response.IpfsHash;\n                return defaultProfile;\n            }\n            // Get profile data from Pinata\n            const profile = await _services_pinata_service__WEBPACK_IMPORTED_MODULE_0__.pinataService.getData(userProfilePin.ipfs_pin_hash);\n            if (!profile) {\n                throw new Error('Failed to retrieve user profile from Pinata');\n            }\n            // Add IPFS hash to profile\n            profile.ipfsHash = userProfilePin.ipfs_pin_hash;\n            return profile;\n        } catch (error) {\n            console.error('Error fetching user profile from Pinata:', error);\n            // Return a fallback basic profile\n            return {\n                _id: userId,\n                userId: userId,\n                name: 'User',\n                recommendations: [],\n                createdAt: new Date(),\n                updatedAt: new Date()\n            };\n        }\n    },\n    /**\r\n   * Update user recommendations\r\n   * @param {string} userId - User ID\r\n   * @param {Array} recommendations - Array of recommendation objects\r\n   * @returns {Promise<Object>} - Updated user\r\n   */ async updateRecommendations (userId, recommendations) {\n        try {\n            if (!userId) {\n                throw new Error('User ID is required');\n            }\n            if (!recommendations || !Array.isArray(recommendations)) {\n                throw new Error('Recommendations must be an array');\n            }\n            // Get current user profile\n            const profile = await this.getUserProfile(userId);\n            // Get user pins from Pinata\n            const pins = await _services_pinata_service__WEBPACK_IMPORTED_MODULE_0__.pinataService.getHistory(userId);\n            // Find user profile pin\n            const userProfilePin = pins.find((pin)=>{\n                const metadata = pin.metadata?.keyvalues;\n                return metadata?.type === 'user_profile' && metadata?.userId === userId;\n            });\n            // Update profile with new recommendations\n            profile.recommendations = recommendations;\n            profile.lastRecommendationUpdate = new Date();\n            profile.updatedAt = new Date();\n            // Store updated profile to Pinata\n            const response = await _services_pinata_service__WEBPACK_IMPORTED_MODULE_0__.pinataService.storeData(`user_${userId}`, profile, {\n                userId,\n                type: 'user_profile'\n            });\n            // If we had a previous pin, remove it\n            if (userProfilePin) {\n                await _services_pinata_service__WEBPACK_IMPORTED_MODULE_0__.pinataService.removeData(userProfilePin.ipfs_pin_hash);\n            }\n            return {\n                success: true,\n                profile: {\n                    ...profile,\n                    ipfsHash: response.IpfsHash\n                }\n            };\n        } catch (error) {\n            console.error('Error updating recommendations on Pinata:', error);\n            throw error;\n        }\n    },\n    /**\r\n   * Create or update user profile\r\n   * @param {Object} userData - User data including credentials\r\n   * @returns {Promise<Object>} - Created/updated user\r\n   */ async createOrUpdateUser (userData) {\n        try {\n            if (!userData) {\n                throw new Error('User data is required');\n            }\n            let userId = userData.userId || userData._id;\n            // If no userId, generate one\n            if (!userId) {\n                userId = generateUserId();\n                userData._id = userId;\n                userData.userId = userId;\n            }\n            // Get user pins from Pinata\n            const pins = await _services_pinata_service__WEBPACK_IMPORTED_MODULE_0__.pinataService.getHistory(userId);\n            // Find user profile pin\n            const userProfilePin = pins.find((pin)=>{\n                const metadata = pin.metadata?.keyvalues;\n                return metadata?.type === 'user_profile' && metadata?.userId === userId;\n            });\n            // Set timestamps\n            userData.updatedAt = new Date();\n            if (!userData.createdAt) {\n                userData.createdAt = new Date();\n            }\n            // Set type for Pinata metadata\n            userData.type = 'user_profile';\n            // Store profile to Pinata\n            const response = await _services_pinata_service__WEBPACK_IMPORTED_MODULE_0__.pinataService.storeData(`user_${userId}`, userData, {\n                userId,\n                type: 'user_profile'\n            });\n            // If we had a previous pin, remove it\n            if (userProfilePin) {\n                await _services_pinata_service__WEBPACK_IMPORTED_MODULE_0__.pinataService.removeData(userProfilePin.ipfs_pin_hash);\n            }\n            return {\n                ...userData,\n                ipfsHash: response.IpfsHash\n            };\n        } catch (error) {\n            console.error('Error creating/updating user on Pinata:', error);\n            throw error;\n        }\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api-node)/./lib/user-profile-service.js\n");

/***/ }),

/***/ "(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fai%2Flocal-chat&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cai%5Clocal-chat.js&middlewareConfigBase64=e30%3D!":
/*!************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fai%2Flocal-chat&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cai%5Clocal-chat.js&middlewareConfigBase64=e30%3D! ***!
  \************************************************************************************************************************************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   routeModule: () => (/* binding */ routeModule)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/route-modules/pages-api/module.compiled */ \"(api-node)/./node_modules/next/dist/server/route-modules/pages-api/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(api-node)/./node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"(api-node)/./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var _pages_api_ai_local_chat_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./pages\\api\\ai\\local-chat.js */ \"(api-node)/./pages/api/ai/local-chat.js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_pages_api_ai_local_chat_js__WEBPACK_IMPORTED_MODULE_3__]);\n_pages_api_ai_local_chat_js__WEBPACK_IMPORTED_MODULE_3__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n// Import the userland code.\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_ai_local_chat_js__WEBPACK_IMPORTED_MODULE_3__, 'default'));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_ai_local_chat_js__WEBPACK_IMPORTED_MODULE_3__, 'config');\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: \"/api/ai/local-chat\",\n        pathname: \"/api/ai/local-chat\",\n        // The following aren't used in production.\n        bundlePath: '',\n        filename: ''\n    },\n    userland: _pages_api_ai_local_chat_js__WEBPACK_IMPORTED_MODULE_3__\n});\n\n//# sourceMappingURL=pages-api.js.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaS1ub2RlKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYnVpbGQvd2VicGFjay9sb2FkZXJzL25leHQtcm91dGUtbG9hZGVyL2luZGV4LmpzP2tpbmQ9UEFHRVNfQVBJJnBhZ2U9JTJGYXBpJTJGYWklMkZsb2NhbC1jaGF0JnByZWZlcnJlZFJlZ2lvbj0mYWJzb2x1dGVQYWdlUGF0aD0uJTJGcGFnZXMlNUNhcGklNUNhaSU1Q2xvY2FsLWNoYXQuanMmbWlkZGxld2FyZUNvbmZpZ0Jhc2U2ND1lMzAlM0QhIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O0FBQStGO0FBQ3ZDO0FBQ0U7QUFDMUQ7QUFDNEQ7QUFDNUQ7QUFDQSxpRUFBZSx3RUFBSyxDQUFDLHdEQUFRLFlBQVksRUFBQztBQUMxQztBQUNPLGVBQWUsd0VBQUssQ0FBQyx3REFBUTtBQUNwQztBQUNPLHdCQUF3Qix5R0FBbUI7QUFDbEQ7QUFDQSxjQUFjLGtFQUFTO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsWUFBWTtBQUNaLENBQUM7O0FBRUQscUMiLCJzb3VyY2VzIjpbIiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQYWdlc0FQSVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvcm91dGUtbW9kdWxlcy9wYWdlcy1hcGkvbW9kdWxlLmNvbXBpbGVkXCI7XG5pbXBvcnQgeyBSb3V0ZUtpbmQgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9yb3V0ZS1raW5kXCI7XG5pbXBvcnQgeyBob2lzdCB9IGZyb20gXCJuZXh0L2Rpc3QvYnVpbGQvdGVtcGxhdGVzL2hlbHBlcnNcIjtcbi8vIEltcG9ydCB0aGUgdXNlcmxhbmQgY29kZS5cbmltcG9ydCAqIGFzIHVzZXJsYW5kIGZyb20gXCIuL3BhZ2VzXFxcXGFwaVxcXFxhaVxcXFxsb2NhbC1jaGF0LmpzXCI7XG4vLyBSZS1leHBvcnQgdGhlIGhhbmRsZXIgKHNob3VsZCBiZSB0aGUgZGVmYXVsdCBleHBvcnQpLlxuZXhwb3J0IGRlZmF1bHQgaG9pc3QodXNlcmxhbmQsICdkZWZhdWx0Jyk7XG4vLyBSZS1leHBvcnQgY29uZmlnLlxuZXhwb3J0IGNvbnN0IGNvbmZpZyA9IGhvaXN0KHVzZXJsYW5kLCAnY29uZmlnJyk7XG4vLyBDcmVhdGUgYW5kIGV4cG9ydCB0aGUgcm91dGUgbW9kdWxlIHRoYXQgd2lsbCBiZSBjb25zdW1lZC5cbmV4cG9ydCBjb25zdCByb3V0ZU1vZHVsZSA9IG5ldyBQYWdlc0FQSVJvdXRlTW9kdWxlKHtcbiAgICBkZWZpbml0aW9uOiB7XG4gICAgICAgIGtpbmQ6IFJvdXRlS2luZC5QQUdFU19BUEksXG4gICAgICAgIHBhZ2U6IFwiL2FwaS9haS9sb2NhbC1jaGF0XCIsXG4gICAgICAgIHBhdGhuYW1lOiBcIi9hcGkvYWkvbG9jYWwtY2hhdFwiLFxuICAgICAgICAvLyBUaGUgZm9sbG93aW5nIGFyZW4ndCB1c2VkIGluIHByb2R1Y3Rpb24uXG4gICAgICAgIGJ1bmRsZVBhdGg6ICcnLFxuICAgICAgICBmaWxlbmFtZTogJydcbiAgICB9LFxuICAgIHVzZXJsYW5kXG59KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGFnZXMtYXBpLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fai%2Flocal-chat&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cai%5Clocal-chat.js&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "(api-node)/./pages/api/ai/local-chat.js":
/*!************************************!*\
  !*** ./pages/api/ai/local-chat.js ***!
  \************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var _lib_local_ai_middleware__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/local-ai-middleware */ \"(api-node)/./lib/local-ai-middleware.js\");\n/* harmony import */ var _lib_services_pinata_conversation_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../lib/services/pinata-conversation-service */ \"(api-node)/./lib/services/pinata-conversation-service.js\");\n/* harmony import */ var _lib_user_profile_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../lib/user-profile-service */ \"(api-node)/./lib/user-profile-service.js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_lib_local_ai_middleware__WEBPACK_IMPORTED_MODULE_0__]);\n_lib_local_ai_middleware__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n/**\r\n * API handler for local chat interactions\r\n * Streamlined to focus on Ollama chat processing and Pinata IPFS storage\r\n */ \n\n\n// Sample recommendation data for fallback\nconst SAMPLE_RECOMMENDATIONS = [\n    {\n        type: 'exercise',\n        title: 'Deep Breathing Exercise',\n        description: 'Take 5 deep breaths, inhaling for 4 seconds and exhaling for 6 seconds.',\n        actionUrl: '/resources/exercises/breathing',\n        actionText: 'Start Exercise'\n    },\n    {\n        type: 'resource',\n        title: 'Understanding Anxiety',\n        description: 'Learn about the causes and effects of anxiety in everyday life.',\n        actionUrl: '/resources/articles/anxiety',\n        actionText: 'Read Article'\n    },\n    {\n        type: 'checkin',\n        title: 'Mood Check-in',\n        description: \"Record how you're feeling right now to track your emotional patterns.\",\n        actionUrl: '/checkin',\n        actionText: 'Check In'\n    }\n];\nasync function handler(req, res) {\n    if (req.method !== 'POST') {\n        return res.status(405).json({\n            error: 'Method not allowed'\n        });\n    }\n    try {\n        const userId = req.body.userId || req.query.userId;\n        if (!userId) {\n            return res.status(401).json({\n                error: 'User ID is required'\n            });\n        }\n        // Get basic user info if available, but don't require it\n        let userProfile = null;\n        if (userId && userId !== 'anonymous') {\n            try {\n                userProfile = await _lib_user_profile_service__WEBPACK_IMPORTED_MODULE_2__.userProfileService.getUserProfile(userId);\n            } catch (error) {\n                console.warn('Error fetching user profile, continuing without it:', error.message);\n            }\n        }\n        const { message, conversationId, history } = req.body;\n        if (!message || !message.content) {\n            return res.status(400).json({\n                error: 'Message content is required'\n            });\n        }\n        console.log('Local chat API called with message:', message.content.substring(0, 50) + '...');\n        // Extract chat history if available\n        const chatHistory = history || [];\n        // Process the message through LLaMA AI middleware\n        const processedResult = await _lib_local_ai_middleware__WEBPACK_IMPORTED_MODULE_0__.localAiMiddleware.processInput(message.content, chatHistory, userProfile);\n        // Setup message objects for Pinata storage\n        const userMessage = {\n            role: 'user',\n            content: message.content,\n            timestamp: new Date()\n        };\n        const aiMessage = {\n            role: 'assistant',\n            content: processedResult.message,\n            sentiment: processedResult.sentiment,\n            emotions: processedResult.emotions,\n            timestamp: new Date()\n        };\n        // Handle conversation storage\n        let conversation;\n        try {\n            if (conversationId) {\n                // Add user message to existing conversation\n                await _lib_services_pinata_conversation_service__WEBPACK_IMPORTED_MODULE_1__.pinataConversationService.addMessage(conversationId, userId, userMessage);\n                // Add AI response\n                conversation = await _lib_services_pinata_conversation_service__WEBPACK_IMPORTED_MODULE_1__.pinataConversationService.addMessage(conversationId, userId, aiMessage);\n                console.log(`Added messages to existing conversation: ${conversationId}`);\n            } else {\n                // Create new conversation title from message content\n                const title = message.content.length > 30 ? message.content.substring(0, 30) + '...' : message.content;\n                // Create new conversation with both messages\n                conversation = await _lib_services_pinata_conversation_service__WEBPACK_IMPORTED_MODULE_1__.pinataConversationService.createConversation(userId, title, [\n                    userMessage,\n                    aiMessage\n                ]);\n                console.log(`Created new conversation: ${conversation._id}`);\n            }\n        } catch (storageError) {\n            console.error('Error storing conversation in Pinata:', storageError);\n        // Continue even if storage fails - prioritize the user getting a response\n        }\n        // Update recommendations if available\n        if (processedResult.recommendations && userProfile) {\n            try {\n                await _lib_user_profile_service__WEBPACK_IMPORTED_MODULE_2__.userProfileService.updateRecommendations(userId, processedResult.recommendations);\n            } catch (error) {\n                console.error('Error updating recommendations:', error);\n            // Continue without updating recommendations\n            }\n        }\n        // Return the response to the client\n        return res.status(200).json({\n            conversationId: conversation?._id || 'fallback_id',\n            message: aiMessage,\n            sentiment: processedResult.sentiment,\n            emotions: processedResult.emotions,\n            recommendations: processedResult.recommendations || []\n        });\n    } catch (error) {\n        console.error('Error in local chat API:', error);\n        return res.status(500).json({\n            error: 'An error occurred processing your request',\n            message: {\n                role: 'assistant',\n                content: \"I'm sorry, I'm having trouble processing your request right now. Please try again later.\"\n            }\n        });\n    }\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api-node)/./pages/api/ai/local-chat.js\n");

/***/ }),

/***/ "axios?6fac":
/*!************************!*\
  !*** external "axios" ***!
  \************************/
/***/ ((module) => {

module.exports = require("axios");

/***/ }),

/***/ "axios?daaa":
/*!************************!*\
  !*** external "axios" ***!
  \************************/
/***/ ((module) => {

module.exports = import("axios");;

/***/ }),

/***/ "next/dist/compiled/next-server/pages-api.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages-api.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages-api.runtime.dev.js");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fai%2Flocal-chat&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cai%5Clocal-chat.js&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();