"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/ai/local-chat";
exports.ids = ["pages/api/ai/local-chat"];
exports.modules = {

/***/ "(api-node)/./lib/llama-service.js":
/*!******************************!*\
  !*** ./lib/llama-service.js ***!
  \******************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   llamaService: () => (/* binding */ llamaService)\n/* harmony export */ });\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! axios */ \"axios\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([axios__WEBPACK_IMPORTED_MODULE_0__]);\naxios__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n// Configuration for local LLaMA 3.2 model\n// Use IPv4 format to avoid IPv6 connection issues\nconst LLAMA_API_URL = \"http://127.0.0.1:11434\" || 0;\nconst LLAMA_MODEL_NAME = \"llama3.2:latest\" || 0;\n/**\r\n * Service to interact with locally hosted LLaMA 3.2 model\r\n */ const llamaService = {\n    /**\r\n   * Process a chat message using local LLaMA 3.2 model\r\n   * @param {string} message - User's message\r\n   * @param {Array} history - Previous chat history for context\r\n   * @returns {Promise<{response: string}>}\r\n   */ async processMessage (message, history = []) {\n        try {\n            // Format history in a way LLaMA expects\n            const formattedHistory = history.map((msg)=>({\n                    role: msg.role || 'user',\n                    content: msg.content\n                }));\n            // Add system message to enhance the response with sentiment\n            formattedHistory.unshift({\n                role: 'system',\n                content: `You are a mental health assistant. When responding, identify the user's emotional state and be empathetic. Your response should be clear and concise.`\n            });\n            // Add current message to history\n            formattedHistory.push({\n                role: 'user',\n                content: message\n            });\n            console.log('Calling LLaMA API for chat response');\n            // Call local LLaMA API\n            const response = await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].post(`${LLAMA_API_URL}/v1/chat/completions`, {\n                messages: formattedHistory,\n                model: LLAMA_MODEL_NAME,\n                temperature: 0.7,\n                max_tokens: 1000,\n                stream: false\n            }, {\n                // Configure timeout and headers\n                timeout: 60000,\n                headers: {\n                    'Content-Type': 'application/json'\n                }\n            });\n            console.log('LLaMA response received');\n            return {\n                response: response.data.choices[0].message.content\n            };\n        } catch (error) {\n            console.error('Error calling local LLaMA model:', error);\n            if (error.response) {\n                console.error('Error data:', error.response.data);\n                console.error('Error status:', error.response.status);\n            } else if (error.request) {\n                console.error('No response received:', error.request);\n            }\n            throw new Error('Failed to get response from LLaMA model');\n        }\n    },\n    /**\r\n   * Analyze sentiment in a message - simplified version\r\n   * @param {string} message - Message to analyze\r\n   * @returns {Promise<{sentiment: string, emotions: Object}>}\r\n   */ async quickAnalyzeSentiment (message) {\n        try {\n            // Simple pattern matching for quick sentiment analysis\n            const lowerMessage = message.toLowerCase();\n            let sentiment = 'neutral';\n            let primaryEmotion = 'neutral';\n            let confidence = 0.6;\n            // Simple keyword matching for quick analysis\n            const positiveWords = [\n                'happy',\n                'glad',\n                'great',\n                'good',\n                'positive',\n                'wonderful',\n                'excited',\n                'love',\n                'enjoy'\n            ];\n            const negativeWords = [\n                'sad',\n                'upset',\n                'angry',\n                'frustrated',\n                'depressed',\n                'anxious',\n                'worried',\n                'stress',\n                'fear'\n            ];\n            let positiveCount = 0;\n            let negativeCount = 0;\n            positiveWords.forEach((word)=>{\n                if (lowerMessage.includes(word)) positiveCount++;\n            });\n            negativeWords.forEach((word)=>{\n                if (lowerMessage.includes(word)) negativeCount++;\n            });\n            if (positiveCount > negativeCount) {\n                sentiment = 'positive';\n                primaryEmotion = 'happy';\n                confidence = 0.7 + 0.1 * Math.min(positiveCount, 3);\n            } else if (negativeCount > positiveCount) {\n                sentiment = 'negative';\n                // Determine specific negative emotion\n                if (lowerMessage.includes('anxious') || lowerMessage.includes('worry') || lowerMessage.includes('nervous')) {\n                    primaryEmotion = 'anxious';\n                } else if (lowerMessage.includes('sad') || lowerMessage.includes('depress')) {\n                    primaryEmotion = 'sad';\n                } else if (lowerMessage.includes('anger') || lowerMessage.includes('angry') || lowerMessage.includes('frustrat')) {\n                    primaryEmotion = 'angry';\n                } else if (lowerMessage.includes('stress')) {\n                    primaryEmotion = 'stressed';\n                } else {\n                    primaryEmotion = 'sad';\n                }\n                confidence = 0.7 + 0.1 * Math.min(negativeCount, 3);\n            }\n            // Only do full AI sentiment analysis if we couldn't determine from keywords\n            if (positiveCount === 0 && negativeCount === 0) {\n                return this.fullAnalyzeSentiment(message);\n            }\n            return {\n                sentiment: sentiment,\n                emotions: {\n                    primary: primaryEmotion,\n                    confidence: confidence\n                }\n            };\n        } catch (error) {\n            console.error('Error in quick sentiment analysis:', error);\n            return {\n                sentiment: 'neutral',\n                emotions: {\n                    primary: 'neutral',\n                    confidence: 0.5\n                }\n            };\n        }\n    },\n    /**\r\n   * Analyze sentiment in a message using LLaMA - full analysis\r\n   * @param {string} message - Message to analyze\r\n   * @returns {Promise<{sentiment: string, emotions: Object}>}\r\n   */ async fullAnalyzeSentiment (message) {\n        try {\n            // Instead of using completions endpoint, we'll use chat completions\n            // which is more commonly supported in local LLaMA servers\n            const response = await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].post(`${LLAMA_API_URL}/v1/chat/completions`, {\n                messages: [\n                    {\n                        role: \"system\",\n                        content: \"You are a sentiment analysis assistant. Analyze the emotional sentiment of the user's message and respond with only a JSON object with the format: {\\\"sentiment\\\": \\\"positive/negative/neutral\\\", \\\"primary_emotion\\\": \\\"emotion_name\\\", \\\"confidence\\\": 0.X}\"\n                    },\n                    {\n                        role: \"user\",\n                        content: message\n                    }\n                ],\n                model: LLAMA_MODEL_NAME,\n                max_tokens: 100,\n                temperature: 0.1,\n                stream: false\n            }, {\n                timeout: 30000,\n                headers: {\n                    'Content-Type': 'application/json'\n                }\n            });\n            // Parse the JSON response\n            const responseText = response.data.choices[0].message.content.trim();\n            let emotionData;\n            try {\n                // Find JSON object in response if it's wrapped in other text\n                const jsonMatch = responseText.match(/(\\{.*\\})/s);\n                if (jsonMatch) {\n                    emotionData = JSON.parse(jsonMatch[0]);\n                } else {\n                    emotionData = JSON.parse(responseText);\n                }\n            } catch (parseError) {\n                console.error('Error parsing sentiment JSON:', parseError, 'Raw response:', responseText);\n                // Fallback sentiment analysis\n                return {\n                    sentiment: 'neutral',\n                    emotions: {\n                        primary: 'neutral',\n                        confidence: 0.5\n                    }\n                };\n            }\n            return {\n                sentiment: emotionData.sentiment || 'neutral',\n                emotions: {\n                    primary: emotionData.primary_emotion || 'neutral',\n                    confidence: emotionData.confidence || 0.5\n                }\n            };\n        } catch (error) {\n            console.error('Error analyzing sentiment with LLaMA:', error);\n            if (error.response) {\n                console.error('Error data:', error.response.data);\n                console.error('Error status:', error.response.status);\n            } else if (error.request) {\n                console.error('No response received:', error.request);\n            }\n            // Instead of throwing the error, return a fallback sentiment\n            return {\n                sentiment: 'neutral',\n                emotions: {\n                    primary: 'neutral',\n                    confidence: 0.5\n                }\n            };\n        }\n    },\n    /**\r\n   * Get predefined recommendations based on emotional state\r\n   * @param {string} emotionalState - Current emotional state\r\n   * @returns {Array} - List of recommendations\r\n   */ getQuickRecommendations (emotionalState) {\n        const recommendations = {\n            // Crisis/distress state\n            distressed: [\n                {\n                    type: 'resource',\n                    title: 'Crisis Support',\n                    description: 'Get immediate help from trained crisis counselors.',\n                    actionUrl: '/crisis',\n                    actionText: 'Get Help Now'\n                },\n                {\n                    type: 'resource',\n                    title: 'Suicide Prevention Resources',\n                    description: 'Find resources and support for suicidal thoughts.',\n                    actionUrl: '/resources/articles/suicide-prevention',\n                    actionText: 'View Resources'\n                },\n                {\n                    type: 'exercise',\n                    title: 'Safety Plan',\n                    description: 'Create a personal safety plan for difficult moments.',\n                    actionUrl: '/resources/exercises/safety-plan',\n                    actionText: 'Create Plan'\n                }\n            ],\n            // Happy state\n            happy: [\n                {\n                    type: 'exercise',\n                    title: 'Gratitude Journal',\n                    description: \"Write down three things you're grateful for to maintain your positive mood.\",\n                    actionUrl: '/resources/exercises/gratitude',\n                    actionText: 'Start Exercise'\n                },\n                {\n                    type: 'resource',\n                    title: 'Positive Psychology',\n                    description: 'Learn how to maintain and cultivate positive emotions.',\n                    actionUrl: '/resources/articles/positive-psychology',\n                    actionText: 'Read Article'\n                }\n            ],\n            // Sad state\n            sad: [\n                {\n                    type: 'exercise',\n                    title: 'Mood Lifting Activities',\n                    description: 'Simple activities that can help improve your mood when feeling down.',\n                    actionUrl: '/resources/exercises/mood-lifting',\n                    actionText: 'View Activities'\n                },\n                {\n                    type: 'resource',\n                    title: 'Understanding Sadness',\n                    description: 'Learn about sadness, its purpose, and healthy ways to process it.',\n                    actionUrl: '/resources/articles/understanding-sadness',\n                    actionText: 'Read Article'\n                },\n                {\n                    type: 'checkin',\n                    title: 'Daily Mood Tracker',\n                    description: 'Track your mood changes to identify patterns and improvements.',\n                    actionUrl: '/checkin',\n                    actionText: 'Start Tracking'\n                }\n            ],\n            // Anxious state\n            anxious: [\n                {\n                    type: 'exercise',\n                    title: 'Deep Breathing',\n                    description: 'A simple breathing exercise to help calm anxiety in the moment.',\n                    actionUrl: '/resources/exercises/deep-breathing',\n                    actionText: 'Start Exercise'\n                },\n                {\n                    type: 'exercise',\n                    title: 'Grounding Technique',\n                    description: 'Use your senses to ground yourself in the present moment.',\n                    actionUrl: '/resources/exercises/grounding',\n                    actionText: 'Try Now'\n                },\n                {\n                    type: 'resource',\n                    title: 'Coping with Anxiety',\n                    description: 'Learn effective strategies for managing anxiety.',\n                    actionUrl: '/resources/articles/anxiety-management',\n                    actionText: 'Read Article'\n                }\n            ],\n            // Stressed state\n            stressed: [\n                {\n                    type: 'exercise',\n                    title: 'Progressive Muscle Relaxation',\n                    description: 'Release physical tension to help reduce stress.',\n                    actionUrl: '/resources/exercises/muscle-relaxation',\n                    actionText: 'Start Exercise'\n                },\n                {\n                    type: 'resource',\n                    title: 'Stress Management',\n                    description: 'Learn effective techniques for managing stress in daily life.',\n                    actionUrl: '/resources/articles/stress-management',\n                    actionText: 'Read Article'\n                },\n                {\n                    type: 'checkin',\n                    title: 'Stress Journal',\n                    description: 'Identify your stress triggers and patterns.',\n                    actionUrl: '/checkin',\n                    actionText: 'Start Journal'\n                }\n            ],\n            // Angry state\n            angry: [\n                {\n                    type: 'exercise',\n                    title: 'Anger Cool-Down',\n                    description: 'Quick techniques to calm down when feeling angry.',\n                    actionUrl: '/resources/exercises/anger-cooldown',\n                    actionText: 'Start Exercise'\n                },\n                {\n                    type: 'resource',\n                    title: 'Healthy Expression of Anger',\n                    description: 'Learn constructive ways to express and process anger.',\n                    actionUrl: '/resources/articles/healthy-anger',\n                    actionText: 'Read Article'\n                }\n            ],\n            // Default/neutral state\n            neutral: [\n                {\n                    type: 'exercise',\n                    title: 'Mindfulness Meditation',\n                    description: 'A simple mindfulness practice to enhance awareness and presence.',\n                    actionUrl: '/resources/exercises/mindfulness',\n                    actionText: 'Start Meditation'\n                },\n                {\n                    type: 'resource',\n                    title: 'Mental Wellness Basics',\n                    description: 'Learn the foundations of maintaining good mental health.',\n                    actionUrl: '/resources/articles/mental-wellness',\n                    actionText: 'Read Article'\n                },\n                {\n                    type: 'checkin',\n                    title: 'Regular Check-In',\n                    description: \"Take a moment to check in with yourself and assess how you're feeling.\",\n                    actionUrl: '/checkin',\n                    actionText: 'Check In'\n                }\n            ]\n        };\n        // Convert emotional state to lowercase and remove any punctuation\n        const normalizedState = emotionalState.toLowerCase().replace(/[^\\w\\s]/gi, '');\n        // Map various emotional states to our predefined categories\n        let category = 'neutral';\n        if ([\n            'happy',\n            'joy',\n            'excited',\n            'content',\n            'pleased'\n        ].includes(normalizedState)) {\n            category = 'happy';\n        } else if ([\n            'sad',\n            'unhappy',\n            'depressed',\n            'down',\n            'blue',\n            'gloomy'\n        ].includes(normalizedState)) {\n            category = 'sad';\n        } else if ([\n            'anxious',\n            'worried',\n            'nervous',\n            'uneasy',\n            'fearful'\n        ].includes(normalizedState)) {\n            category = 'anxious';\n        } else if ([\n            'stressed',\n            'overwhelmed',\n            'pressured',\n            'burdened'\n        ].includes(normalizedState)) {\n            category = 'stressed';\n        } else if ([\n            'angry',\n            'mad',\n            'furious',\n            'irritated',\n            'annoyed'\n        ].includes(normalizedState)) {\n            category = 'angry';\n        } else if ([\n            'distressed',\n            'crisis',\n            'suicidal',\n            'desperate',\n            'hopeless'\n        ].includes(normalizedState)) {\n            category = 'distressed';\n        }\n        // Return recommendations for the identified category or neutral as fallback\n        return recommendations[category] || recommendations.neutral;\n    },\n    /**\r\n   * Generate recommendations based on emotional state (using full AI)\r\n   * This is a more expensive operation so should be used less frequently\r\n   * @param {string} emotionalState - Current emotional state\r\n   * @param {Object} userProfile - User profile information\r\n   * @returns {Promise<Array>} - List of recommendations\r\n   */ async generateRecommendations (emotionalState, userProfile = {}) {\n        try {\n            const userName = userProfile.name || \"the user\";\n            // Again using chat completions instead of completions\n            const response = await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].post(`${LLAMA_API_URL}/v1/chat/completions`, {\n                messages: [\n                    {\n                        role: \"system\",\n                        content: `Generate 3 personalized mental health recommendations for someone who is feeling ${emotionalState}. Each recommendation should have a type (either 'exercise', 'resource', or 'checkin'), a title, a short description, and optionally an actionUrl and actionText. Respond with only a JSON array with the format: [{\"type\": \"exercise/resource/checkin\", \"title\": \"...\", \"description\": \"...\", \"actionUrl\": \"/path\", \"actionText\": \"...\"}]`\n                    },\n                    {\n                        role: \"user\",\n                        content: `I'm ${userName} and I'm feeling ${emotionalState}. What do you recommend?`\n                    }\n                ],\n                model: LLAMA_MODEL_NAME,\n                max_tokens: 500,\n                temperature: 0.7,\n                stream: false\n            }, {\n                timeout: 30000,\n                headers: {\n                    'Content-Type': 'application/json'\n                }\n            });\n            // Parse the JSON response\n            const responseText = response.data.choices[0].message.content.trim();\n            let recommendations;\n            try {\n                // Find JSON array in response if it's wrapped in other text\n                const jsonMatch = responseText.match(/(\\[.*\\])/s);\n                if (jsonMatch) {\n                    recommendations = JSON.parse(jsonMatch[0]);\n                } else {\n                    recommendations = JSON.parse(responseText);\n                }\n            } catch (parseError) {\n                console.error('Error parsing recommendations JSON:', parseError, 'Raw response:', responseText);\n                // Use quick recommendations instead\n                return this.getQuickRecommendations(emotionalState);\n            }\n            return recommendations;\n        } catch (error) {\n            console.error('Error generating recommendations with LLaMA:', error);\n            if (error.response) {\n                console.error('Error data:', error.response.data);\n                console.error('Error status:', error.response.status);\n            } else if (error.request) {\n                console.error('No response received:', error.request);\n            }\n            // Use quick recommendations instead\n            return this.getQuickRecommendations(emotionalState);\n        }\n    }\n};\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api-node)/./lib/llama-service.js\n");

/***/ }),

/***/ "(api-node)/./lib/local-ai-middleware.js":
/*!************************************!*\
  !*** ./lib/local-ai-middleware.js ***!
  \************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   localAiMiddleware: () => (/* binding */ localAiMiddleware)\n/* harmony export */ });\n/* harmony import */ var _llama_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./llama-service */ \"(api-node)/./lib/llama-service.js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_llama_service__WEBPACK_IMPORTED_MODULE_0__]);\n_llama_service__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n/**\r\n * AI Middleware using local LLaMA 3.2 model\r\n */ const localAiMiddleware = {\n    /**\r\n   * Process a user message through the LLaMA 3.2 AI pipeline\r\n   * @param {string} message - User's message\r\n   * @param {Array} history - Chat history\r\n   * @param {Object} userProfile - User profile data\r\n   * @returns {Promise<Object>} - Processed result with AI response\r\n   */ async processInput (message, history = [], userProfile = {}) {\n        console.log('Processing input with local LLaMA middleware:', {\n            message,\n            historyLength: history.length\n        });\n        try {\n            // Check for crisis keywords in message\n            const lowerMessage = message.toLowerCase();\n            const crisisKeywords = [\n                'suicide',\n                'kill myself',\n                'end my life',\n                'want to die',\n                'don\\'t want to live'\n            ];\n            const isCrisis = crisisKeywords.some((keyword)=>lowerMessage.includes(keyword));\n            // Enhance the system message with context\n            let enhancedHistory = [\n                ...history\n            ];\n            // Add a system message at the beginning\n            if (isCrisis) {\n                // Special system message for crisis situations\n                enhancedHistory.unshift({\n                    role: 'system',\n                    content: `You are a mental health assistant called NeuroSync AI. The user has expressed thoughts that may indicate self-harm or suicide risk.\nYour primary concern is their safety. Respond with compassion while providing clear crisis resources:\n1. Express concern for their wellbeing\n2. Tell them to contact emergency services (911 in US) if in immediate danger\n3. Provide the Suicide & Crisis Lifeline: call/text 988 or chat at 988lifeline.org\n4. Remind them that help is available and they deserve support\n5. Don't minimize their feelings or use platitudes like \"it will get better\"\nDo not provide any methods or means that could be used for self-harm. Always prioritize safety over other conversational goals.`\n                });\n            } else if (history.length > 0) {\n                // Regular message with history\n                enhancedHistory.unshift({\n                    role: 'system',\n                    content: `You are a mental health assistant called NeuroSync AI. You have a conversation history with this user. \nRemember what you've discussed in this conversation so you can refer to previous topics if relevant.\nBe empathetic, helpful, and conversational. When the user asks about previous parts of the conversation, \nreference that information accurately. Identify the user's emotional state from their messages.\n\nIf the user expresses thoughts of self-harm or suicide, immediately switch to crisis support mode:\n- Express concern for their wellbeing\n- Tell them to contact emergency services (911 in US) if in immediate danger\n- Provide the Suicide & Crisis Lifeline: call/text 988 or chat at 988lifeline.org\n- Remind them that help is available and they deserve support\n- Never minimize their feelings or use platitudes like \"it will get better\"`\n                });\n            } else {\n                // No history means this is a new conversation\n                enhancedHistory.unshift({\n                    role: 'system',\n                    content: `You are a mental health assistant called NeuroSync AI. This is a new conversation with a user.\nBe empathetic, helpful, and conversational. Identify the user's emotional state from their messages.\n\nIf the user expresses thoughts of self-harm or suicide, immediately switch to crisis support mode:\n- Express concern for their wellbeing\n- Tell them to contact emergency services (911 in US) if in immediate danger\n- Provide the Suicide & Crisis Lifeline: call/text 988 or chat at 988lifeline.org\n- Remind them that help is available and they deserve support\n- Never minimize their feelings or use platitudes like \"it will get better\"`\n                });\n            }\n            // Run sentiment analysis and chat response in parallel for speed\n            console.log('Starting parallel processing for chat response and sentiment analysis');\n            const [chatResult, sentimentResult] = await Promise.all([\n                // Get chat response from LLaMA - this is the main part\n                _llama_service__WEBPACK_IMPORTED_MODULE_0__.llamaService.processMessage(message, enhancedHistory),\n                // Quick sentiment analysis - use pattern matching first\n                _llama_service__WEBPACK_IMPORTED_MODULE_0__.llamaService.quickAnalyzeSentiment(message)\n            ]);\n            console.log('Sentiment analysis result:', sentimentResult);\n            console.log('Chat response received');\n            // Get recommendations based on emotional state\n            // Use quick pre-defined recommendations for faster response\n            console.log('Getting recommendations');\n            const emotionalState = isCrisis ? 'distressed' : sentimentResult.emotions.primary;\n            const recommendations = _llama_service__WEBPACK_IMPORTED_MODULE_0__.llamaService.getQuickRecommendations(emotionalState);\n            console.log('Recommendations retrieved, count:', recommendations.length);\n            // Return the combined result\n            return {\n                response: chatResult.response,\n                sentiment: isCrisis ? 'negative' : sentimentResult.sentiment,\n                emotions: isCrisis ? {\n                    primary: 'distressed',\n                    confidence: 0.9\n                } : sentimentResult.emotions,\n                recommendations\n            };\n        } catch (error) {\n            console.error('Error in local AI middleware:', error);\n            // Return a fallback response instead of throwing\n            return {\n                response: `I'm having trouble connecting to my AI brain right now. Let me try a simpler response: I understand you said \"${message}\". How can I help you with that?`,\n                sentiment: 'neutral',\n                emotions: {\n                    primary: 'neutral',\n                    confidence: 0.5\n                },\n                recommendations: [\n                    {\n                        type: 'exercise',\n                        title: 'Take a Moment',\n                        description: 'Take a deep breath and a moment for yourself.',\n                        actionUrl: '/resources/mindfulness',\n                        actionText: 'Learn More'\n                    }\n                ]\n            };\n        }\n    }\n};\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api-node)/./lib/local-ai-middleware.js\n");

/***/ }),

/***/ "(api-node)/./lib/models/conversation.js":
/*!************************************!*\
  !*** ./lib/models/conversation.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   conversationSchema: () => (/* binding */ conversationSchema)\n/* harmony export */ });\n/**\r\n * MongoDB schema for conversations\r\n * Stores chat history between users and the AI assistant\r\n */ /**\r\n * Message structure:\r\n * - sender: 'user' | 'ai'\r\n * - content: string\r\n * - timestamp: Date\r\n * - sentiment: string (optional)\r\n * - emotions: object (optional)\r\n */ /**\r\n * Conversation Schema:\r\n * - userId: ObjectId (reference to users collection)\r\n * - title: string (auto-generated from first message or user-defined)\r\n * - messages: Array of message objects\r\n * - createdAt: Date\r\n * - updatedAt: Date\r\n * - lastSentiment: string (most recent analyzed sentiment)\r\n * - lastEmotions: object (most recent analyzed emotions)\r\n * - recommendations: Array of recommendation objects (most recent)\r\n */ // This file provides schema definition for conversations\n// to be used in MongoDB collections\n// Export schema for use in API routes\nconst conversationSchema = {\n    userId: '',\n    title: '',\n    messages: [],\n    createdAt: new Date(),\n    updatedAt: new Date(),\n    lastSentiment: '',\n    lastEmotions: {\n        primary: '',\n        confidence: 0\n    },\n    recommendations: []\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaS1ub2RlKS8uL2xpYi9tb2RlbHMvY29udmVyc2F0aW9uLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTs7O0NBR0MsR0FFRDs7Ozs7OztDQU9DLEdBRUQ7Ozs7Ozs7Ozs7Q0FVQyxHQUVELHlEQUF5RDtBQUN6RCxvQ0FBb0M7QUFFcEMsc0NBQXNDO0FBQy9CLE1BQU1BLHFCQUFxQjtJQUNoQ0MsUUFBUTtJQUNSQyxPQUFPO0lBQ1BDLFVBQVUsRUFRVDtJQUNEQyxXQUFXLElBQUlDO0lBQ2ZDLFdBQVcsSUFBSUQ7SUFDZkUsZUFBZTtJQUNmQyxjQUFjO1FBQ1pDLFNBQVM7UUFDVEMsWUFBWTtJQUNkO0lBQ0FDLGlCQUFpQixFQUFFO0FBQ3JCLEVBQUUiLCJzb3VyY2VzIjpbIkQ6XFxQcm9qZWN0c1xcRGVraHRlIGhhaVxcbmV1cm9TeW5jXFxOZXVyb1N5bmMtQUktRnJvbnRlbmRcXGxpYlxcbW9kZWxzXFxjb252ZXJzYXRpb24uanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIE1vbmdvREIgc2NoZW1hIGZvciBjb252ZXJzYXRpb25zXHJcbiAqIFN0b3JlcyBjaGF0IGhpc3RvcnkgYmV0d2VlbiB1c2VycyBhbmQgdGhlIEFJIGFzc2lzdGFudFxyXG4gKi9cclxuXHJcbi8qKlxyXG4gKiBNZXNzYWdlIHN0cnVjdHVyZTpcclxuICogLSBzZW5kZXI6ICd1c2VyJyB8ICdhaSdcclxuICogLSBjb250ZW50OiBzdHJpbmdcclxuICogLSB0aW1lc3RhbXA6IERhdGVcclxuICogLSBzZW50aW1lbnQ6IHN0cmluZyAob3B0aW9uYWwpXHJcbiAqIC0gZW1vdGlvbnM6IG9iamVjdCAob3B0aW9uYWwpXHJcbiAqL1xyXG5cclxuLyoqXHJcbiAqIENvbnZlcnNhdGlvbiBTY2hlbWE6XHJcbiAqIC0gdXNlcklkOiBPYmplY3RJZCAocmVmZXJlbmNlIHRvIHVzZXJzIGNvbGxlY3Rpb24pXHJcbiAqIC0gdGl0bGU6IHN0cmluZyAoYXV0by1nZW5lcmF0ZWQgZnJvbSBmaXJzdCBtZXNzYWdlIG9yIHVzZXItZGVmaW5lZClcclxuICogLSBtZXNzYWdlczogQXJyYXkgb2YgbWVzc2FnZSBvYmplY3RzXHJcbiAqIC0gY3JlYXRlZEF0OiBEYXRlXHJcbiAqIC0gdXBkYXRlZEF0OiBEYXRlXHJcbiAqIC0gbGFzdFNlbnRpbWVudDogc3RyaW5nIChtb3N0IHJlY2VudCBhbmFseXplZCBzZW50aW1lbnQpXHJcbiAqIC0gbGFzdEVtb3Rpb25zOiBvYmplY3QgKG1vc3QgcmVjZW50IGFuYWx5emVkIGVtb3Rpb25zKVxyXG4gKiAtIHJlY29tbWVuZGF0aW9uczogQXJyYXkgb2YgcmVjb21tZW5kYXRpb24gb2JqZWN0cyAobW9zdCByZWNlbnQpXHJcbiAqL1xyXG5cclxuLy8gVGhpcyBmaWxlIHByb3ZpZGVzIHNjaGVtYSBkZWZpbml0aW9uIGZvciBjb252ZXJzYXRpb25zXHJcbi8vIHRvIGJlIHVzZWQgaW4gTW9uZ29EQiBjb2xsZWN0aW9uc1xyXG5cclxuLy8gRXhwb3J0IHNjaGVtYSBmb3IgdXNlIGluIEFQSSByb3V0ZXNcclxuZXhwb3J0IGNvbnN0IGNvbnZlcnNhdGlvblNjaGVtYSA9IHtcclxuICB1c2VySWQ6ICcnLCAvLyBXaWxsIGJlIHBvcHVsYXRlZCB3aXRoIE1vbmdvREIgT2JqZWN0SWRcclxuICB0aXRsZTogJycsXHJcbiAgbWVzc2FnZXM6IFtcclxuICAgIC8vIHtcclxuICAgIC8vICAgc2VuZGVyOiAndXNlcicgfCAnYWknLFxyXG4gICAgLy8gICBjb250ZW50OiAnJyxcclxuICAgIC8vICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLFxyXG4gICAgLy8gICBzZW50aW1lbnQ6ICcnLCAvLyBPcHRpb25hbFxyXG4gICAgLy8gICBlbW90aW9uczoge30sIC8vIE9wdGlvbmFsXHJcbiAgICAvLyB9XHJcbiAgXSxcclxuICBjcmVhdGVkQXQ6IG5ldyBEYXRlKCksXHJcbiAgdXBkYXRlZEF0OiBuZXcgRGF0ZSgpLFxyXG4gIGxhc3RTZW50aW1lbnQ6ICcnLFxyXG4gIGxhc3RFbW90aW9uczoge1xyXG4gICAgcHJpbWFyeTogJycsXHJcbiAgICBjb25maWRlbmNlOiAwXHJcbiAgfSxcclxuICByZWNvbW1lbmRhdGlvbnM6IFtdXHJcbn07ICJdLCJuYW1lcyI6WyJjb252ZXJzYXRpb25TY2hlbWEiLCJ1c2VySWQiLCJ0aXRsZSIsIm1lc3NhZ2VzIiwiY3JlYXRlZEF0IiwiRGF0ZSIsInVwZGF0ZWRBdCIsImxhc3RTZW50aW1lbnQiLCJsYXN0RW1vdGlvbnMiLCJwcmltYXJ5IiwiY29uZmlkZW5jZSIsInJlY29tbWVuZGF0aW9ucyJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api-node)/./lib/models/conversation.js\n");

/***/ }),

/***/ "(api-node)/./lib/mongodb.js":
/*!************************!*\
  !*** ./lib/mongodb.js ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   connectToDatabase: () => (/* binding */ connectToDatabase),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var mongodb__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! mongodb */ \"mongodb\");\n/* harmony import */ var mongodb__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(mongodb__WEBPACK_IMPORTED_MODULE_0__);\n\nconst uri = process.env.MONGODB_URI || 'mongodb://localhost:27017/neurosync';\nconst options = {\n    useUnifiedTopology: true,\n    useNewUrlParser: true\n};\nlet client;\nlet clientPromise;\nif (!process.env.MONGODB_URI) {\n    throw new Error('Please add your MongoDB URI to .env.local');\n}\nif (true) {\n    // In development mode, use a global variable so that the value\n    // is preserved across module reloads caused by HMR (Hot Module Replacement).\n    if (!global._mongoClientPromise) {\n        client = new mongodb__WEBPACK_IMPORTED_MODULE_0__.MongoClient(uri, options);\n        global._mongoClientPromise = client.connect();\n    }\n    clientPromise = global._mongoClientPromise;\n} else {}\nasync function connectToDatabase() {\n    console.log('Connecting to MongoDB...');\n    const client = await clientPromise;\n    const db = client.db();\n    console.log('Connected to MongoDB successfully');\n    return {\n        client,\n        db\n    };\n}\n// Export a module-scoped MongoClient promise\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (clientPromise);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaS1ub2RlKS8uL2xpYi9tb25nb2RiLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBc0M7QUFFdEMsTUFBTUMsTUFBTUMsUUFBUUMsR0FBRyxDQUFDQyxXQUFXLElBQUk7QUFDdkMsTUFBTUMsVUFBVTtJQUNkQyxvQkFBb0I7SUFDcEJDLGlCQUFpQjtBQUNuQjtBQUVBLElBQUlDO0FBQ0osSUFBSUM7QUFFSixJQUFJLENBQUNQLFFBQVFDLEdBQUcsQ0FBQ0MsV0FBVyxFQUFFO0lBQzVCLE1BQU0sSUFBSU0sTUFBTTtBQUNsQjtBQUVBLElBQUlSLElBQXNDLEVBQUU7SUFDMUMsK0RBQStEO0lBQy9ELDZFQUE2RTtJQUM3RSxJQUFJLENBQUNTLE9BQU9DLG1CQUFtQixFQUFFO1FBQy9CSixTQUFTLElBQUlSLGdEQUFXQSxDQUFDQyxLQUFLSTtRQUM5Qk0sT0FBT0MsbUJBQW1CLEdBQUdKLE9BQU9LLE9BQU87SUFDN0M7SUFDQUosZ0JBQWdCRSxPQUFPQyxtQkFBbUI7QUFDNUMsT0FBTyxFQUlOO0FBRU0sZUFBZUU7SUFDcEJDLFFBQVFDLEdBQUcsQ0FBQztJQUNaLE1BQU1SLFNBQVMsTUFBTUM7SUFDckIsTUFBTVEsS0FBS1QsT0FBT1MsRUFBRTtJQUNwQkYsUUFBUUMsR0FBRyxDQUFDO0lBQ1osT0FBTztRQUFFUjtRQUFRUztJQUFHO0FBQ3RCO0FBRUEsNkNBQTZDO0FBQzdDLGlFQUFlUixhQUFhQSxFQUFDIiwic291cmNlcyI6WyJEOlxcUHJvamVjdHNcXERla2h0ZSBoYWlcXG5ldXJvU3luY1xcTmV1cm9TeW5jLUFJLUZyb250ZW5kXFxsaWJcXG1vbmdvZGIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTW9uZ29DbGllbnQgfSBmcm9tICdtb25nb2RiJztcclxuXHJcbmNvbnN0IHVyaSA9IHByb2Nlc3MuZW52Lk1PTkdPREJfVVJJIHx8ICdtb25nb2RiOi8vbG9jYWxob3N0OjI3MDE3L25ldXJvc3luYyc7XHJcbmNvbnN0IG9wdGlvbnMgPSB7XHJcbiAgdXNlVW5pZmllZFRvcG9sb2d5OiB0cnVlLFxyXG4gIHVzZU5ld1VybFBhcnNlcjogdHJ1ZSxcclxufTtcclxuXHJcbmxldCBjbGllbnQ7XHJcbmxldCBjbGllbnRQcm9taXNlO1xyXG5cclxuaWYgKCFwcm9jZXNzLmVudi5NT05HT0RCX1VSSSkge1xyXG4gIHRocm93IG5ldyBFcnJvcignUGxlYXNlIGFkZCB5b3VyIE1vbmdvREIgVVJJIHRvIC5lbnYubG9jYWwnKTtcclxufVxyXG5cclxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAnZGV2ZWxvcG1lbnQnKSB7XHJcbiAgLy8gSW4gZGV2ZWxvcG1lbnQgbW9kZSwgdXNlIGEgZ2xvYmFsIHZhcmlhYmxlIHNvIHRoYXQgdGhlIHZhbHVlXHJcbiAgLy8gaXMgcHJlc2VydmVkIGFjcm9zcyBtb2R1bGUgcmVsb2FkcyBjYXVzZWQgYnkgSE1SIChIb3QgTW9kdWxlIFJlcGxhY2VtZW50KS5cclxuICBpZiAoIWdsb2JhbC5fbW9uZ29DbGllbnRQcm9taXNlKSB7XHJcbiAgICBjbGllbnQgPSBuZXcgTW9uZ29DbGllbnQodXJpLCBvcHRpb25zKTtcclxuICAgIGdsb2JhbC5fbW9uZ29DbGllbnRQcm9taXNlID0gY2xpZW50LmNvbm5lY3QoKTtcclxuICB9XHJcbiAgY2xpZW50UHJvbWlzZSA9IGdsb2JhbC5fbW9uZ29DbGllbnRQcm9taXNlO1xyXG59IGVsc2Uge1xyXG4gIC8vIEluIHByb2R1Y3Rpb24gbW9kZSwgaXQncyBiZXN0IHRvIG5vdCB1c2UgYSBnbG9iYWwgdmFyaWFibGUuXHJcbiAgY2xpZW50ID0gbmV3IE1vbmdvQ2xpZW50KHVyaSwgb3B0aW9ucyk7XHJcbiAgY2xpZW50UHJvbWlzZSA9IGNsaWVudC5jb25uZWN0KCk7XHJcbn1cclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBjb25uZWN0VG9EYXRhYmFzZSgpIHtcclxuICBjb25zb2xlLmxvZygnQ29ubmVjdGluZyB0byBNb25nb0RCLi4uJyk7XHJcbiAgY29uc3QgY2xpZW50ID0gYXdhaXQgY2xpZW50UHJvbWlzZTtcclxuICBjb25zdCBkYiA9IGNsaWVudC5kYigpO1xyXG4gIGNvbnNvbGUubG9nKCdDb25uZWN0ZWQgdG8gTW9uZ29EQiBzdWNjZXNzZnVsbHknKTtcclxuICByZXR1cm4geyBjbGllbnQsIGRiIH07XHJcbn1cclxuXHJcbi8vIEV4cG9ydCBhIG1vZHVsZS1zY29wZWQgTW9uZ29DbGllbnQgcHJvbWlzZVxyXG5leHBvcnQgZGVmYXVsdCBjbGllbnRQcm9taXNlOyAiXSwibmFtZXMiOlsiTW9uZ29DbGllbnQiLCJ1cmkiLCJwcm9jZXNzIiwiZW52IiwiTU9OR09EQl9VUkkiLCJvcHRpb25zIiwidXNlVW5pZmllZFRvcG9sb2d5IiwidXNlTmV3VXJsUGFyc2VyIiwiY2xpZW50IiwiY2xpZW50UHJvbWlzZSIsIkVycm9yIiwiZ2xvYmFsIiwiX21vbmdvQ2xpZW50UHJvbWlzZSIsImNvbm5lY3QiLCJjb25uZWN0VG9EYXRhYmFzZSIsImNvbnNvbGUiLCJsb2ciLCJkYiJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api-node)/./lib/mongodb.js\n");

/***/ }),

/***/ "(api-node)/./lib/services/conversation-service.js":
/*!**********************************************!*\
  !*** ./lib/services/conversation-service.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   conversationService: () => (/* binding */ conversationService)\n/* harmony export */ });\n/* harmony import */ var _mongodb__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../mongodb */ \"(api-node)/./lib/mongodb.js\");\n/* harmony import */ var _models_conversation__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../models/conversation */ \"(api-node)/./lib/models/conversation.js\");\n/* harmony import */ var mongodb__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! mongodb */ \"mongodb\");\n/* harmony import */ var mongodb__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(mongodb__WEBPACK_IMPORTED_MODULE_2__);\n\n\n\n/**\r\n * Service for managing conversations in MongoDB\r\n */ const conversationService = {\n    /**\r\n   * Create a new conversation\r\n   * @param {string} userId - User ID\r\n   * @param {string} message - Initial message content\r\n   * @param {Object} analysis - Optional sentiment analysis\r\n   * @returns {Promise<Object>} - Created conversation\r\n   */ createConversation: async (userId, message, analysis = null)=>{\n        const { db } = await (0,_mongodb__WEBPACK_IMPORTED_MODULE_0__.connectToDatabase)();\n        // Validate userId\n        if (!userId || typeof userId !== 'string' || userId === 'undefined') {\n            console.error('Invalid userId provided to createConversation:', userId);\n            throw new Error('Invalid user ID');\n        }\n        try {\n            const newConversation = {\n                ..._models_conversation__WEBPACK_IMPORTED_MODULE_1__.conversationSchema,\n                userId: new mongodb__WEBPACK_IMPORTED_MODULE_2__.ObjectId(userId),\n                title: `Conversation ${new Date().toLocaleString()}`,\n                messages: [\n                    {\n                        sender: 'user',\n                        content: message,\n                        timestamp: new Date(),\n                        analysis: analysis || null\n                    }\n                ],\n                createdAt: new Date(),\n                updatedAt: new Date()\n            };\n            const result = await db.collection('conversations').insertOne(newConversation);\n            return {\n                ...newConversation,\n                _id: result.insertedId\n            };\n        } catch (error) {\n            console.error('Error in createConversation:', error);\n            throw error;\n        }\n    },\n    /**\r\n   * Add a message to an existing conversation\r\n   * @param {string} conversationId - Conversation ID\r\n   * @param {Object} message - Message object\r\n   * @param {Object} analysis - Sentiment analysis results\r\n   * @returns {Promise<Object>} - Updated conversation\r\n   */ addMessage: async (conversationId, message, analysis = null)=>{\n        const { db } = await (0,_mongodb__WEBPACK_IMPORTED_MODULE_0__.connectToDatabase)();\n        if (!conversationId) {\n            console.error('Invalid conversationId provided to addMessage');\n            throw new Error('Invalid conversation ID');\n        }\n        try {\n            const updateData = {\n                $push: {\n                    messages: message\n                },\n                $set: {\n                    updatedAt: new Date()\n                }\n            };\n            // Add sentiment analysis if available\n            if (analysis) {\n                updateData.$set.lastSentiment = analysis.sentiment;\n                updateData.$set.lastEmotions = analysis.emotions;\n                if (analysis.recommendations) {\n                    updateData.$set.recommendations = analysis.recommendations;\n                }\n            }\n            await db.collection('conversations').updateOne({\n                _id: new mongodb__WEBPACK_IMPORTED_MODULE_2__.ObjectId(conversationId)\n            }, updateData);\n            return await conversationService.getConversation(conversationId);\n        } catch (error) {\n            console.error('Error in addMessage:', error);\n            throw error;\n        }\n    },\n    /**\r\n   * Get a conversation by ID\r\n   * @param {string} conversationId - Conversation ID\r\n   * @returns {Promise<Object>} - Conversation\r\n   */ getConversation: async (conversationId)=>{\n        const { db } = await (0,_mongodb__WEBPACK_IMPORTED_MODULE_0__.connectToDatabase)();\n        if (!conversationId) {\n            console.error('Invalid conversationId provided to getConversation');\n            return null;\n        }\n        try {\n            return await db.collection('conversations').findOne({\n                _id: new mongodb__WEBPACK_IMPORTED_MODULE_2__.ObjectId(conversationId)\n            });\n        } catch (error) {\n            console.error('Error in getConversation:', error);\n            return null;\n        }\n    },\n    /**\r\n   * Get all conversations for a user\r\n   * @param {string} userId - User ID\r\n   * @returns {Promise<Array>} - List of conversations\r\n   */ getUserConversations: async (userId)=>{\n        const { db } = await (0,_mongodb__WEBPACK_IMPORTED_MODULE_0__.connectToDatabase)();\n        // Handle case when userId is invalid or undefined\n        if (!userId || typeof userId !== 'string' || userId === 'undefined') {\n            console.log('Invalid userId provided to getUserConversations:', userId);\n            return [];\n        }\n        try {\n            return await db.collection('conversations').find({\n                userId: new mongodb__WEBPACK_IMPORTED_MODULE_2__.ObjectId(userId)\n            }).sort({\n                updatedAt: -1\n            }).toArray();\n        } catch (error) {\n            console.error('Error in getUserConversations:', error);\n            return [];\n        }\n    },\n    /**\r\n   * Delete a conversation\r\n   * @param {string} conversationId - Conversation ID\r\n   * @returns {Promise<boolean>} - Success status\r\n   */ deleteConversation: async (conversationId)=>{\n        const { db } = await (0,_mongodb__WEBPACK_IMPORTED_MODULE_0__.connectToDatabase)();\n        if (!conversationId) {\n            console.error('Invalid conversationId provided to deleteConversation');\n            return false;\n        }\n        try {\n            const result = await db.collection('conversations').deleteOne({\n                _id: new mongodb__WEBPACK_IMPORTED_MODULE_2__.ObjectId(conversationId)\n            });\n            return result.deletedCount === 1;\n        } catch (error) {\n            console.error('Error in deleteConversation:', error);\n            return false;\n        }\n    },\n    /**\r\n   * Delete all conversations for a user\r\n   * @param {string} userId - User ID\r\n   * @returns {Promise<number>} - Number of deleted conversations\r\n   */ deleteAllConversations: async (userId)=>{\n        const { db } = await (0,_mongodb__WEBPACK_IMPORTED_MODULE_0__.connectToDatabase)();\n        if (!userId || typeof userId !== 'string' || userId === 'undefined') {\n            console.error('Invalid userId provided to deleteAllConversations:', userId);\n            return 0;\n        }\n        try {\n            const result = await db.collection('conversations').deleteMany({\n                userId: new mongodb__WEBPACK_IMPORTED_MODULE_2__.ObjectId(userId)\n            });\n            return result.deletedCount;\n        } catch (error) {\n            console.error('Error in deleteAllConversations:', error);\n            return 0;\n        }\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api-node)/./lib/services/conversation-service.js\n");

/***/ }),

/***/ "(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fai%2Flocal-chat&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cai%5Clocal-chat.js&middlewareConfigBase64=e30%3D!":
/*!************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fai%2Flocal-chat&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cai%5Clocal-chat.js&middlewareConfigBase64=e30%3D! ***!
  \************************************************************************************************************************************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   routeModule: () => (/* binding */ routeModule)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/route-modules/pages-api/module.compiled */ \"(api-node)/./node_modules/next/dist/server/route-modules/pages-api/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(api-node)/./node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"(api-node)/./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var _pages_api_ai_local_chat_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./pages\\api\\ai\\local-chat.js */ \"(api-node)/./pages/api/ai/local-chat.js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_pages_api_ai_local_chat_js__WEBPACK_IMPORTED_MODULE_3__]);\n_pages_api_ai_local_chat_js__WEBPACK_IMPORTED_MODULE_3__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n// Import the userland code.\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_ai_local_chat_js__WEBPACK_IMPORTED_MODULE_3__, 'default'));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_ai_local_chat_js__WEBPACK_IMPORTED_MODULE_3__, 'config');\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: \"/api/ai/local-chat\",\n        pathname: \"/api/ai/local-chat\",\n        // The following aren't used in production.\n        bundlePath: '',\n        filename: ''\n    },\n    userland: _pages_api_ai_local_chat_js__WEBPACK_IMPORTED_MODULE_3__\n});\n\n//# sourceMappingURL=pages-api.js.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaS1ub2RlKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYnVpbGQvd2VicGFjay9sb2FkZXJzL25leHQtcm91dGUtbG9hZGVyL2luZGV4LmpzP2tpbmQ9UEFHRVNfQVBJJnBhZ2U9JTJGYXBpJTJGYWklMkZsb2NhbC1jaGF0JnByZWZlcnJlZFJlZ2lvbj0mYWJzb2x1dGVQYWdlUGF0aD0uJTJGcGFnZXMlNUNhcGklNUNhaSU1Q2xvY2FsLWNoYXQuanMmbWlkZGxld2FyZUNvbmZpZ0Jhc2U2ND1lMzAlM0QhIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O0FBQStGO0FBQ3ZDO0FBQ0U7QUFDMUQ7QUFDNEQ7QUFDNUQ7QUFDQSxpRUFBZSx3RUFBSyxDQUFDLHdEQUFRLFlBQVksRUFBQztBQUMxQztBQUNPLGVBQWUsd0VBQUssQ0FBQyx3REFBUTtBQUNwQztBQUNPLHdCQUF3Qix5R0FBbUI7QUFDbEQ7QUFDQSxjQUFjLGtFQUFTO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsWUFBWTtBQUNaLENBQUM7O0FBRUQscUMiLCJzb3VyY2VzIjpbIiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQYWdlc0FQSVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvcm91dGUtbW9kdWxlcy9wYWdlcy1hcGkvbW9kdWxlLmNvbXBpbGVkXCI7XG5pbXBvcnQgeyBSb3V0ZUtpbmQgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9yb3V0ZS1raW5kXCI7XG5pbXBvcnQgeyBob2lzdCB9IGZyb20gXCJuZXh0L2Rpc3QvYnVpbGQvdGVtcGxhdGVzL2hlbHBlcnNcIjtcbi8vIEltcG9ydCB0aGUgdXNlcmxhbmQgY29kZS5cbmltcG9ydCAqIGFzIHVzZXJsYW5kIGZyb20gXCIuL3BhZ2VzXFxcXGFwaVxcXFxhaVxcXFxsb2NhbC1jaGF0LmpzXCI7XG4vLyBSZS1leHBvcnQgdGhlIGhhbmRsZXIgKHNob3VsZCBiZSB0aGUgZGVmYXVsdCBleHBvcnQpLlxuZXhwb3J0IGRlZmF1bHQgaG9pc3QodXNlcmxhbmQsICdkZWZhdWx0Jyk7XG4vLyBSZS1leHBvcnQgY29uZmlnLlxuZXhwb3J0IGNvbnN0IGNvbmZpZyA9IGhvaXN0KHVzZXJsYW5kLCAnY29uZmlnJyk7XG4vLyBDcmVhdGUgYW5kIGV4cG9ydCB0aGUgcm91dGUgbW9kdWxlIHRoYXQgd2lsbCBiZSBjb25zdW1lZC5cbmV4cG9ydCBjb25zdCByb3V0ZU1vZHVsZSA9IG5ldyBQYWdlc0FQSVJvdXRlTW9kdWxlKHtcbiAgICBkZWZpbml0aW9uOiB7XG4gICAgICAgIGtpbmQ6IFJvdXRlS2luZC5QQUdFU19BUEksXG4gICAgICAgIHBhZ2U6IFwiL2FwaS9haS9sb2NhbC1jaGF0XCIsXG4gICAgICAgIHBhdGhuYW1lOiBcIi9hcGkvYWkvbG9jYWwtY2hhdFwiLFxuICAgICAgICAvLyBUaGUgZm9sbG93aW5nIGFyZW4ndCB1c2VkIGluIHByb2R1Y3Rpb24uXG4gICAgICAgIGJ1bmRsZVBhdGg6ICcnLFxuICAgICAgICBmaWxlbmFtZTogJydcbiAgICB9LFxuICAgIHVzZXJsYW5kXG59KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGFnZXMtYXBpLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fai%2Flocal-chat&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cai%5Clocal-chat.js&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "(api-node)/./pages/api/ai/local-chat.js":
/*!************************************!*\
  !*** ./pages/api/ai/local-chat.js ***!
  \************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var _lib_local_ai_middleware__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/local-ai-middleware */ \"(api-node)/./lib/local-ai-middleware.js\");\n/* harmony import */ var _lib_services_conversation_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../lib/services/conversation-service */ \"(api-node)/./lib/services/conversation-service.js\");\n/* harmony import */ var mongodb__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! mongodb */ \"mongodb\");\n/* harmony import */ var mongodb__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(mongodb__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _lib_mongodb__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../lib/mongodb */ \"(api-node)/./lib/mongodb.js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_lib_local_ai_middleware__WEBPACK_IMPORTED_MODULE_0__]);\n_lib_local_ai_middleware__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n\n// Sample recommendation data for fallback\nconst SAMPLE_RECOMMENDATIONS = [\n    {\n        type: 'exercise',\n        title: 'Deep Breathing Exercise',\n        description: 'Take 5 deep breaths, inhaling for 4 seconds and exhaling for 6 seconds.',\n        actionUrl: '/resources/exercises/breathing',\n        actionText: 'Start Exercise'\n    },\n    {\n        type: 'resource',\n        title: 'Understanding Anxiety',\n        description: 'Learn about the causes and effects of anxiety in everyday life.',\n        actionUrl: '/resources/articles/anxiety',\n        actionText: 'Read Article'\n    },\n    {\n        type: 'checkin',\n        title: 'Mood Check-in',\n        description: \"Record how you're feeling right now to track your emotional patterns.\",\n        actionUrl: '/checkin',\n        actionText: 'Check In'\n    }\n];\nasync function handler(req, res) {\n    // Only allow POST requests\n    if (req.method !== 'POST') {\n        return res.status(405).json({\n            message: 'Method not allowed'\n        });\n    }\n    try {\n        const { message, history, userId, conversationId } = req.body;\n        if (!message) {\n            return res.status(400).json({\n                message: 'Message is required'\n            });\n        }\n        // Get user profile if userId is provided\n        let userProfile = {};\n        if (userId) {\n            // In a real implementation, fetch user profile from database\n            userProfile = {\n                id: userId,\n                name: \"User\"\n            };\n        }\n        try {\n            // Process the message through local LLaMA middleware\n            const result = await _lib_local_ai_middleware__WEBPACK_IMPORTED_MODULE_0__.localAiMiddleware.processInput(message, history, userProfile);\n            // Save to MongoDB based on whether it's a new or existing conversation\n            let savedConversationId = conversationId;\n            let savedConversation;\n            // Create or update conversation in MongoDB\n            try {\n                if (!conversationId) {\n                    // New conversation\n                    savedConversation = await _lib_services_conversation_service__WEBPACK_IMPORTED_MODULE_1__.conversationService.createConversation(userId, message, {\n                        sentiment: result.sentiment,\n                        emotions: result.emotions\n                    });\n                    savedConversationId = savedConversation._id.toString();\n                    // Add AI response to the conversation\n                    await _lib_services_conversation_service__WEBPACK_IMPORTED_MODULE_1__.conversationService.addMessage(savedConversationId, {\n                        sender: 'bot',\n                        content: result.response,\n                        timestamp: new Date()\n                    });\n                } else {\n                    // Add message to existing conversation\n                    await _lib_services_conversation_service__WEBPACK_IMPORTED_MODULE_1__.conversationService.addMessage(conversationId, {\n                        sender: 'user',\n                        content: message,\n                        timestamp: new Date(),\n                        analysis: {\n                            sentiment: result.sentiment,\n                            emotions: result.emotions\n                        }\n                    });\n                    // Add AI response to the conversation\n                    savedConversation = await _lib_services_conversation_service__WEBPACK_IMPORTED_MODULE_1__.conversationService.addMessage(conversationId, {\n                        sender: 'bot',\n                        content: result.response,\n                        timestamp: new Date()\n                    });\n                }\n                // Update recommendations if available\n                if (result.recommendations && Array.isArray(result.recommendations) && result.recommendations.length > 0) {\n                    const { db } = await (0,_lib_mongodb__WEBPACK_IMPORTED_MODULE_3__.connectToDatabase)();\n                    await db.collection('conversations').updateOne({\n                        _id: new mongodb__WEBPACK_IMPORTED_MODULE_2__.ObjectId(savedConversationId)\n                    }, {\n                        $set: {\n                            recommendations: result.recommendations\n                        }\n                    });\n                }\n            } catch (dbError) {\n                console.error('Error saving conversation to MongoDB:', dbError);\n            // Continue even if DB save fails\n            }\n            // Return AI response to client\n            res.status(200).json({\n                message: result.response,\n                sentiment: result.sentiment,\n                emotions: result.emotions,\n                recommendations: result.recommendations,\n                conversationId: savedConversationId\n            });\n        } catch (error) {\n            console.error('Error in local LLaMA processing:', error);\n            // Fallback response\n            const lowerMessage = message.toLowerCase();\n            let sentiment = 'neutral';\n            let responseText = \"I understand what you're saying. How else can I help you today?\";\n            let emotions = {\n                primary: 'neutral',\n                confidence: 0.8\n            };\n            if (lowerMessage.includes('sad') || lowerMessage.includes('depress') || lowerMessage.includes('upset')) {\n                sentiment = 'negative';\n                emotions = {\n                    primary: 'sad',\n                    confidence: 0.8\n                };\n                responseText = \"I'm sorry to hear you're feeling down. Remember that it's okay to have these feelings, and there are resources available to help.\";\n            } else if (lowerMessage.includes('happy') || lowerMessage.includes('great') || lowerMessage.includes('good')) {\n                sentiment = 'positive';\n                emotions = {\n                    primary: 'happy',\n                    confidence: 0.8\n                };\n                responseText = \"I'm glad to hear you're feeling positive! That's wonderful.\";\n            } else if (lowerMessage.includes('anxious') || lowerMessage.includes('worry') || lowerMessage.includes('stress')) {\n                sentiment = 'negative';\n                emotions = {\n                    primary: 'anxious',\n                    confidence: 0.8\n                };\n                responseText = \"It sounds like you might be feeling anxious. Deep breathing can sometimes help in moments like this.\";\n            } else if (lowerMessage.includes('suicide') || lowerMessage.includes('kill myself') || lowerMessage.includes('end my life')) {\n                sentiment = 'negative';\n                emotions = {\n                    primary: 'distressed',\n                    confidence: 0.9\n                };\n                responseText = \"I'm concerned about what you're saying. If you're having thoughts of harming yourself, please reach out to a crisis helpline immediately. In the US, you can call or text 988 to reach the Suicide and Crisis Lifeline, or chat at 988lifeline.org. They provide free, confidential support 24/7. Your life matters, and help is available.\";\n            }\n            // Save to MongoDB even in fallback case\n            let savedConversationId = conversationId;\n            try {\n                if (!conversationId) {\n                    // New conversation\n                    const savedConversation = await _lib_services_conversation_service__WEBPACK_IMPORTED_MODULE_1__.conversationService.createConversation(userId, message, {\n                        sentiment: sentiment,\n                        emotions: emotions\n                    });\n                    savedConversationId = savedConversation._id.toString();\n                    // Add AI response\n                    await _lib_services_conversation_service__WEBPACK_IMPORTED_MODULE_1__.conversationService.addMessage(savedConversationId, {\n                        sender: 'bot',\n                        content: responseText,\n                        timestamp: new Date()\n                    });\n                } else {\n                    // Add to existing conversation\n                    await _lib_services_conversation_service__WEBPACK_IMPORTED_MODULE_1__.conversationService.addMessage(conversationId, {\n                        sender: 'user',\n                        content: message,\n                        timestamp: new Date(),\n                        analysis: {\n                            sentiment: sentiment,\n                            emotions: emotions\n                        }\n                    });\n                    // Add AI response\n                    await _lib_services_conversation_service__WEBPACK_IMPORTED_MODULE_1__.conversationService.addMessage(conversationId, {\n                        sender: 'bot',\n                        content: responseText,\n                        timestamp: new Date()\n                    });\n                }\n            } catch (dbError) {\n                console.error('Error saving fallback response to MongoDB:', dbError);\n            }\n            res.status(200).json({\n                message: responseText,\n                sentiment: sentiment,\n                emotions: emotions,\n                recommendations: SAMPLE_RECOMMENDATIONS,\n                conversationId: savedConversationId\n            });\n        }\n    } catch (error) {\n        console.error('Error in local chat API:', error);\n        res.status(500).json({\n            message: 'An error occurred while processing your message',\n            error:  true ? error.message : 0\n        });\n    }\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api-node)/./pages/api/ai/local-chat.js\n");

/***/ }),

/***/ "axios":
/*!************************!*\
  !*** external "axios" ***!
  \************************/
/***/ ((module) => {

module.exports = import("axios");;

/***/ }),

/***/ "mongodb":
/*!**************************!*\
  !*** external "mongodb" ***!
  \**************************/
/***/ ((module) => {

module.exports = require("mongodb");

/***/ }),

/***/ "next/dist/compiled/next-server/pages-api.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages-api.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages-api.runtime.dev.js");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fai%2Flocal-chat&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cai%5Clocal-chat.js&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();