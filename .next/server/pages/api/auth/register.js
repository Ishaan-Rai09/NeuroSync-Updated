"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/auth/register";
exports.ids = ["pages/api/auth/register"];
exports.modules = {

/***/ "(api-node)/./lib/auth-service.js":
/*!*****************************!*\
  !*** ./lib/auth-service.js ***!
  \*****************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   authService: () => (/* binding */ authService)\n/* harmony export */ });\n/* harmony import */ var bcryptjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! bcryptjs */ \"bcryptjs\");\n/* harmony import */ var jsonwebtoken__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! jsonwebtoken */ \"jsonwebtoken\");\n/* harmony import */ var jsonwebtoken__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(jsonwebtoken__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _services_pinata_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./services/pinata-service */ \"(api-node)/./lib/services/pinata-service.js\");\n/* harmony import */ var _services_pinata_service__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_services_pinata_service__WEBPACK_IMPORTED_MODULE_2__);\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([bcryptjs__WEBPACK_IMPORTED_MODULE_0__]);\nbcryptjs__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n/**\r\n * Authentication service using Pinata IPFS for credential storage\r\n */ \n\n\nconst JWT_SECRET = process.env.JWT_SECRET || 'your-secret-key';\n// Helper function to generate unique IDs\nfunction generateUserId() {\n    return Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);\n}\n// Prefix for user storage in Pinata\nconst USER_PREFIX = 'user_auth';\nconst authService = {\n    /**\r\n   * Register a new user with email and password\r\n   * @param {Object} userData - User data including credentials\r\n   * @returns {Promise<Object>} - User object and JWT token\r\n   */ async registerUser (userData) {\n        try {\n            const { firstName, lastName, email, password } = userData;\n            // Basic validation\n            if (!firstName || !lastName || !email || !password) {\n                throw new Error('All fields are required');\n            }\n            // Check if user exists by retrieving all users with same email\n            const existingUser = await this.findUserByEmail(email);\n            if (existingUser) {\n                throw new Error('User already exists with this email');\n            }\n            // Generate a user ID\n            const userId = generateUserId();\n            // Hash the password\n            const hashedPassword = await bcryptjs__WEBPACK_IMPORTED_MODULE_0__[\"default\"].hash(password, 10);\n            // Create user object\n            const user = {\n                _id: userId,\n                userId: userId,\n                firstName,\n                lastName,\n                email,\n                password: hashedPassword,\n                createdAt: new Date(),\n                updatedAt: new Date(),\n                type: 'user_auth'\n            };\n            // Store user data in Pinata\n            const pinataResponse = await _services_pinata_service__WEBPACK_IMPORTED_MODULE_2__.pinataService.storeData(`${USER_PREFIX}_${userId}`, user, {\n                userId,\n                type: 'user_auth',\n                email\n            });\n            console.log(`User registered with ID: ${userId}, IPFS Hash: ${pinataResponse.IpfsHash}`);\n            // Create JWT token\n            const token = jsonwebtoken__WEBPACK_IMPORTED_MODULE_1___default().sign({\n                userId,\n                email\n            }, JWT_SECRET, {\n                expiresIn: '7d'\n            });\n            // Return user info and token (exclude password)\n            const { password: _, ...userInfo } = user;\n            return {\n                token,\n                user: {\n                    ...userInfo,\n                    ipfsHash: pinataResponse.IpfsHash\n                }\n            };\n        } catch (error) {\n            console.error('Error registering user in Pinata:', error);\n            throw error;\n        }\n    },\n    /**\r\n   * Login a user with email and password\r\n   * @param {string} email - User email\r\n   * @param {string} password - User password\r\n   * @returns {Promise<Object>} - User object and JWT token\r\n   */ async loginUser (email, password) {\n        try {\n            // Find user by email\n            const user = await this.findUserByEmail(email);\n            if (!user) {\n                throw new Error('Invalid email or password');\n            }\n            // Compare password\n            const isPasswordValid = await bcryptjs__WEBPACK_IMPORTED_MODULE_0__[\"default\"].compare(password, user.password);\n            if (!isPasswordValid) {\n                throw new Error('Invalid email or password');\n            }\n            // Create token\n            const token = jsonwebtoken__WEBPACK_IMPORTED_MODULE_1___default().sign({\n                userId: user._id,\n                email: user.email\n            }, JWT_SECRET, {\n                expiresIn: '7d'\n            });\n            // Return user info and token (exclude password)\n            const { password: _, ...userInfo } = user;\n            return {\n                token,\n                user: userInfo\n            };\n        } catch (error) {\n            console.error('Error logging in user from Pinata:', error);\n            throw error;\n        }\n    },\n    /**\r\n   * Find a user by email in Pinata storage\r\n   * @param {string} email - User email\r\n   * @returns {Promise<Object|null>} - User object or null if not found\r\n   */ async findUserByEmail (email) {\n        try {\n            // Get all pins from Pinata\n            const pins = await _services_pinata_service__WEBPACK_IMPORTED_MODULE_2__.pinataService.getAllPins();\n            // Find the user pin with matching email in metadata\n            const userPin = pins.find((pin)=>{\n                const metadata = pin.metadata?.keyvalues;\n                return metadata?.type === 'user_auth' && metadata?.email === email;\n            });\n            if (!userPin) {\n                return null;\n            }\n            // Get user data from Pinata\n            const userData = await _services_pinata_service__WEBPACK_IMPORTED_MODULE_2__.pinataService.getData(userPin.ipfs_pin_hash);\n            if (!userData) {\n                return null;\n            }\n            // Add IPFS hash to user data\n            return {\n                ...userData,\n                ipfsHash: userPin.ipfs_pin_hash\n            };\n        } catch (error) {\n            console.error('Error finding user by email in Pinata:', error);\n            return null;\n        }\n    },\n    /**\r\n   * Verify a JWT token and get user data\r\n   * @param {string} token - JWT token\r\n   * @returns {Promise<Object>} - Decoded token and user data\r\n   */ async verifyToken (token) {\n        try {\n            const decoded = jsonwebtoken__WEBPACK_IMPORTED_MODULE_1___default().verify(token, JWT_SECRET);\n            const userId = decoded.userId;\n            // Get user data from Pinata\n            const pins = await _services_pinata_service__WEBPACK_IMPORTED_MODULE_2__.pinataService.getHistory(userId);\n            const userPin = pins.find((pin)=>{\n                const metadata = pin.metadata?.keyvalues;\n                return metadata?.type === 'user_auth' && metadata?.userId === userId;\n            });\n            if (!userPin) {\n                throw new Error('User not found');\n            }\n            const userData = await _services_pinata_service__WEBPACK_IMPORTED_MODULE_2__.pinataService.getData(userPin.ipfs_pin_hash);\n            if (!userData) {\n                throw new Error('User data not found');\n            }\n            // Remove password from user data\n            const { password, ...userInfo } = userData;\n            return {\n                decoded,\n                user: {\n                    ...userInfo,\n                    ipfsHash: userPin.ipfs_pin_hash\n                }\n            };\n        } catch (error) {\n            console.error('Error verifying token:', error);\n            throw error;\n        }\n    }\n};\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api-node)/./lib/auth-service.js\n");

/***/ }),

/***/ "(api-node)/./lib/services/pinata-service.js":
/*!****************************************!*\
  !*** ./lib/services/pinata-service.js ***!
  \****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst axios = __webpack_require__(/*! axios */ \"axios?6fac\");\n/**\r\n * Pinata IPFS Service\r\n * Handles storing and retrieving data from Pinata IPFS\r\n */ class PinataService {\n    constructor(){\n        this.apiKey = process.env.PINATA_API_KEY;\n        this.apiSecret = process.env.PINATA_API_SECRET;\n        this.jwt = process.env.PINATA_JWT;\n        this.apiUrl = 'https://api.pinata.cloud';\n        this.gateway = 'https://gateway.pinata.cloud/ipfs/';\n    }\n    /**\r\n   * Check if the Pinata credentials are configured\r\n   */ isConfigured() {\n        return !!(this.jwt || this.apiKey && this.apiSecret);\n    }\n    /**\r\n   * Get the headers for Pinata API requests\r\n   */ getHeaders() {\n        if (this.jwt) {\n            return {\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${this.jwt}`\n            };\n        } else if (this.apiKey && this.apiSecret) {\n            return {\n                'Content-Type': 'application/json',\n                'pinata_api_key': this.apiKey,\n                'pinata_secret_api_key': this.apiSecret\n            };\n        } else {\n            throw new Error('Pinata credentials not configured');\n        }\n    }\n    /**\r\n   * Store data on Pinata IPFS\r\n   * @param {string} keyName - Unique key for the data\r\n   * @param {object} data - Data to store\r\n   * @param {object} metadata - Optional metadata for the pin\r\n   * @returns {Promise<object>} - Response from Pinata\r\n   */ async storeData(keyName, data, metadata = {}) {\n        try {\n            if (!this.isConfigured()) {\n                throw new Error('Pinata credentials not configured');\n            }\n            // Generate a unique identifier for the transaction\n            const uniqueId = `${keyName}_${Date.now()}`;\n            // Prepare the data for Pinata\n            const pinataBody = {\n                pinataContent: data,\n                pinataMetadata: {\n                    name: uniqueId,\n                    keyvalues: {\n                        userId: data.userId || 'anonymous',\n                        type: data.type || 'conversation',\n                        timestamp: Date.now(),\n                        ...metadata\n                    }\n                }\n            };\n            // Upload to Pinata\n            const response = await axios.post(`${this.apiUrl}/pinning/pinJSONToIPFS`, pinataBody, {\n                headers: this.getHeaders()\n            });\n            return response.data;\n        } catch (error) {\n            console.error('Failed to store data on Pinata:', error?.response?.data || error?.message || error);\n            throw error;\n        }\n    }\n    /**\r\n   * Get data from Pinata IPFS\r\n   * @param {string} ipfsHash - IPFS hash to retrieve\r\n   * @returns {Promise<object>} - Retrieved data\r\n   */ async getData(ipfsHash) {\n        try {\n            if (!ipfsHash) {\n                throw new Error('IPFS hash is required');\n            }\n            // Fetch data from Pinata Gateway\n            const response = await axios.get(`${this.gateway}${ipfsHash}`);\n            return response.data;\n        } catch (error) {\n            console.error(`Failed to get data from Pinata (${ipfsHash}):`, error?.message || error);\n            return null;\n        }\n    }\n    /**\r\n   * Get history of pins for a user\r\n   * @param {string} userId - User ID to get history for\r\n   * @returns {Promise<Array>} - Array of pins\r\n   */ async getHistory(userId) {\n        try {\n            if (!this.isConfigured()) {\n                throw new Error('Pinata credentials not configured');\n            }\n            if (!userId) {\n                return [];\n            }\n            // Query Pinata for pins with the user's ID\n            const response = await axios.get(`${this.apiUrl}/data/pinList?metadata[keyvalues][userId]={\"value\":\"${userId}\",\"op\":\"eq\"}&status=pinned`, {\n                headers: this.getHeaders()\n            });\n            return response.data.rows || [];\n        } catch (error) {\n            console.error(`Failed to get history from Pinata for user ${userId}:`, error?.response?.data || error?.message || error);\n            return [];\n        }\n    }\n    /**\r\n   * Remove data from Pinata IPFS\r\n   * @param {string} ipfsHash - IPFS hash to remove\r\n   * @returns {Promise<object>} - Response from Pinata\r\n   */ async removeData(ipfsHash) {\n        try {\n            if (!this.isConfigured()) {\n                throw new Error('Pinata credentials not configured');\n            }\n            if (!ipfsHash) {\n                throw new Error('IPFS hash is required');\n            }\n            // Unpin from Pinata\n            const response = await axios.delete(`${this.apiUrl}/pinning/unpin/${ipfsHash}`, {\n                headers: this.getHeaders()\n            });\n            return {\n                success: true,\n                data: response.data\n            };\n        } catch (error) {\n            console.error(`Failed to remove data from Pinata (${ipfsHash}):`, error?.response?.data || error?.message || error);\n            // Handle common Pinata error cases: \n            // 1. 404 - Pin doesn't exist\n            // 2. 400 with \"CURRENT_USER_HAS_NOT_PINNED_CID\" - User doesn't have permission to unpin\n            if (error?.response?.status === 404 || error?.response?.status === 400 && error?.response?.data?.error?.reason === 'CURRENT_USER_HAS_NOT_PINNED_CID') {\n                console.log(`Pin ${ipfsHash} not found or not owned by current user. Considering it removed.`);\n                return {\n                    success: true,\n                    message: 'Pin not found or not owned by current user'\n                };\n            }\n            throw error;\n        }\n    }\n    /**\r\n   * Test the Pinata connection\r\n   * @returns {Promise<boolean>} - Whether the connection was successful\r\n   */ async testConnection() {\n        try {\n            if (!this.isConfigured()) {\n                return false;\n            }\n            // Test the connection by getting the pin count\n            await axios.get(`${this.apiUrl}/data/userPinnedDataTotal`, {\n                headers: this.getHeaders()\n            });\n            return true;\n        } catch (error) {\n            console.error('Pinata connection test failed:', error?.response?.data || error?.message || error);\n            return false;\n        }\n    }\n    /**\r\n   * Get all pins from Pinata regardless of user ID\r\n   * @returns {Promise<Array>} - Array of pins\r\n   */ async getAllPins() {\n        try {\n            if (!this.isConfigured()) {\n                throw new Error('Pinata credentials not configured');\n            }\n            // Query Pinata for all pins\n            const response = await axios.get(`${this.apiUrl}/data/pinList?status=pinned`, {\n                headers: this.getHeaders()\n            });\n            return response.data.rows || [];\n        } catch (error) {\n            console.error(`Failed to get all pins from Pinata:`, error?.response?.data || error?.message || error);\n            return [];\n        }\n    }\n}\nconst pinataService = new PinataService();\nmodule.exports = {\n    pinataService\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api-node)/./lib/services/pinata-service.js\n");

/***/ }),

/***/ "(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fauth%2Fregister&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cauth%5Cregister.js&middlewareConfigBase64=e30%3D!":
/*!************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fauth%2Fregister&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cauth%5Cregister.js&middlewareConfigBase64=e30%3D! ***!
  \************************************************************************************************************************************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   routeModule: () => (/* binding */ routeModule)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/route-modules/pages-api/module.compiled */ \"(api-node)/./node_modules/next/dist/server/route-modules/pages-api/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(api-node)/./node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"(api-node)/./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var _pages_api_auth_register_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./pages\\api\\auth\\register.js */ \"(api-node)/./pages/api/auth/register.js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_pages_api_auth_register_js__WEBPACK_IMPORTED_MODULE_3__]);\n_pages_api_auth_register_js__WEBPACK_IMPORTED_MODULE_3__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n// Import the userland code.\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_auth_register_js__WEBPACK_IMPORTED_MODULE_3__, 'default'));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_auth_register_js__WEBPACK_IMPORTED_MODULE_3__, 'config');\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: \"/api/auth/register\",\n        pathname: \"/api/auth/register\",\n        // The following aren't used in production.\n        bundlePath: '',\n        filename: ''\n    },\n    userland: _pages_api_auth_register_js__WEBPACK_IMPORTED_MODULE_3__\n});\n\n//# sourceMappingURL=pages-api.js.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaS1ub2RlKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYnVpbGQvd2VicGFjay9sb2FkZXJzL25leHQtcm91dGUtbG9hZGVyL2luZGV4LmpzP2tpbmQ9UEFHRVNfQVBJJnBhZ2U9JTJGYXBpJTJGYXV0aCUyRnJlZ2lzdGVyJnByZWZlcnJlZFJlZ2lvbj0mYWJzb2x1dGVQYWdlUGF0aD0uJTJGcGFnZXMlNUNhcGklNUNhdXRoJTVDcmVnaXN0ZXIuanMmbWlkZGxld2FyZUNvbmZpZ0Jhc2U2ND1lMzAlM0QhIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O0FBQStGO0FBQ3ZDO0FBQ0U7QUFDMUQ7QUFDNEQ7QUFDNUQ7QUFDQSxpRUFBZSx3RUFBSyxDQUFDLHdEQUFRLFlBQVksRUFBQztBQUMxQztBQUNPLGVBQWUsd0VBQUssQ0FBQyx3REFBUTtBQUNwQztBQUNPLHdCQUF3Qix5R0FBbUI7QUFDbEQ7QUFDQSxjQUFjLGtFQUFTO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsWUFBWTtBQUNaLENBQUM7O0FBRUQscUMiLCJzb3VyY2VzIjpbIiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQYWdlc0FQSVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvcm91dGUtbW9kdWxlcy9wYWdlcy1hcGkvbW9kdWxlLmNvbXBpbGVkXCI7XG5pbXBvcnQgeyBSb3V0ZUtpbmQgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9yb3V0ZS1raW5kXCI7XG5pbXBvcnQgeyBob2lzdCB9IGZyb20gXCJuZXh0L2Rpc3QvYnVpbGQvdGVtcGxhdGVzL2hlbHBlcnNcIjtcbi8vIEltcG9ydCB0aGUgdXNlcmxhbmQgY29kZS5cbmltcG9ydCAqIGFzIHVzZXJsYW5kIGZyb20gXCIuL3BhZ2VzXFxcXGFwaVxcXFxhdXRoXFxcXHJlZ2lzdGVyLmpzXCI7XG4vLyBSZS1leHBvcnQgdGhlIGhhbmRsZXIgKHNob3VsZCBiZSB0aGUgZGVmYXVsdCBleHBvcnQpLlxuZXhwb3J0IGRlZmF1bHQgaG9pc3QodXNlcmxhbmQsICdkZWZhdWx0Jyk7XG4vLyBSZS1leHBvcnQgY29uZmlnLlxuZXhwb3J0IGNvbnN0IGNvbmZpZyA9IGhvaXN0KHVzZXJsYW5kLCAnY29uZmlnJyk7XG4vLyBDcmVhdGUgYW5kIGV4cG9ydCB0aGUgcm91dGUgbW9kdWxlIHRoYXQgd2lsbCBiZSBjb25zdW1lZC5cbmV4cG9ydCBjb25zdCByb3V0ZU1vZHVsZSA9IG5ldyBQYWdlc0FQSVJvdXRlTW9kdWxlKHtcbiAgICBkZWZpbml0aW9uOiB7XG4gICAgICAgIGtpbmQ6IFJvdXRlS2luZC5QQUdFU19BUEksXG4gICAgICAgIHBhZ2U6IFwiL2FwaS9hdXRoL3JlZ2lzdGVyXCIsXG4gICAgICAgIHBhdGhuYW1lOiBcIi9hcGkvYXV0aC9yZWdpc3RlclwiLFxuICAgICAgICAvLyBUaGUgZm9sbG93aW5nIGFyZW4ndCB1c2VkIGluIHByb2R1Y3Rpb24uXG4gICAgICAgIGJ1bmRsZVBhdGg6ICcnLFxuICAgICAgICBmaWxlbmFtZTogJydcbiAgICB9LFxuICAgIHVzZXJsYW5kXG59KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGFnZXMtYXBpLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fauth%2Fregister&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cauth%5Cregister.js&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "(api-node)/./pages/api/auth/register.js":
/*!************************************!*\
  !*** ./pages/api/auth/register.js ***!
  \************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var _lib_auth_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/auth-service */ \"(api-node)/./lib/auth-service.js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_lib_auth_service__WEBPACK_IMPORTED_MODULE_0__]);\n_lib_auth_service__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\nasync function handler(req, res) {\n    if (req.method !== 'POST') {\n        return res.status(405).json({\n            message: 'Method not allowed'\n        });\n    }\n    try {\n        const { firstName, lastName, email, password } = req.body;\n        // Basic validation\n        if (!firstName || !lastName || !email || !password) {\n            return res.status(400).json({\n                message: 'All fields are required'\n            });\n        }\n        // Register user with Pinata-based auth service\n        const result = await _lib_auth_service__WEBPACK_IMPORTED_MODULE_0__.authService.registerUser({\n            firstName,\n            lastName,\n            email,\n            password\n        });\n        res.status(201).json({\n            message: 'User registered successfully',\n            token: result.token,\n            user: {\n                id: result.user._id,\n                firstName: result.user.firstName,\n                lastName: result.user.lastName,\n                email: result.user.email\n            }\n        });\n    } catch (error) {\n        console.error('Registration error:', error);\n        // Return appropriate error message\n        if (error.message === 'User already exists with this email') {\n            return res.status(400).json({\n                message: error.message\n            });\n        }\n        res.status(500).json({\n            message: 'Internal server error'\n        });\n    }\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaS1ub2RlKS8uL3BhZ2VzL2FwaS9hdXRoL3JlZ2lzdGVyLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQXdEO0FBRXpDLGVBQWVDLFFBQVFDLEdBQUcsRUFBRUMsR0FBRztJQUM1QyxJQUFJRCxJQUFJRSxNQUFNLEtBQUssUUFBUTtRQUN6QixPQUFPRCxJQUFJRSxNQUFNLENBQUMsS0FBS0MsSUFBSSxDQUFDO1lBQUVDLFNBQVM7UUFBcUI7SUFDOUQ7SUFFQSxJQUFJO1FBQ0YsTUFBTSxFQUFFQyxTQUFTLEVBQUVDLFFBQVEsRUFBRUMsS0FBSyxFQUFFQyxRQUFRLEVBQUUsR0FBR1QsSUFBSVUsSUFBSTtRQUV6RCxtQkFBbUI7UUFDbkIsSUFBSSxDQUFDSixhQUFhLENBQUNDLFlBQVksQ0FBQ0MsU0FBUyxDQUFDQyxVQUFVO1lBQ2xELE9BQU9SLElBQUlFLE1BQU0sQ0FBQyxLQUFLQyxJQUFJLENBQUM7Z0JBQUVDLFNBQVM7WUFBMEI7UUFDbkU7UUFFQSwrQ0FBK0M7UUFDL0MsTUFBTU0sU0FBUyxNQUFNYiwwREFBV0EsQ0FBQ2MsWUFBWSxDQUFDO1lBQzVDTjtZQUNBQztZQUNBQztZQUNBQztRQUNGO1FBRUFSLElBQUlFLE1BQU0sQ0FBQyxLQUFLQyxJQUFJLENBQUM7WUFDbkJDLFNBQVM7WUFDVFEsT0FBT0YsT0FBT0UsS0FBSztZQUNuQkMsTUFBTTtnQkFDSkMsSUFBSUosT0FBT0csSUFBSSxDQUFDRSxHQUFHO2dCQUNuQlYsV0FBV0ssT0FBT0csSUFBSSxDQUFDUixTQUFTO2dCQUNoQ0MsVUFBVUksT0FBT0csSUFBSSxDQUFDUCxRQUFRO2dCQUM5QkMsT0FBT0csT0FBT0csSUFBSSxDQUFDTixLQUFLO1lBQzFCO1FBQ0Y7SUFDRixFQUFFLE9BQU9TLE9BQU87UUFDZEMsUUFBUUQsS0FBSyxDQUFDLHVCQUF1QkE7UUFFckMsbUNBQW1DO1FBQ25DLElBQUlBLE1BQU1aLE9BQU8sS0FBSyx1Q0FBdUM7WUFDM0QsT0FBT0osSUFBSUUsTUFBTSxDQUFDLEtBQUtDLElBQUksQ0FBQztnQkFBRUMsU0FBU1ksTUFBTVosT0FBTztZQUFDO1FBQ3ZEO1FBRUFKLElBQUlFLE1BQU0sQ0FBQyxLQUFLQyxJQUFJLENBQUM7WUFBRUMsU0FBUztRQUF3QjtJQUMxRDtBQUNGIiwic291cmNlcyI6WyJEOlxcUHJvamVjdHNcXERla2h0ZSBoYWlcXG5ldXJvU3luY1xcTmV1cm9TeW5jLUFJLUZyb250ZW5kXFxwYWdlc1xcYXBpXFxhdXRoXFxyZWdpc3Rlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBhdXRoU2VydmljZSB9IGZyb20gJy4uLy4uLy4uL2xpYi9hdXRoLXNlcnZpY2UnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgYXN5bmMgZnVuY3Rpb24gaGFuZGxlcihyZXEsIHJlcykge1xyXG4gIGlmIChyZXEubWV0aG9kICE9PSAnUE9TVCcpIHtcclxuICAgIHJldHVybiByZXMuc3RhdHVzKDQwNSkuanNvbih7IG1lc3NhZ2U6ICdNZXRob2Qgbm90IGFsbG93ZWQnIH0pO1xyXG4gIH1cclxuXHJcbiAgdHJ5IHtcclxuICAgIGNvbnN0IHsgZmlyc3ROYW1lLCBsYXN0TmFtZSwgZW1haWwsIHBhc3N3b3JkIH0gPSByZXEuYm9keTtcclxuXHJcbiAgICAvLyBCYXNpYyB2YWxpZGF0aW9uXHJcbiAgICBpZiAoIWZpcnN0TmFtZSB8fCAhbGFzdE5hbWUgfHwgIWVtYWlsIHx8ICFwYXNzd29yZCkge1xyXG4gICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDApLmpzb24oeyBtZXNzYWdlOiAnQWxsIGZpZWxkcyBhcmUgcmVxdWlyZWQnIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFJlZ2lzdGVyIHVzZXIgd2l0aCBQaW5hdGEtYmFzZWQgYXV0aCBzZXJ2aWNlXHJcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBhdXRoU2VydmljZS5yZWdpc3RlclVzZXIoe1xyXG4gICAgICBmaXJzdE5hbWUsXHJcbiAgICAgIGxhc3ROYW1lLFxyXG4gICAgICBlbWFpbCxcclxuICAgICAgcGFzc3dvcmRcclxuICAgIH0pO1xyXG5cclxuICAgIHJlcy5zdGF0dXMoMjAxKS5qc29uKHtcclxuICAgICAgbWVzc2FnZTogJ1VzZXIgcmVnaXN0ZXJlZCBzdWNjZXNzZnVsbHknLFxyXG4gICAgICB0b2tlbjogcmVzdWx0LnRva2VuLFxyXG4gICAgICB1c2VyOiB7XHJcbiAgICAgICAgaWQ6IHJlc3VsdC51c2VyLl9pZCxcclxuICAgICAgICBmaXJzdE5hbWU6IHJlc3VsdC51c2VyLmZpcnN0TmFtZSxcclxuICAgICAgICBsYXN0TmFtZTogcmVzdWx0LnVzZXIubGFzdE5hbWUsXHJcbiAgICAgICAgZW1haWw6IHJlc3VsdC51c2VyLmVtYWlsXHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICBjb25zb2xlLmVycm9yKCdSZWdpc3RyYXRpb24gZXJyb3I6JywgZXJyb3IpO1xyXG4gICAgXHJcbiAgICAvLyBSZXR1cm4gYXBwcm9wcmlhdGUgZXJyb3IgbWVzc2FnZVxyXG4gICAgaWYgKGVycm9yLm1lc3NhZ2UgPT09ICdVc2VyIGFscmVhZHkgZXhpc3RzIHdpdGggdGhpcyBlbWFpbCcpIHtcclxuICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAwKS5qc29uKHsgbWVzc2FnZTogZXJyb3IubWVzc2FnZSB9KTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgcmVzLnN0YXR1cyg1MDApLmpzb24oeyBtZXNzYWdlOiAnSW50ZXJuYWwgc2VydmVyIGVycm9yJyB9KTtcclxuICB9XHJcbn0gIl0sIm5hbWVzIjpbImF1dGhTZXJ2aWNlIiwiaGFuZGxlciIsInJlcSIsInJlcyIsIm1ldGhvZCIsInN0YXR1cyIsImpzb24iLCJtZXNzYWdlIiwiZmlyc3ROYW1lIiwibGFzdE5hbWUiLCJlbWFpbCIsInBhc3N3b3JkIiwiYm9keSIsInJlc3VsdCIsInJlZ2lzdGVyVXNlciIsInRva2VuIiwidXNlciIsImlkIiwiX2lkIiwiZXJyb3IiLCJjb25zb2xlIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api-node)/./pages/api/auth/register.js\n");

/***/ }),

/***/ "axios?6fac":
/*!************************!*\
  !*** external "axios" ***!
  \************************/
/***/ ((module) => {

module.exports = require("axios");

/***/ }),

/***/ "bcryptjs":
/*!***************************!*\
  !*** external "bcryptjs" ***!
  \***************************/
/***/ ((module) => {

module.exports = import("bcryptjs");;

/***/ }),

/***/ "jsonwebtoken":
/*!*******************************!*\
  !*** external "jsonwebtoken" ***!
  \*******************************/
/***/ ((module) => {

module.exports = require("jsonwebtoken");

/***/ }),

/***/ "next/dist/compiled/next-server/pages-api.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages-api.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages-api.runtime.dev.js");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fauth%2Fregister&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cauth%5Cregister.js&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();